
SR_projekt1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005a3c  08005a3c  00015a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a6c  08005a6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005a6c  08005a6c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a6c  08005a6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a6c  08005a6c  00015a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a70  08005a70  00015a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000000c  08005a80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005a80  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c26  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028c8  00000000  00000000  00033c62  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001220  00000000  00000000  00036530  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010b8  00000000  00000000  00037750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c32f  00000000  00000000  00038808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001250e  00000000  00000000  00054b37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a728e  00000000  00000000  00067045  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e2d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bd0  00000000  00000000  0010e350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a24 	.word	0x08005a24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005a24 	.word	0x08005a24

080001c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80001ce:	f107 031c 	add.w	r3, r7, #28
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
 80001e8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001ea:	4b2e      	ldr	r3, [pc, #184]	; (80002a4 <MX_ADC1_Init+0xdc>)
 80001ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001f2:	4b2c      	ldr	r3, [pc, #176]	; (80002a4 <MX_ADC1_Init+0xdc>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001f8:	4b2a      	ldr	r3, [pc, #168]	; (80002a4 <MX_ADC1_Init+0xdc>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001fe:	4b29      	ldr	r3, [pc, #164]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000200:	2200      	movs	r2, #0
 8000202:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000204:	4b27      	ldr	r3, [pc, #156]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000206:	2200      	movs	r2, #0
 8000208:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800020a:	4b26      	ldr	r3, [pc, #152]	; (80002a4 <MX_ADC1_Init+0xdc>)
 800020c:	2200      	movs	r2, #0
 800020e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000212:	4b24      	ldr	r3, [pc, #144]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000214:	2200      	movs	r2, #0
 8000216:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000218:	4b22      	ldr	r3, [pc, #136]	; (80002a4 <MX_ADC1_Init+0xdc>)
 800021a:	2201      	movs	r2, #1
 800021c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800021e:	4b21      	ldr	r3, [pc, #132]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000220:	2200      	movs	r2, #0
 8000222:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000224:	4b1f      	ldr	r3, [pc, #124]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000226:	2201      	movs	r2, #1
 8000228:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800022a:	4b1e      	ldr	r3, [pc, #120]	; (80002a4 <MX_ADC1_Init+0xdc>)
 800022c:	2200      	movs	r2, #0
 800022e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000232:	4b1c      	ldr	r3, [pc, #112]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000234:	2204      	movs	r2, #4
 8000236:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000238:	4b1a      	ldr	r3, [pc, #104]	; (80002a4 <MX_ADC1_Init+0xdc>)
 800023a:	2200      	movs	r2, #0
 800023c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800023e:	4b19      	ldr	r3, [pc, #100]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000240:	2200      	movs	r2, #0
 8000242:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000244:	4817      	ldr	r0, [pc, #92]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000246:	f000 fe49 	bl	8000edc <HAL_ADC_Init>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000250:	f000 faa9 	bl	80007a6 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000254:	2300      	movs	r3, #0
 8000256:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000258:	f107 031c 	add.w	r3, r7, #28
 800025c:	4619      	mov	r1, r3
 800025e:	4811      	ldr	r0, [pc, #68]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000260:	f001 fcd8 	bl	8001c14 <HAL_ADCEx_MultiModeConfigChannel>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800026a:	f000 fa9c 	bl	80007a6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800026e:	2304      	movs	r3, #4
 8000270:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000272:	2301      	movs	r3, #1
 8000274:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800027e:	2300      	movs	r3, #0
 8000280:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4619      	mov	r1, r3
 800028a:	4806      	ldr	r0, [pc, #24]	; (80002a4 <MX_ADC1_Init+0xdc>)
 800028c:	f001 fa00 	bl	8001690 <HAL_ADC_ConfigChannel>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000296:	f000 fa86 	bl	80007a6 <Error_Handler>
  }

}
 800029a:	bf00      	nop
 800029c:	3728      	adds	r7, #40	; 0x28
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	2000007c 	.word	0x2000007c

080002a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80002ae:	463b      	mov	r3, r7
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
 80002bc:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 80002be:	4b27      	ldr	r3, [pc, #156]	; (800035c <MX_ADC2_Init+0xb4>)
 80002c0:	4a27      	ldr	r2, [pc, #156]	; (8000360 <MX_ADC2_Init+0xb8>)
 80002c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002c4:	4b25      	ldr	r3, [pc, #148]	; (800035c <MX_ADC2_Init+0xb4>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80002ca:	4b24      	ldr	r3, [pc, #144]	; (800035c <MX_ADC2_Init+0xb4>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002d0:	4b22      	ldr	r3, [pc, #136]	; (800035c <MX_ADC2_Init+0xb4>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80002d6:	4b21      	ldr	r3, [pc, #132]	; (800035c <MX_ADC2_Init+0xb4>)
 80002d8:	2200      	movs	r2, #0
 80002da:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80002dc:	4b1f      	ldr	r3, [pc, #124]	; (800035c <MX_ADC2_Init+0xb4>)
 80002de:	2200      	movs	r2, #0
 80002e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002e4:	4b1d      	ldr	r3, [pc, #116]	; (800035c <MX_ADC2_Init+0xb4>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ea:	4b1c      	ldr	r3, [pc, #112]	; (800035c <MX_ADC2_Init+0xb4>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f0:	4b1a      	ldr	r3, [pc, #104]	; (800035c <MX_ADC2_Init+0xb4>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80002f6:	4b19      	ldr	r3, [pc, #100]	; (800035c <MX_ADC2_Init+0xb4>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80002fc:	4b17      	ldr	r3, [pc, #92]	; (800035c <MX_ADC2_Init+0xb4>)
 80002fe:	2200      	movs	r2, #0
 8000300:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <MX_ADC2_Init+0xb4>)
 8000306:	2204      	movs	r2, #4
 8000308:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800030a:	4b14      	ldr	r3, [pc, #80]	; (800035c <MX_ADC2_Init+0xb4>)
 800030c:	2200      	movs	r2, #0
 800030e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <MX_ADC2_Init+0xb4>)
 8000312:	2200      	movs	r2, #0
 8000314:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000316:	4811      	ldr	r0, [pc, #68]	; (800035c <MX_ADC2_Init+0xb4>)
 8000318:	f000 fde0 	bl	8000edc <HAL_ADC_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000322:	f000 fa40 	bl	80007a6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000326:	2303      	movs	r3, #3
 8000328:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800032a:	2301      	movs	r3, #1
 800032c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000332:	2300      	movs	r3, #0
 8000334:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000336:	2300      	movs	r3, #0
 8000338:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800033e:	463b      	mov	r3, r7
 8000340:	4619      	mov	r1, r3
 8000342:	4806      	ldr	r0, [pc, #24]	; (800035c <MX_ADC2_Init+0xb4>)
 8000344:	f001 f9a4 	bl	8001690 <HAL_ADC_ConfigChannel>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800034e:	f000 fa2a 	bl	80007a6 <Error_Handler>
  }

}
 8000352:	bf00      	nop
 8000354:	3718      	adds	r7, #24
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	2000002c 	.word	0x2000002c
 8000360:	50000100 	.word	0x50000100

08000364 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b08c      	sub	sp, #48	; 0x30
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	60da      	str	r2, [r3, #12]
 800037a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000384:	d136      	bne.n	80003f4 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000386:	4b3b      	ldr	r3, [pc, #236]	; (8000474 <HAL_ADC_MspInit+0x110>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	4a39      	ldr	r2, [pc, #228]	; (8000474 <HAL_ADC_MspInit+0x110>)
 800038e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000390:	4b38      	ldr	r3, [pc, #224]	; (8000474 <HAL_ADC_MspInit+0x110>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d10b      	bne.n	80003b0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000398:	4b37      	ldr	r3, [pc, #220]	; (8000478 <HAL_ADC_MspInit+0x114>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4a36      	ldr	r2, [pc, #216]	; (8000478 <HAL_ADC_MspInit+0x114>)
 800039e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a2:	6153      	str	r3, [r2, #20]
 80003a4:	4b34      	ldr	r3, [pc, #208]	; (8000478 <HAL_ADC_MspInit+0x114>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ac:	61bb      	str	r3, [r7, #24]
 80003ae:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b0:	4b31      	ldr	r3, [pc, #196]	; (8000478 <HAL_ADC_MspInit+0x114>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	4a30      	ldr	r2, [pc, #192]	; (8000478 <HAL_ADC_MspInit+0x114>)
 80003b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ba:	6153      	str	r3, [r2, #20]
 80003bc:	4b2e      	ldr	r3, [pc, #184]	; (8000478 <HAL_ADC_MspInit+0x114>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c4:	617b      	str	r3, [r7, #20]
 80003c6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CZ_1_Pin|CZ_2_Pin|CZ_3_Pin;
 80003c8:	230b      	movs	r3, #11
 80003ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003cc:	2303      	movs	r3, #3
 80003ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d0:	2300      	movs	r3, #0
 80003d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d4:	f107 031c 	add.w	r3, r7, #28
 80003d8:	4619      	mov	r1, r3
 80003da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003de:	f001 fe9b 	bl	8002118 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2100      	movs	r1, #0
 80003e6:	2012      	movs	r0, #18
 80003e8:	f001 fe15 	bl	8002016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80003ec:	2012      	movs	r0, #18
 80003ee:	f001 fe2e 	bl	800204e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80003f2:	e03a      	b.n	800046a <HAL_ADC_MspInit+0x106>
  else if(adcHandle->Instance==ADC2)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a20      	ldr	r2, [pc, #128]	; (800047c <HAL_ADC_MspInit+0x118>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d135      	bne.n	800046a <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80003fe:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <HAL_ADC_MspInit+0x110>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	3301      	adds	r3, #1
 8000404:	4a1b      	ldr	r2, [pc, #108]	; (8000474 <HAL_ADC_MspInit+0x110>)
 8000406:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000408:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <HAL_ADC_MspInit+0x110>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d10b      	bne.n	8000428 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <HAL_ADC_MspInit+0x114>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a18      	ldr	r2, [pc, #96]	; (8000478 <HAL_ADC_MspInit+0x114>)
 8000416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041a:	6153      	str	r3, [r2, #20]
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <HAL_ADC_MspInit+0x114>)
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000424:	613b      	str	r3, [r7, #16]
 8000426:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b13      	ldr	r3, [pc, #76]	; (8000478 <HAL_ADC_MspInit+0x114>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	4a12      	ldr	r2, [pc, #72]	; (8000478 <HAL_ADC_MspInit+0x114>)
 800042e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000432:	6153      	str	r3, [r2, #20]
 8000434:	4b10      	ldr	r3, [pc, #64]	; (8000478 <HAL_ADC_MspInit+0x114>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CZ_4_Pin|CZ_5_Pin|CZ_6_Pin|BATT_IN_Pin;
 8000440:	23f0      	movs	r3, #240	; 0xf0
 8000442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000444:	2303      	movs	r3, #3
 8000446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	2300      	movs	r3, #0
 800044a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044c:	f107 031c 	add.w	r3, r7, #28
 8000450:	4619      	mov	r1, r3
 8000452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000456:	f001 fe5f 	bl	8002118 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	2100      	movs	r1, #0
 800045e:	2012      	movs	r0, #18
 8000460:	f001 fdd9 	bl	8002016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000464:	2012      	movs	r0, #18
 8000466:	f001 fdf2 	bl	800204e <HAL_NVIC_EnableIRQ>
}
 800046a:	bf00      	nop
 800046c:	3730      	adds	r7, #48	; 0x30
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000028 	.word	0x20000028
 8000478:	40021000 	.word	0x40021000
 800047c:	50000100 	.word	0x50000100

08000480 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000486:	f107 030c 	add.w	r3, r7, #12
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000496:	4b32      	ldr	r3, [pc, #200]	; (8000560 <MX_GPIO_Init+0xe0>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a31      	ldr	r2, [pc, #196]	; (8000560 <MX_GPIO_Init+0xe0>)
 800049c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004a0:	6153      	str	r3, [r2, #20]
 80004a2:	4b2f      	ldr	r3, [pc, #188]	; (8000560 <MX_GPIO_Init+0xe0>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ae:	4b2c      	ldr	r3, [pc, #176]	; (8000560 <MX_GPIO_Init+0xe0>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a2b      	ldr	r2, [pc, #172]	; (8000560 <MX_GPIO_Init+0xe0>)
 80004b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b8:	6153      	str	r3, [r2, #20]
 80004ba:	4b29      	ldr	r3, [pc, #164]	; (8000560 <MX_GPIO_Init+0xe0>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	4b26      	ldr	r3, [pc, #152]	; (8000560 <MX_GPIO_Init+0xe0>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a25      	ldr	r2, [pc, #148]	; (8000560 <MX_GPIO_Init+0xe0>)
 80004cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b23      	ldr	r3, [pc, #140]	; (8000560 <MX_GPIO_Init+0xe0>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIR1_M2_Pin|DIR2_M2_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2103      	movs	r1, #3
 80004e2:	4820      	ldr	r0, [pc, #128]	; (8000564 <MX_GPIO_Init+0xe4>)
 80004e4:	f001 ff8a 	bl	80023fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_M1_GPIO_Port, DIR1_M1_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2102      	movs	r1, #2
 80004ec:	481e      	ldr	r0, [pc, #120]	; (8000568 <MX_GPIO_Init+0xe8>)
 80004ee:	f001 ff85 	bl	80023fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR2_M1_Pin|CS1_Pin|CS2_Pin|STBY_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80004f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fc:	f001 ff7e 	bl	80023fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = DIR1_M2_Pin|DIR2_M2_Pin;
 8000500:	2303      	movs	r3, #3
 8000502:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000504:	2301      	movs	r3, #1
 8000506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050c:	2300      	movs	r3, #0
 800050e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	4619      	mov	r1, r3
 8000516:	4813      	ldr	r0, [pc, #76]	; (8000564 <MX_GPIO_Init+0xe4>)
 8000518:	f001 fdfe 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR1_M1_Pin;
 800051c:	2302      	movs	r3, #2
 800051e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000520:	2301      	movs	r3, #1
 8000522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000528:	2300      	movs	r3, #0
 800052a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIR1_M1_GPIO_Port, &GPIO_InitStruct);
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	4619      	mov	r1, r3
 8000532:	480d      	ldr	r0, [pc, #52]	; (8000568 <MX_GPIO_Init+0xe8>)
 8000534:	f001 fdf0 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DIR2_M1_Pin|CS1_Pin|CS2_Pin|STBY_Pin;
 8000538:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800053c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2300      	movs	r3, #0
 8000548:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	4619      	mov	r1, r3
 8000550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000554:	f001 fde0 	bl	8002118 <HAL_GPIO_Init>

}
 8000558:	bf00      	nop
 800055a:	3720      	adds	r7, #32
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40021000 	.word	0x40021000
 8000564:	48001400 	.word	0x48001400
 8000568:	48000400 	.word	0x48000400

0800056c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <MX_I2C1_Init+0x74>)
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <MX_I2C1_Init+0x78>)
 8000574:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000576:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <MX_I2C1_Init+0x74>)
 8000578:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <MX_I2C1_Init+0x7c>)
 800057a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <MX_I2C1_Init+0x74>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000582:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <MX_I2C1_Init+0x74>)
 8000584:	2201      	movs	r2, #1
 8000586:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000588:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <MX_I2C1_Init+0x74>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800058e:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <MX_I2C1_Init+0x74>)
 8000590:	2200      	movs	r2, #0
 8000592:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <MX_I2C1_Init+0x74>)
 8000596:	2200      	movs	r2, #0
 8000598:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_I2C1_Init+0x74>)
 800059c:	2200      	movs	r2, #0
 800059e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_I2C1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005a6:	480e      	ldr	r0, [pc, #56]	; (80005e0 <MX_I2C1_Init+0x74>)
 80005a8:	f001 ff40 	bl	800242c <HAL_I2C_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005b2:	f000 f8f8 	bl	80007a6 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4809      	ldr	r0, [pc, #36]	; (80005e0 <MX_I2C1_Init+0x74>)
 80005ba:	f002 fd5e 	bl	800307a <HAL_I2CEx_ConfigAnalogFilter>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005c4:	f000 f8ef 	bl	80007a6 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005c8:	2100      	movs	r1, #0
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <MX_I2C1_Init+0x74>)
 80005cc:	f002 fda0 	bl	8003110 <HAL_I2CEx_ConfigDigitalFilter>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005d6:	f000 f8e6 	bl	80007a6 <Error_Handler>
  }

}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000cc 	.word	0x200000cc
 80005e4:	40005400 	.word	0x40005400
 80005e8:	2000090e 	.word	0x2000090e

080005ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1f      	ldr	r2, [pc, #124]	; (8000688 <HAL_I2C_MspInit+0x9c>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d137      	bne.n	800067e <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b1f      	ldr	r3, [pc, #124]	; (800068c <HAL_I2C_MspInit+0xa0>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a1e      	ldr	r2, [pc, #120]	; (800068c <HAL_I2C_MspInit+0xa0>)
 8000614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b1c      	ldr	r3, [pc, #112]	; (800068c <HAL_I2C_MspInit+0xa0>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000626:	23c0      	movs	r3, #192	; 0xc0
 8000628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800062a:	2312      	movs	r3, #18
 800062c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062e:	2301      	movs	r3, #1
 8000630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000636:	2304      	movs	r3, #4
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	4813      	ldr	r0, [pc, #76]	; (8000690 <HAL_I2C_MspInit+0xa4>)
 8000642:	f001 fd69 	bl	8002118 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <HAL_I2C_MspInit+0xa0>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a10      	ldr	r2, [pc, #64]	; (800068c <HAL_I2C_MspInit+0xa0>)
 800064c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <HAL_I2C_MspInit+0xa0>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	201f      	movs	r0, #31
 8000664:	f001 fcd7 	bl	8002016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000668:	201f      	movs	r0, #31
 800066a:	f001 fcf0 	bl	800204e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	2020      	movs	r0, #32
 8000674:	f001 fccf 	bl	8002016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000678:	2020      	movs	r0, #32
 800067a:	f001 fce8 	bl	800204e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800067e:	bf00      	nop
 8000680:	3728      	adds	r7, #40	; 0x28
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40005400 	.word	0x40005400
 800068c:	40021000 	.word	0x40021000
 8000690:	48000400 	.word	0x48000400

08000694 <HAL_TIM_PeriodElapsedCallback>:
volatile uint16_t czuj6;




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim3){
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 fb92 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f81e 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f7ff fee4 	bl	8000480 <MX_GPIO_Init>
  MX_TIM16_Init();
 80006b8:	f000 fa04 	bl	8000ac4 <MX_TIM16_Init>
  MX_TIM17_Init();
 80006bc:	f000 fa7c 	bl	8000bb8 <MX_TIM17_Init>
  MX_I2C1_Init();
 80006c0:	f7ff ff54 	bl	800056c <MX_I2C1_Init>
  MX_SPI1_Init();
 80006c4:	f000 f874 	bl	80007b0 <MX_SPI1_Init>
  MX_ADC2_Init();
 80006c8:	f7ff fdee 	bl	80002a8 <MX_ADC2_Init>
  MX_ADC1_Init();
 80006cc:	f7ff fd7c 	bl	80001c8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80006d0:	f000 f99c 	bl	8000a0c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80006d4:	2108      	movs	r1, #8
 80006d6:	4804      	ldr	r0, [pc, #16]	; (80006e8 <main+0x40>)
 80006d8:	f004 f9ec 	bl	8004ab4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80006dc:	2100      	movs	r1, #0
 80006de:	4803      	ldr	r0, [pc, #12]	; (80006ec <main+0x44>)
 80006e0:	f004 f9e8 	bl	8004ab4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <main+0x3c>
 80006e6:	bf00      	nop
 80006e8:	200001c8 	.word	0x200001c8
 80006ec:	20000214 	.word	0x20000214

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b096      	sub	sp, #88	; 0x58
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006fa:	2228      	movs	r2, #40	; 0x28
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f005 f988 	bl	8005a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
 8000722:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8000738:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800073c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000742:	4618      	mov	r0, r3
 8000744:	f002 fd30 	bl	80031a8 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800074e:	f000 f82a 	bl	80007a6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2302      	movs	r3, #2
 8000758:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	2101      	movs	r1, #1
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fc22 	bl	8003fb8 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800077a:	f000 f814 	bl	80007a6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 800077e:	23a0      	movs	r3, #160	; 0xa0
 8000780:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000786:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4618      	mov	r0, r3
 8000790:	f003 fdf8 	bl	8004384 <HAL_RCCEx_PeriphCLKConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800079a:	f000 f804 	bl	80007a6 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3758      	adds	r7, #88	; 0x58
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007aa:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x6>
	...

080007b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_SPI1_Init+0x74>)
 80007b6:	4a1c      	ldr	r2, [pc, #112]	; (8000828 <MX_SPI1_Init+0x78>)
 80007b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_SPI1_Init+0x74>)
 80007bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_SPI1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_SPI1_Init+0x74>)
 80007ca:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_SPI1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_SPI1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_SPI1_Init+0x74>)
 80007de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_SPI1_Init+0x74>)
 80007e6:	2218      	movs	r2, #24
 80007e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_SPI1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_SPI1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_SPI1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_SPI1_Init+0x74>)
 80007fe:	2207      	movs	r2, #7
 8000800:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_SPI1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_SPI1_Init+0x74>)
 800080a:	2208      	movs	r2, #8
 800080c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_SPI1_Init+0x74>)
 8000810:	f003 fede 	bl	80045d0 <HAL_SPI_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800081a:	f7ff ffc4 	bl	80007a6 <Error_Handler>
  }

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000118 	.word	0x20000118
 8000828:	40013000 	.word	0x40013000

0800082c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <HAL_SPI_MspInit+0x8c>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d12f      	bne.n	80008ae <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <HAL_SPI_MspInit+0x90>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a1a      	ldr	r2, [pc, #104]	; (80008bc <HAL_SPI_MspInit+0x90>)
 8000854:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_SPI_MspInit+0x90>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_SPI_MspInit+0x90>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a14      	ldr	r2, [pc, #80]	; (80008bc <HAL_SPI_MspInit+0x90>)
 800086c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000870:	6153      	str	r3, [r2, #20]
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_SPI_MspInit+0x90>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800087e:	2338      	movs	r3, #56	; 0x38
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800088e:	2305      	movs	r3, #5
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <HAL_SPI_MspInit+0x94>)
 800089a:	f001 fc3d 	bl	8002118 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2023      	movs	r0, #35	; 0x23
 80008a4:	f001 fbb7 	bl	8002016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80008a8:	2023      	movs	r0, #35	; 0x23
 80008aa:	f001 fbd0 	bl	800204e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40013000 	.word	0x40013000
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000400 	.word	0x48000400

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <HAL_MspInit+0x44>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <HAL_MspInit+0x44>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6193      	str	r3, [r2, #24]
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <HAL_MspInit+0x44>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_MspInit+0x44>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <HAL_MspInit+0x44>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	61d3      	str	r3, [r2, #28]
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_MspInit+0x44>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler+0x4>

08000926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <UsageFault_Handler+0x4>

08000932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 fa7e 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <ADC1_2_IRQHandler+0x14>)
 800096e:	f000 fc47 	bl	8001200 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000972:	4803      	ldr	r0, [pc, #12]	; (8000980 <ADC1_2_IRQHandler+0x18>)
 8000974:	f000 fc44 	bl	8001200 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000007c 	.word	0x2000007c
 8000980:	2000002c 	.word	0x2000002c

08000984 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800098a:	f004 f97f 	bl	8004c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000214 	.word	0x20000214

08000998 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <TIM3_IRQHandler+0x10>)
 800099e:	f004 f975 	bl	8004c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200001c8 	.word	0x200001c8

080009ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <I2C1_EV_IRQHandler+0x10>)
 80009b2:	f001 fdca 	bl	800254a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200000cc 	.word	0x200000cc

080009c0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <I2C1_ER_IRQHandler+0x10>)
 80009c6:	f001 fdda 	bl	800257e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000cc 	.word	0x200000cc

080009d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <SPI1_IRQHandler+0x10>)
 80009da:	f003 fe9d 	bl	8004718 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000118 	.word	0x20000118

080009e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <MX_TIM3_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a1e:	463b      	mov	r3, r7
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
 8000a2c:	615a      	str	r2, [r3, #20]
 8000a2e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <MX_TIM3_Init+0xb0>)
 8000a32:	4a23      	ldr	r2, [pc, #140]	; (8000ac0 <MX_TIM3_Init+0xb4>)
 8000a34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39999;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_TIM3_Init+0xb0>)
 8000a38:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000a3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_TIM3_Init+0xb0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_TIM3_Init+0xb0>)
 8000a46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_TIM3_Init+0xb0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_TIM3_Init+0xb0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a58:	4818      	ldr	r0, [pc, #96]	; (8000abc <MX_TIM3_Init+0xb0>)
 8000a5a:	f003 ffd3 	bl	8004a04 <HAL_TIM_PWM_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000a64:	f7ff fe9f 	bl	80007a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4811      	ldr	r0, [pc, #68]	; (8000abc <MX_TIM3_Init+0xb0>)
 8000a78:	f004 fea4 	bl	80057c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000a82:	f7ff fe90 	bl	80007a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a86:	2360      	movs	r3, #96	; 0x60
 8000a88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a96:	463b      	mov	r3, r7
 8000a98:	2208      	movs	r2, #8
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4807      	ldr	r0, [pc, #28]	; (8000abc <MX_TIM3_Init+0xb0>)
 8000a9e:	f004 fa15 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000aa8:	f7ff fe7d 	bl	80007a6 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <MX_TIM3_Init+0xb0>)
 8000aae:	f000 f909 	bl	8000cc4 <HAL_TIM_MspPostInit>

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200001c8 	.word	0x200001c8
 8000ac0:	40000400 	.word	0x40000400

08000ac4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b092      	sub	sp, #72	; 0x48
 8000ac8:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
 8000ada:	615a      	str	r2, [r3, #20]
 8000adc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ade:	463b      	mov	r3, r7
 8000ae0:	222c      	movs	r2, #44	; 0x2c
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 ff95 	bl	8005a14 <memset>

  htim16.Instance = TIM16;
 8000aea:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <MX_TIM16_Init+0xec>)
 8000aec:	4a31      	ldr	r2, [pc, #196]	; (8000bb4 <MX_TIM16_Init+0xf0>)
 8000aee:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 39999;
 8000af0:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <MX_TIM16_Init+0xec>)
 8000af2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000af6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <MX_TIM16_Init+0xec>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8000afe:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <MX_TIM16_Init+0xec>)
 8000b00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b04:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b06:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <MX_TIM16_Init+0xec>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b0c:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <MX_TIM16_Init+0xec>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <MX_TIM16_Init+0xec>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b18:	4825      	ldr	r0, [pc, #148]	; (8000bb0 <MX_TIM16_Init+0xec>)
 8000b1a:	f003 ff1c 	bl	8004956 <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8000b24:	f7ff fe3f 	bl	80007a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000b28:	4821      	ldr	r0, [pc, #132]	; (8000bb0 <MX_TIM16_Init+0xec>)
 8000b2a:	f003 ff6b 	bl	8004a04 <HAL_TIM_PWM_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8000b34:	f7ff fe37 	bl	80007a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b38:	2360      	movs	r3, #96	; 0x60
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b40:	2300      	movs	r3, #0
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b44:	2300      	movs	r3, #0
 8000b46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b50:	2300      	movs	r3, #0
 8000b52:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4814      	ldr	r0, [pc, #80]	; (8000bb0 <MX_TIM16_Init+0xec>)
 8000b5e:	f004 f9b5 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8000b68:	f7ff fe1d 	bl	80007a6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000b8e:	463b      	mov	r3, r7
 8000b90:	4619      	mov	r1, r3
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <MX_TIM16_Init+0xec>)
 8000b94:	f004 fe84 	bl	80058a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8000b9e:	f7ff fe02 	bl	80007a6 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim16);
 8000ba2:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <MX_TIM16_Init+0xec>)
 8000ba4:	f000 f88e 	bl	8000cc4 <HAL_TIM_MspPostInit>

}
 8000ba8:	bf00      	nop
 8000baa:	3748      	adds	r7, #72	; 0x48
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000214 	.word	0x20000214
 8000bb4:	40014400 	.word	0x40014400

08000bb8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_TIM17_Init+0x44>)
 8000bbe:	4a10      	ldr	r2, [pc, #64]	; (8000c00 <MX_TIM17_Init+0x48>)
 8000bc0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_TIM17_Init+0x44>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_TIM17_Init+0x44>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_TIM17_Init+0x44>)
 8000bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_TIM17_Init+0x44>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <MX_TIM17_Init+0x44>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_TIM17_Init+0x44>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_TIM17_Init+0x44>)
 8000bea:	f003 feb4 	bl	8004956 <HAL_TIM_Base_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000bf4:	f7ff fdd7 	bl	80007a6 <Error_Handler>
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	2000017c 	.word	0x2000017c
 8000c00:	40014800 	.word	0x40014800

08000c04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <HAL_TIM_PWM_MspInit+0x44>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d113      	bne.n	8000c3e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <HAL_TIM_PWM_MspInit+0x48>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a0c      	ldr	r2, [pc, #48]	; (8000c4c <HAL_TIM_PWM_MspInit+0x48>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	61d3      	str	r3, [r2, #28]
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_TIM_PWM_MspInit+0x48>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	201d      	movs	r0, #29
 8000c34:	f001 f9ef 	bl	8002016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c38:	201d      	movs	r0, #29
 8000c3a:	f001 fa08 	bl	800204e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40000400 	.word	0x40000400
 8000c4c:	40021000 	.word	0x40021000

08000c50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a16      	ldr	r2, [pc, #88]	; (8000cb8 <HAL_TIM_Base_MspInit+0x68>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d114      	bne.n	8000c8c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_TIM_Base_MspInit+0x6c>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <HAL_TIM_Base_MspInit+0x6c>)
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6c:	6193      	str	r3, [r2, #24]
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <HAL_TIM_Base_MspInit+0x6c>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2019      	movs	r0, #25
 8000c80:	f001 f9c9 	bl	8002016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c84:	2019      	movs	r0, #25
 8000c86:	f001 f9e2 	bl	800204e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000c8a:	e010      	b.n	8000cae <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM17)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <HAL_TIM_Base_MspInit+0x70>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d10b      	bne.n	8000cae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_TIM_Base_MspInit+0x6c>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_TIM_Base_MspInit+0x6c>)
 8000c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca0:	6193      	str	r3, [r2, #24]
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_TIM_Base_MspInit+0x6c>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40014400 	.word	0x40014400
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40014800 	.word	0x40014800

08000cc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a23      	ldr	r2, [pc, #140]	; (8000d70 <HAL_TIM_MspPostInit+0xac>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d11c      	bne.n	8000d20 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <HAL_TIM_MspPostInit+0xb0>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	4a22      	ldr	r2, [pc, #136]	; (8000d74 <HAL_TIM_MspPostInit+0xb0>)
 8000cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf0:	6153      	str	r3, [r2, #20]
 8000cf2:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <HAL_TIM_MspPostInit+0xb0>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = PWM_M1_Pin;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_M1_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4817      	ldr	r0, [pc, #92]	; (8000d78 <HAL_TIM_MspPostInit+0xb4>)
 8000d1a:	f001 f9fd 	bl	8002118 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000d1e:	e022      	b.n	8000d66 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM16)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a15      	ldr	r2, [pc, #84]	; (8000d7c <HAL_TIM_MspPostInit+0xb8>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d11d      	bne.n	8000d66 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_TIM_MspPostInit+0xb0>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	4a11      	ldr	r2, [pc, #68]	; (8000d74 <HAL_TIM_MspPostInit+0xb0>)
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	6153      	str	r3, [r2, #20]
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_TIM_MspPostInit+0xb0>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_M2_Pin;
 8000d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000d54:	2301      	movs	r3, #1
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_M2_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d62:	f001 f9d9 	bl	8002118 <HAL_GPIO_Init>
}
 8000d66:	bf00      	nop
 8000d68:	3728      	adds	r7, #40	; 0x28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40000400 	.word	0x40000400
 8000d74:	40021000 	.word	0x40021000
 8000d78:	48000400 	.word	0x48000400
 8000d7c:	40014400 	.word	0x40014400

08000d80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d86:	490e      	ldr	r1, [pc, #56]	; (8000dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d88:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <LoopForever+0xe>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d9c:	4c0b      	ldr	r4, [pc, #44]	; (8000dcc <LoopForever+0x16>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000daa:	f7ff fe1d 	bl	80009e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f004 fe0d 	bl	80059cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000db2:	f7ff fc79 	bl	80006a8 <main>

08000db6 <LoopForever>:

LoopForever:
    b LoopForever
 8000db6:	e7fe      	b.n	8000db6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000db8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dc4:	08005a74 	.word	0x08005a74
  ldr r2, =_sbss
 8000dc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dcc:	20000264 	.word	0x20000264

08000dd0 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <CAN_RX0_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_Init+0x28>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_Init+0x28>)
 8000dde:	f043 0310 	orr.w	r3, r3, #16
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f001 f90b 	bl	8002000 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 f808 	bl	8000e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff fd68 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40022000 	.word	0x40022000

08000e00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x54>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x58>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 f923 	bl	800206a <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00e      	b.n	8000e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d80a      	bhi.n	8000e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f001 f8eb 	bl	8002016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_InitTick+0x5c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x20>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x24>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_IncTick+0x24>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000260 	.word	0x20000260

08000e88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_GetTick+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000260 	.word	0x20000260

08000ea0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b09a      	sub	sp, #104	; 0x68
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d101      	bne.n	8000efc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e172      	b.n	80011e2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d176      	bne.n	8000ffc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d152      	bne.n	8000fbc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff fa17 	bl	8000364 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d13b      	bne.n	8000fbc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 ff2b 	bl	8001da0 <ADC_Disable>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	f003 0310 	and.w	r3, r3, #16
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d12f      	bne.n	8000fbc <HAL_ADC_Init+0xe0>
 8000f5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d12b      	bne.n	8000fbc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f6c:	f023 0302 	bic.w	r3, r3, #2
 8000f70:	f043 0202 	orr.w	r2, r3, #2
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f86:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f96:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f98:	4b94      	ldr	r3, [pc, #592]	; (80011ec <HAL_ADC_Init+0x310>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a94      	ldr	r2, [pc, #592]	; (80011f0 <HAL_ADC_Init+0x314>)
 8000f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa2:	0c9a      	lsrs	r2, r3, #18
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fae:	e002      	b.n	8000fb6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1f9      	bne.n	8000fb0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d007      	beq.n	8000fda <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fd8:	d110      	bne.n	8000ffc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f023 0312 	bic.w	r3, r3, #18
 8000fe2:	f043 0210 	orr.w	r2, r3, #16
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	f043 0201 	orr.w	r2, r3, #1
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	f003 0310 	and.w	r3, r3, #16
 8001004:	2b00      	cmp	r3, #0
 8001006:	f040 80df 	bne.w	80011c8 <HAL_ADC_Init+0x2ec>
 800100a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800100e:	2b00      	cmp	r3, #0
 8001010:	f040 80da 	bne.w	80011c8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800101e:	2b00      	cmp	r3, #0
 8001020:	f040 80d2 	bne.w	80011c8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800102c:	f043 0202 	orr.w	r2, r3, #2
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001034:	4b6f      	ldr	r3, [pc, #444]	; (80011f4 <HAL_ADC_Init+0x318>)
 8001036:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001040:	d102      	bne.n	8001048 <HAL_ADC_Init+0x16c>
 8001042:	4b6d      	ldr	r3, [pc, #436]	; (80011f8 <HAL_ADC_Init+0x31c>)
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	e002      	b.n	800104e <HAL_ADC_Init+0x172>
 8001048:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800104c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b01      	cmp	r3, #1
 800105a:	d108      	bne.n	800106e <HAL_ADC_Init+0x192>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b01      	cmp	r3, #1
 8001068:	d101      	bne.n	800106e <HAL_ADC_Init+0x192>
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <HAL_ADC_Init+0x194>
 800106e:	2300      	movs	r3, #0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d11c      	bne.n	80010ae <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001074:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001076:	2b00      	cmp	r3, #0
 8001078:	d010      	beq.n	800109c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b01      	cmp	r3, #1
 8001084:	d107      	bne.n	8001096 <HAL_ADC_Init+0x1ba>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b01      	cmp	r3, #1
 8001090:	d101      	bne.n	8001096 <HAL_ADC_Init+0x1ba>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_ADC_Init+0x1bc>
 8001096:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001098:	2b00      	cmp	r3, #0
 800109a:	d108      	bne.n	80010ae <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800109c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ac:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7e5b      	ldrb	r3, [r3, #25]
 80010b2:	035b      	lsls	r3, r3, #13
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80010b8:	2a01      	cmp	r2, #1
 80010ba:	d002      	beq.n	80010c2 <HAL_ADC_Init+0x1e6>
 80010bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010c0:	e000      	b.n	80010c4 <HAL_ADC_Init+0x1e8>
 80010c2:	2200      	movs	r2, #0
 80010c4:	431a      	orrs	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	431a      	orrs	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010d4:	4313      	orrs	r3, r2
 80010d6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d11b      	bne.n	800111a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7e5b      	ldrb	r3, [r3, #25]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d109      	bne.n	80010fe <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	3b01      	subs	r3, #1
 80010f0:	045a      	lsls	r2, r3, #17
 80010f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010f4:	4313      	orrs	r3, r2
 80010f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fa:	663b      	str	r3, [r7, #96]	; 0x60
 80010fc:	e00d      	b.n	800111a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001106:	f043 0220 	orr.w	r2, r3, #32
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f043 0201 	orr.w	r2, r3, #1
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111e:	2b01      	cmp	r3, #1
 8001120:	d007      	beq.n	8001132 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112a:	4313      	orrs	r3, r2
 800112c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800112e:	4313      	orrs	r3, r2
 8001130:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 030c 	and.w	r3, r3, #12
 800113c:	2b00      	cmp	r3, #0
 800113e:	d114      	bne.n	800116a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	6812      	ldr	r2, [r2, #0]
 800114a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800114e:	f023 0302 	bic.w	r3, r3, #2
 8001152:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7e1b      	ldrb	r3, [r3, #24]
 8001158:	039a      	lsls	r2, r3, #14
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4313      	orrs	r3, r2
 8001164:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001166:	4313      	orrs	r3, r2
 8001168:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <HAL_ADC_Init+0x320>)
 8001172:	4013      	ands	r3, r2
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800117a:	430b      	orrs	r3, r1
 800117c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d10c      	bne.n	80011a0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	f023 010f 	bic.w	r1, r3, #15
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	1e5a      	subs	r2, r3, #1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	631a      	str	r2, [r3, #48]	; 0x30
 800119e:	e007      	b.n	80011b0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 020f 	bic.w	r2, r2, #15
 80011ae:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f023 0303 	bic.w	r3, r3, #3
 80011be:	f043 0201 	orr.w	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40
 80011c6:	e00a      	b.n	80011de <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f023 0312 	bic.w	r3, r3, #18
 80011d0:	f043 0210 	orr.w	r2, r3, #16
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80011d8:	2301      	movs	r3, #1
 80011da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80011de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3768      	adds	r7, #104	; 0x68
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000000 	.word	0x20000000
 80011f0:	431bde83 	.word	0x431bde83
 80011f4:	50000300 	.word	0x50000300
 80011f8:	50000100 	.word	0x50000100
 80011fc:	fff0c007 	.word	0xfff0c007

08001200 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	2b04      	cmp	r3, #4
 8001220:	d106      	bne.n	8001230 <HAL_ADC_IRQHandler+0x30>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b04      	cmp	r3, #4
 800122e:	d00d      	beq.n	800124c <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800123a:	2b08      	cmp	r3, #8
 800123c:	d17a      	bne.n	8001334 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	2b08      	cmp	r3, #8
 800124a:	d173      	bne.n	8001334 <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f003 0310 	and.w	r3, r3, #16
 8001254:	2b00      	cmp	r3, #0
 8001256:	d105      	bne.n	8001264 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001264:	4b88      	ldr	r3, [pc, #544]	; (8001488 <HAL_ADC_IRQHandler+0x288>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	2b00      	cmp	r3, #0
 800126e:	d010      	beq.n	8001292 <HAL_ADC_IRQHandler+0x92>
 8001270:	4b85      	ldr	r3, [pc, #532]	; (8001488 <HAL_ADC_IRQHandler+0x288>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 031f 	and.w	r3, r3, #31
 8001278:	2b05      	cmp	r3, #5
 800127a:	d00a      	beq.n	8001292 <HAL_ADC_IRQHandler+0x92>
 800127c:	4b82      	ldr	r3, [pc, #520]	; (8001488 <HAL_ADC_IRQHandler+0x288>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 031f 	and.w	r3, r3, #31
 8001284:	2b09      	cmp	r3, #9
 8001286:	d004      	beq.n	8001292 <HAL_ADC_IRQHandler+0x92>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001290:	d104      	bne.n	800129c <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	e003      	b.n	80012a4 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800129c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d139      	bne.n	8001326 <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d134      	bne.n	8001326 <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d12d      	bne.n	8001326 <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d11a      	bne.n	800130e <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 020c 	bic.w	r2, r2, #12
 80012e6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d112      	bne.n	8001326 <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f043 0201 	orr.w	r2, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	641a      	str	r2, [r3, #64]	; 0x40
 800130c:	e00b      	b.n	8001326 <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f043 0210 	orr.w	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f043 0201 	orr.w	r2, r3, #1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fdba 	bl	8000ea0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	220c      	movs	r2, #12
 8001332:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0320 	and.w	r3, r3, #32
 800133e:	2b20      	cmp	r3, #32
 8001340:	d106      	bne.n	8001350 <HAL_ADC_IRQHandler+0x150>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0320 	and.w	r3, r3, #32
 800134c:	2b20      	cmp	r3, #32
 800134e:	d00f      	beq.n	8001370 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800135a:	2b40      	cmp	r3, #64	; 0x40
 800135c:	f040 80a9 	bne.w	80014b2 <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800136a:	2b40      	cmp	r3, #64	; 0x40
 800136c:	f040 80a1 	bne.w	80014b2 <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800137c:	4b42      	ldr	r3, [pc, #264]	; (8001488 <HAL_ADC_IRQHandler+0x288>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 031f 	and.w	r3, r3, #31
 8001384:	2b00      	cmp	r3, #0
 8001386:	d010      	beq.n	80013aa <HAL_ADC_IRQHandler+0x1aa>
 8001388:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <HAL_ADC_IRQHandler+0x288>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 031f 	and.w	r3, r3, #31
 8001390:	2b05      	cmp	r3, #5
 8001392:	d00a      	beq.n	80013aa <HAL_ADC_IRQHandler+0x1aa>
 8001394:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <HAL_ADC_IRQHandler+0x288>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 031f 	and.w	r3, r3, #31
 800139c:	2b09      	cmp	r3, #9
 800139e:	d004      	beq.n	80013aa <HAL_ADC_IRQHandler+0x1aa>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013a8:	d104      	bne.n	80013b4 <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	e003      	b.n	80013bc <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80013b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d16c      	bne.n	80014a4 <HAL_ADC_IRQHandler+0x2a4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00b      	beq.n	80013ec <HAL_ADC_IRQHandler+0x1ec>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d160      	bne.n	80014a4 <HAL_ADC_IRQHandler+0x2a4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d15b      	bne.n	80014a4 <HAL_ADC_IRQHandler+0x2a4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f6:	2b40      	cmp	r3, #64	; 0x40
 80013f8:	d154      	bne.n	80014a4 <HAL_ADC_IRQHandler+0x2a4>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <HAL_ADC_IRQHandler+0x288>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 031f 	and.w	r3, r3, #31
 8001402:	2b00      	cmp	r3, #0
 8001404:	d010      	beq.n	8001428 <HAL_ADC_IRQHandler+0x228>
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <HAL_ADC_IRQHandler+0x288>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 031f 	and.w	r3, r3, #31
 800140e:	2b06      	cmp	r3, #6
 8001410:	d00a      	beq.n	8001428 <HAL_ADC_IRQHandler+0x228>
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <HAL_ADC_IRQHandler+0x288>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	2b07      	cmp	r3, #7
 800141c:	d004      	beq.n	8001428 <HAL_ADC_IRQHandler+0x228>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001426:	d104      	bne.n	8001432 <HAL_ADC_IRQHandler+0x232>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	e003      	b.n	800143a <HAL_ADC_IRQHandler+0x23a>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001432:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d12f      	bne.n	80014a4 <HAL_ADC_IRQHandler+0x2a4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d11c      	bne.n	800148c <HAL_ADC_IRQHandler+0x28c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001460:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d114      	bne.n	80014a4 <HAL_ADC_IRQHandler+0x2a4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f043 0201 	orr.w	r2, r3, #1
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
 8001486:	e00d      	b.n	80014a4 <HAL_ADC_IRQHandler+0x2a4>
 8001488:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	f043 0210 	orr.w	r2, r3, #16
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149c:	f043 0201 	orr.w	r2, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f8cb 	bl	8001640 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2260      	movs	r2, #96	; 0x60
 80014b0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014bc:	2b80      	cmp	r3, #128	; 0x80
 80014be:	d113      	bne.n	80014e8 <HAL_ADC_IRQHandler+0x2e8>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	2b80      	cmp	r3, #128	; 0x80
 80014cc:	d10c      	bne.n	80014e8 <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fcea 	bl	8000eb4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014f6:	d115      	bne.n	8001524 <HAL_ADC_IRQHandler+0x324>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001506:	d10d      	bne.n	8001524 <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f8a7 	bl	8001668 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001522:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800152e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001532:	d115      	bne.n	8001560 <HAL_ADC_IRQHandler+0x360>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800153e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001542:	d10d      	bne.n	8001560 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f893 	bl	800167c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800155e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b10      	cmp	r3, #16
 800156c:	d13d      	bne.n	80015ea <HAL_ADC_IRQHandler+0x3ea>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0310 	and.w	r3, r3, #16
 8001578:	2b10      	cmp	r3, #16
 800157a:	d136      	bne.n	80015ea <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001580:	2b01      	cmp	r3, #1
 8001582:	d102      	bne.n	800158a <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 8001584:	2301      	movs	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e019      	b.n	80015be <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800158a:	4b2c      	ldr	r3, [pc, #176]	; (800163c <HAL_ADC_IRQHandler+0x43c>)
 800158c:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d10a      	bne.n	80015be <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80015a8:	2301      	movs	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e007      	b.n	80015be <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80015ba:	2301      	movs	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d10e      	bne.n	80015e2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d4:	f043 0202 	orr.w	r2, r3, #2
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fc73 	bl	8000ec8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2210      	movs	r2, #16
 80015e8:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f8:	d11b      	bne.n	8001632 <HAL_ADC_IRQHandler+0x432>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001608:	d113      	bne.n	8001632 <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f043 0208 	orr.w	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800162a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f811 	bl	8001654 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	50000300 	.word	0x50000300

08001640 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001690:	b480      	push	{r7}
 8001692:	b09b      	sub	sp, #108	; 0x6c
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x22>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e2a5      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x56e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f040 8289 	bne.w	8001bdc <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d81c      	bhi.n	800170c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	461a      	mov	r2, r3
 80016e6:	231f      	movs	r3, #31
 80016e8:	4093      	lsls	r3, r2
 80016ea:	43db      	mvns	r3, r3
 80016ec:	4019      	ands	r1, r3
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	631a      	str	r2, [r3, #48]	; 0x30
 800170a:	e063      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b09      	cmp	r3, #9
 8001712:	d81e      	bhi.n	8001752 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	3b1e      	subs	r3, #30
 8001728:	221f      	movs	r2, #31
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	4019      	ands	r1, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	3b1e      	subs	r3, #30
 8001744:	fa00 f203 	lsl.w	r2, r0, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	635a      	str	r2, [r3, #52]	; 0x34
 8001750:	e040      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b0e      	cmp	r3, #14
 8001758:	d81e      	bhi.n	8001798 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	3b3c      	subs	r3, #60	; 0x3c
 800176e:	221f      	movs	r2, #31
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	4019      	ands	r1, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	3b3c      	subs	r3, #60	; 0x3c
 800178a:	fa00 f203 	lsl.w	r2, r0, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	639a      	str	r2, [r3, #56]	; 0x38
 8001796:	e01d      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	3b5a      	subs	r3, #90	; 0x5a
 80017ac:	221f      	movs	r2, #31
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	4019      	ands	r1, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4413      	add	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	3b5a      	subs	r3, #90	; 0x5a
 80017c8:	fa00 f203 	lsl.w	r2, r0, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 80e5 	bne.w	80019ae <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b09      	cmp	r3, #9
 80017ea:	d91c      	bls.n	8001826 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6999      	ldr	r1, [r3, #24]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	3b1e      	subs	r3, #30
 80017fe:	2207      	movs	r2, #7
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	4019      	ands	r1, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6898      	ldr	r0, [r3, #8]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	3b1e      	subs	r3, #30
 8001818:	fa00 f203 	lsl.w	r2, r0, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	619a      	str	r2, [r3, #24]
 8001824:	e019      	b.n	800185a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6959      	ldr	r1, [r3, #20]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	2207      	movs	r2, #7
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	4019      	ands	r1, r3
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6898      	ldr	r0, [r3, #8]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	fa00 f203 	lsl.w	r2, r0, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	08db      	lsrs	r3, r3, #3
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	3b01      	subs	r3, #1
 8001878:	2b03      	cmp	r3, #3
 800187a:	d84f      	bhi.n	800191c <HAL_ADC_ConfigChannel+0x28c>
 800187c:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <HAL_ADC_ConfigChannel+0x1f4>)
 800187e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001882:	bf00      	nop
 8001884:	08001895 	.word	0x08001895
 8001888:	080018b7 	.word	0x080018b7
 800188c:	080018d9 	.word	0x080018d9
 8001890:	080018fb 	.word	0x080018fb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800189a:	4b9e      	ldr	r3, [pc, #632]	; (8001b14 <HAL_ADC_ConfigChannel+0x484>)
 800189c:	4013      	ands	r3, r2
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	0691      	lsls	r1, r2, #26
 80018a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018a6:	430a      	orrs	r2, r1
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018b2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018b4:	e07e      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018bc:	4b95      	ldr	r3, [pc, #596]	; (8001b14 <HAL_ADC_ConfigChannel+0x484>)
 80018be:	4013      	ands	r3, r2
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	0691      	lsls	r1, r2, #26
 80018c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018c8:	430a      	orrs	r2, r1
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018d4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018d6:	e06d      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018de:	4b8d      	ldr	r3, [pc, #564]	; (8001b14 <HAL_ADC_ConfigChannel+0x484>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	0691      	lsls	r1, r2, #26
 80018e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018ea:	430a      	orrs	r2, r1
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018f6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018f8:	e05c      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001900:	4b84      	ldr	r3, [pc, #528]	; (8001b14 <HAL_ADC_ConfigChannel+0x484>)
 8001902:	4013      	ands	r3, r2
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	0691      	lsls	r1, r2, #26
 800190a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800190c:	430a      	orrs	r2, r1
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001918:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800191a:	e04b      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001922:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	069b      	lsls	r3, r3, #26
 800192c:	429a      	cmp	r2, r3
 800192e:	d107      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800193e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001946:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	069b      	lsls	r3, r3, #26
 8001950:	429a      	cmp	r2, r3
 8001952:	d107      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001962:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800196a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	069b      	lsls	r3, r3, #26
 8001974:	429a      	cmp	r2, r3
 8001976:	d107      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001986:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800198e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	069b      	lsls	r3, r3, #26
 8001998:	429a      	cmp	r2, r3
 800199a:	d10a      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019aa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80019ac:	e001      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80019ae:	bf00      	nop
 80019b0:	e000      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80019b2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d108      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x344>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x344>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x346>
 80019d4:	2300      	movs	r3, #0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 810b 	bne.w	8001bf2 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d00f      	beq.n	8001a04 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2201      	movs	r2, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	400a      	ands	r2, r1
 80019fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a02:	e049      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	409a      	lsls	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b09      	cmp	r3, #9
 8001a24:	d91c      	bls.n	8001a60 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6999      	ldr	r1, [r3, #24]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	3b1b      	subs	r3, #27
 8001a38:	2207      	movs	r2, #7
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	4019      	ands	r1, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6898      	ldr	r0, [r3, #8]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	3b1b      	subs	r3, #27
 8001a52:	fa00 f203 	lsl.w	r2, r0, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	619a      	str	r2, [r3, #24]
 8001a5e:	e01b      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6959      	ldr	r1, [r3, #20]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	2207      	movs	r2, #7
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	4019      	ands	r1, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	6898      	ldr	r0, [r3, #8]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	4613      	mov	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a98:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <HAL_ADC_ConfigChannel+0x488>)
 8001a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b10      	cmp	r3, #16
 8001aa2:	d105      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d015      	beq.n	8001adc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ab4:	2b11      	cmp	r3, #17
 8001ab6:	d105      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00b      	beq.n	8001adc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ac8:	2b12      	cmp	r3, #18
 8001aca:	f040 8092 	bne.w	8001bf2 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f040 808b 	bne.w	8001bf2 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ae4:	d102      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x45c>
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_ADC_ConfigChannel+0x48c>)
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	e002      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x462>
 8001aec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001af0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d10f      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x490>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d108      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x490>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e007      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x492>
 8001b12:	bf00      	nop
 8001b14:	83fff000 	.word	0x83fff000
 8001b18:	50000300 	.word	0x50000300
 8001b1c:	50000100 	.word	0x50000100
 8001b20:	2300      	movs	r3, #0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d150      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b26:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d010      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d107      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x4b8>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x4b8>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x4ba>
 8001b48:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d13c      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b10      	cmp	r3, #16
 8001b54:	d11d      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x502>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b5e:	d118      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b6a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b6c:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <HAL_ADC_ConfigChannel+0x57c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a27      	ldr	r2, [pc, #156]	; (8001c10 <HAL_ADC_ConfigChannel+0x580>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	0c9a      	lsrs	r2, r3, #18
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b82:	e002      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f9      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b90:	e02e      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b11      	cmp	r3, #17
 8001b98:	d10b      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x522>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ba2:	d106      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bae:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bb0:	e01e      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b12      	cmp	r3, #18
 8001bb8:	d11a      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bc6:	e013      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	f043 0220 	orr.w	r2, r3, #32
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001bda:	e00a      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f043 0220 	orr.w	r2, r3, #32
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001bee:	e000      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bf0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001bfa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	376c      	adds	r7, #108	; 0x6c
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	431bde83 	.word	0x431bde83

08001c14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b099      	sub	sp, #100	; 0x64
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c2c:	d102      	bne.n	8001c34 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001c2e:	4b5a      	ldr	r3, [pc, #360]	; (8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	e002      	b.n	8001c3a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001c34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c38:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0a2      	b.n	8001d8a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e09b      	b.n	8001d8a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d17f      	bne.n	8001d68 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d179      	bne.n	8001d68 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c74:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001c76:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d040      	beq.n	8001d02 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c92:	035b      	lsls	r3, r3, #13
 8001c94:	430b      	orrs	r3, r1
 8001c96:	431a      	orrs	r2, r3
 8001c98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c9a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d108      	bne.n	8001cbc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d15c      	bne.n	8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d107      	bne.n	8001cde <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001cde:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d14b      	bne.n	8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ce4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001cec:	f023 030f 	bic.w	r3, r3, #15
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	6811      	ldr	r1, [r2, #0]
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	6892      	ldr	r2, [r2, #8]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cfe:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d00:	e03c      	b.n	8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d0c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d108      	bne.n	8001d2e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d123      	bne.n	8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d107      	bne.n	8001d50 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001d50:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d112      	bne.n	8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d5e:	f023 030f 	bic.w	r3, r3, #15
 8001d62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d64:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d66:	e009      	b.n	8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f043 0220 	orr.w	r2, r3, #32
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001d7a:	e000      	b.n	8001d7e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d7c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3764      	adds	r7, #100	; 0x64
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	50000100 	.word	0x50000100
 8001d9c:	50000300 	.word	0x50000300

08001da0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d108      	bne.n	8001dcc <ADC_Disable+0x2c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <ADC_Disable+0x2c>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <ADC_Disable+0x2e>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d040      	beq.n	8001e54 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 030d 	and.w	r3, r3, #13
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d10f      	bne.n	8001e00 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0202 	orr.w	r2, r2, #2
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2203      	movs	r2, #3
 8001df6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001df8:	f7ff f846 	bl	8000e88 <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001dfe:	e022      	b.n	8001e46 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	f043 0210 	orr.w	r2, r3, #16
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e01c      	b.n	8001e56 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e1c:	f7ff f834 	bl	8000e88 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d90d      	bls.n	8001e46 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f043 0210 	orr.w	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e007      	b.n	8001e56 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d0e3      	beq.n	8001e1c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e92:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	60d3      	str	r3, [r2, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	f003 0307 	and.w	r3, r3, #7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db0b      	blt.n	8001eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 021f 	and.w	r2, r3, #31
 8001edc:	4907      	ldr	r1, [pc, #28]	; (8001efc <__NVIC_EnableIRQ+0x38>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000e100 	.word	0xe000e100

08001f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	6039      	str	r1, [r7, #0]
 8001f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	db0a      	blt.n	8001f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	490c      	ldr	r1, [pc, #48]	; (8001f4c <__NVIC_SetPriority+0x4c>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	440b      	add	r3, r1
 8001f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f28:	e00a      	b.n	8001f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4908      	ldr	r1, [pc, #32]	; (8001f50 <__NVIC_SetPriority+0x50>)
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	3b04      	subs	r3, #4
 8001f38:	0112      	lsls	r2, r2, #4
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	761a      	strb	r2, [r3, #24]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000e100 	.word	0xe000e100
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f1c3 0307 	rsb	r3, r3, #7
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	bf28      	it	cs
 8001f72:	2304      	movcs	r3, #4
 8001f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d902      	bls.n	8001f84 <NVIC_EncodePriority+0x30>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3b03      	subs	r3, #3
 8001f82:	e000      	b.n	8001f86 <NVIC_EncodePriority+0x32>
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	401a      	ands	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	43d9      	mvns	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	4313      	orrs	r3, r2
         );
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fcc:	d301      	bcc.n	8001fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00f      	b.n	8001ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <SysTick_Config+0x40>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fda:	210f      	movs	r1, #15
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f7ff ff8e 	bl	8001f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <SysTick_Config+0x40>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <SysTick_Config+0x40>)
 8001fec:	2207      	movs	r2, #7
 8001fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	e000e010 	.word	0xe000e010

08002000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff29 	bl	8001e60 <__NVIC_SetPriorityGrouping>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002028:	f7ff ff3e 	bl	8001ea8 <__NVIC_GetPriorityGrouping>
 800202c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	6978      	ldr	r0, [r7, #20]
 8002034:	f7ff ff8e 	bl	8001f54 <NVIC_EncodePriority>
 8002038:	4602      	mov	r2, r0
 800203a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff5d 	bl	8001f00 <__NVIC_SetPriority>
}
 8002046:	bf00      	nop
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff31 	bl	8001ec4 <__NVIC_EnableIRQ>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ffa2 	bl	8001fbc <SysTick_Config>
 8002078:	4603      	mov	r3, r0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002094:	2b02      	cmp	r3, #2
 8002096:	d005      	beq.n	80020a4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2204      	movs	r2, #4
 800209c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
 80020a2:	e027      	b.n	80020f4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 020e 	bic.w	r2, r2, #14
 80020b2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020cc:	2101      	movs	r1, #1
 80020ce:	fa01 f202 	lsl.w	r2, r1, r2
 80020d2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	4798      	blx	r3
    } 
  }
  return status;
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002126:	e14e      	b.n	80023c6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2101      	movs	r1, #1
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	fa01 f303 	lsl.w	r3, r1, r3
 8002134:	4013      	ands	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8140 	beq.w	80023c0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d00b      	beq.n	8002160 <HAL_GPIO_Init+0x48>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d007      	beq.n	8002160 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002154:	2b11      	cmp	r3, #17
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b12      	cmp	r3, #18
 800215e:	d130      	bne.n	80021c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002196:	2201      	movs	r2, #1
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4013      	ands	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	f003 0201 	and.w	r2, r3, #1
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2203      	movs	r2, #3
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0xea>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b12      	cmp	r3, #18
 8002200:	d123      	bne.n	800224a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	08da      	lsrs	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3208      	adds	r2, #8
 800220a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800220e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	220f      	movs	r2, #15
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4013      	ands	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	08da      	lsrs	r2, r3, #3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3208      	adds	r2, #8
 8002244:	6939      	ldr	r1, [r7, #16]
 8002246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	2203      	movs	r2, #3
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0203 	and.w	r2, r3, #3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 809a 	beq.w	80023c0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228c:	4b55      	ldr	r3, [pc, #340]	; (80023e4 <HAL_GPIO_Init+0x2cc>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	4a54      	ldr	r2, [pc, #336]	; (80023e4 <HAL_GPIO_Init+0x2cc>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6193      	str	r3, [r2, #24]
 8002298:	4b52      	ldr	r3, [pc, #328]	; (80023e4 <HAL_GPIO_Init+0x2cc>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022a4:	4a50      	ldr	r2, [pc, #320]	; (80023e8 <HAL_GPIO_Init+0x2d0>)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	3302      	adds	r3, #2
 80022ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	220f      	movs	r2, #15
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022ce:	d013      	beq.n	80022f8 <HAL_GPIO_Init+0x1e0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a46      	ldr	r2, [pc, #280]	; (80023ec <HAL_GPIO_Init+0x2d4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d00d      	beq.n	80022f4 <HAL_GPIO_Init+0x1dc>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a45      	ldr	r2, [pc, #276]	; (80023f0 <HAL_GPIO_Init+0x2d8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d007      	beq.n	80022f0 <HAL_GPIO_Init+0x1d8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a44      	ldr	r2, [pc, #272]	; (80023f4 <HAL_GPIO_Init+0x2dc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d101      	bne.n	80022ec <HAL_GPIO_Init+0x1d4>
 80022e8:	2303      	movs	r3, #3
 80022ea:	e006      	b.n	80022fa <HAL_GPIO_Init+0x1e2>
 80022ec:	2305      	movs	r3, #5
 80022ee:	e004      	b.n	80022fa <HAL_GPIO_Init+0x1e2>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e002      	b.n	80022fa <HAL_GPIO_Init+0x1e2>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <HAL_GPIO_Init+0x1e2>
 80022f8:	2300      	movs	r3, #0
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	f002 0203 	and.w	r2, r2, #3
 8002300:	0092      	lsls	r2, r2, #2
 8002302:	4093      	lsls	r3, r2
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800230a:	4937      	ldr	r1, [pc, #220]	; (80023e8 <HAL_GPIO_Init+0x2d0>)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3302      	adds	r3, #2
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002318:	4b37      	ldr	r3, [pc, #220]	; (80023f8 <HAL_GPIO_Init+0x2e0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	43db      	mvns	r3, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800233c:	4a2e      	ldr	r2, [pc, #184]	; (80023f8 <HAL_GPIO_Init+0x2e0>)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002342:	4b2d      	ldr	r3, [pc, #180]	; (80023f8 <HAL_GPIO_Init+0x2e0>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	43db      	mvns	r3, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002366:	4a24      	ldr	r2, [pc, #144]	; (80023f8 <HAL_GPIO_Init+0x2e0>)
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800236c:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <HAL_GPIO_Init+0x2e0>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	43db      	mvns	r3, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002390:	4a19      	ldr	r2, [pc, #100]	; (80023f8 <HAL_GPIO_Init+0x2e0>)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <HAL_GPIO_Init+0x2e0>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	43db      	mvns	r3, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023ba:	4a0f      	ldr	r2, [pc, #60]	; (80023f8 <HAL_GPIO_Init+0x2e0>)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	3301      	adds	r3, #1
 80023c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f47f aea9 	bne.w	8002128 <HAL_GPIO_Init+0x10>
  }
}
 80023d6:	bf00      	nop
 80023d8:	371c      	adds	r7, #28
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40010000 	.word	0x40010000
 80023ec:	48000400 	.word	0x48000400
 80023f0:	48000800 	.word	0x48000800
 80023f4:	48000c00 	.word	0x48000c00
 80023f8:	40010400 	.word	0x40010400

080023fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
 8002408:	4613      	mov	r3, r2
 800240a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800240c:	787b      	ldrb	r3, [r7, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002418:	e002      	b.n	8002420 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800241a:	887a      	ldrh	r2, [r7, #2]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e081      	b.n	8002542 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe f8ca 	bl	80005ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2224      	movs	r2, #36	; 0x24
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800247c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800248c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d107      	bne.n	80024a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	e006      	b.n	80024b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d104      	bne.n	80024c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	ea42 0103 	orr.w	r1, r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	021a      	lsls	r2, r3, #8
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69d9      	ldr	r1, [r3, #28]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1a      	ldr	r2, [r3, #32]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	68f9      	ldr	r1, [r7, #12]
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
  }
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b086      	sub	sp, #24
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d010      	beq.n	80025c4 <HAL_I2C_ER_IRQHandler+0x46>
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	09db      	lsrs	r3, r3, #7
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025c2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	0a9b      	lsrs	r3, r3, #10
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d010      	beq.n	80025f2 <HAL_I2C_ER_IRQHandler+0x74>
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	09db      	lsrs	r3, r3, #7
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f043 0208 	orr.w	r2, r3, #8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	0a5b      	lsrs	r3, r3, #9
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d010      	beq.n	8002620 <HAL_I2C_ER_IRQHandler+0xa2>
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	09db      	lsrs	r3, r3, #7
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f043 0202 	orr.w	r2, r3, #2
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800261e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002624:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 030b 	and.w	r3, r3, #11
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002630:	68f9      	ldr	r1, [r7, #12]
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fb8a 	bl	8002d4c <I2C_ITError>
  }
}
 8002638:	bf00      	nop
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
 8002674:	4613      	mov	r3, r2
 8002676:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <I2C_Slave_ISR_IT+0x24>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e0ec      	b.n	80028be <I2C_Slave_ISR_IT+0x1fe>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d009      	beq.n	800270c <I2C_Slave_ISR_IT+0x4c>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002704:	6939      	ldr	r1, [r7, #16]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f9c0 	bl	8002a8c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d04d      	beq.n	80027b4 <I2C_Slave_ISR_IT+0xf4>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d047      	beq.n	80027b4 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d128      	bne.n	8002780 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b28      	cmp	r3, #40	; 0x28
 8002738:	d108      	bne.n	800274c <I2C_Slave_ISR_IT+0x8c>
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002740:	d104      	bne.n	800274c <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002742:	6939      	ldr	r1, [r7, #16]
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 faab 	bl	8002ca0 <I2C_ITListenCplt>
 800274a:	e032      	b.n	80027b2 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b29      	cmp	r3, #41	; 0x29
 8002756:	d10e      	bne.n	8002776 <I2C_Slave_ISR_IT+0xb6>
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800275e:	d00a      	beq.n	8002776 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2210      	movs	r2, #16
 8002766:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fbe6 	bl	8002f3a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f92d 	bl	80029ce <I2C_ITSlaveSeqCplt>
 8002774:	e01d      	b.n	80027b2 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2210      	movs	r2, #16
 800277c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800277e:	e096      	b.n	80028ae <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2210      	movs	r2, #16
 8002786:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	f043 0204 	orr.w	r2, r3, #4
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d004      	beq.n	80027a4 <I2C_Slave_ISR_IT+0xe4>
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a0:	f040 8085 	bne.w	80028ae <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a8:	4619      	mov	r1, r3
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 face 	bl	8002d4c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80027b0:	e07d      	b.n	80028ae <I2C_Slave_ISR_IT+0x1ee>
 80027b2:	e07c      	b.n	80028ae <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d030      	beq.n	8002822 <I2C_Slave_ISR_IT+0x162>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d02a      	beq.n	8002822 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d018      	beq.n	8002808 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d14f      	bne.n	80028b2 <I2C_Slave_ISR_IT+0x1f2>
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002818:	d04b      	beq.n	80028b2 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f8d7 	bl	80029ce <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002820:	e047      	b.n	80028b2 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	08db      	lsrs	r3, r3, #3
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	08db      	lsrs	r3, r3, #3
 8002832:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002836:	2b00      	cmp	r3, #0
 8002838:	d004      	beq.n	8002844 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800283a:	6939      	ldr	r1, [r7, #16]
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f842 	bl	80028c6 <I2C_ITAddrCplt>
 8002842:	e037      	b.n	80028b4 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	085b      	lsrs	r3, r3, #1
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d031      	beq.n	80028b4 <I2C_Slave_ISR_IT+0x1f4>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	085b      	lsrs	r3, r3, #1
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d02b      	beq.n	80028b4 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d018      	beq.n	8002898 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	781a      	ldrb	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	851a      	strh	r2, [r3, #40]	; 0x28
 8002896:	e00d      	b.n	80028b4 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800289e:	d002      	beq.n	80028a6 <I2C_Slave_ISR_IT+0x1e6>
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f891 	bl	80029ce <I2C_ITSlaveSeqCplt>
 80028ac:	e002      	b.n	80028b4 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80028ae:	bf00      	nop
 80028b0:	e000      	b.n	80028b4 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80028b2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028dc:	2b28      	cmp	r3, #40	; 0x28
 80028de:	d16a      	bne.n	80029b6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	0c1b      	lsrs	r3, r3, #16
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	0c1b      	lsrs	r3, r3, #16
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80028fe:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800290c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	b29b      	uxth	r3, r3
 8002916:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800291a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d138      	bne.n	8002996 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002924:	897b      	ldrh	r3, [r7, #10]
 8002926:	09db      	lsrs	r3, r3, #7
 8002928:	b29a      	uxth	r2, r3
 800292a:	89bb      	ldrh	r3, [r7, #12]
 800292c:	4053      	eors	r3, r2
 800292e:	b29b      	uxth	r3, r3
 8002930:	f003 0306 	and.w	r3, r3, #6
 8002934:	2b00      	cmp	r3, #0
 8002936:	d11c      	bne.n	8002972 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002938:	897b      	ldrh	r3, [r7, #10]
 800293a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294a:	2b02      	cmp	r3, #2
 800294c:	d13b      	bne.n	80029c6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2208      	movs	r2, #8
 800295a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002964:	89ba      	ldrh	r2, [r7, #12]
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff fe7c 	bl	8002668 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002970:	e029      	b.n	80029c6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002972:	893b      	ldrh	r3, [r7, #8]
 8002974:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002976:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fb1f 	bl	8002fbe <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002988:	89ba      	ldrh	r2, [r7, #12]
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	4619      	mov	r1, r3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff fe6a 	bl	8002668 <HAL_I2C_AddrCallback>
}
 8002994:	e017      	b.n	80029c6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fb0f 	bl	8002fbe <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029a8:	89ba      	ldrh	r2, [r7, #12]
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	4619      	mov	r1, r3
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff fe5a 	bl	8002668 <HAL_I2C_AddrCallback>
}
 80029b4:	e007      	b.n	80029c6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2208      	movs	r2, #8
 80029bc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	0b9b      	lsrs	r3, r3, #14
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e00d      	b.n	8002a20 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	0bdb      	lsrs	r3, r3, #15
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a1e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b29      	cmp	r3, #41	; 0x29
 8002a2a:	d112      	bne.n	8002a52 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2228      	movs	r2, #40	; 0x28
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2221      	movs	r2, #33	; 0x21
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fabe 	bl	8002fbe <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff fdf8 	bl	8002640 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002a50:	e017      	b.n	8002a82 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8002a5c:	d111      	bne.n	8002a82 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2228      	movs	r2, #40	; 0x28
 8002a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2222      	movs	r2, #34	; 0x22
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 faa5 	bl	8002fbe <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff fde9 	bl	8002654 <HAL_I2C_SlaveRxCpltCallback>
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	2b21      	cmp	r3, #33	; 0x21
 8002ab6:	d002      	beq.n	8002abe <I2C_ITSlaveCplt+0x32>
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	2b29      	cmp	r3, #41	; 0x29
 8002abc:	d108      	bne.n	8002ad0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002abe:	f248 0101 	movw	r1, #32769	; 0x8001
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fa7b 	bl	8002fbe <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2221      	movs	r2, #33	; 0x21
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ace:	e00d      	b.n	8002aec <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	2b22      	cmp	r3, #34	; 0x22
 8002ad4:	d002      	beq.n	8002adc <I2C_ITSlaveCplt+0x50>
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8002ada:	d107      	bne.n	8002aec <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002adc:	f248 0102 	movw	r1, #32770	; 0x8002
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 fa6c 	bl	8002fbe <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2222      	movs	r2, #34	; 0x22
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002afa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6859      	ldr	r1, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4b64      	ldr	r3, [pc, #400]	; (8002c98 <I2C_ITSlaveCplt+0x20c>)
 8002b08:	400b      	ands	r3, r1
 8002b0a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fa14 	bl	8002f3a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	0b9b      	lsrs	r3, r3, #14
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d013      	beq.n	8002b46 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b2c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d020      	beq.n	8002b78 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b44:	e018      	b.n	8002b78 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	0bdb      	lsrs	r3, r3, #15
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d012      	beq.n	8002b78 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b60:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d006      	beq.n	8002b78 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d020      	beq.n	8002bc6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f023 0304 	bic.w	r3, r3, #4
 8002b8a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00c      	beq.n	8002bc6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	f043 0204 	orr.w	r2, r3, #4
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d010      	beq.n	8002c14 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f8a7 	bl	8002d4c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b28      	cmp	r3, #40	; 0x28
 8002c08:	d141      	bne.n	8002c8e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c0a:	6979      	ldr	r1, [r7, #20]
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f847 	bl	8002ca0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c12:	e03c      	b.n	8002c8e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c1c:	d014      	beq.n	8002c48 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff fed5 	bl	80029ce <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a1d      	ldr	r2, [pc, #116]	; (8002c9c <I2C_ITSlaveCplt+0x210>)
 8002c28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff fd1f 	bl	8002684 <HAL_I2C_ListenCpltCallback>
}
 8002c46:	e022      	b.n	8002c8e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b22      	cmp	r3, #34	; 0x22
 8002c52:	d10e      	bne.n	8002c72 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff fcf2 	bl	8002654 <HAL_I2C_SlaveRxCpltCallback>
}
 8002c70:	e00d      	b.n	8002c8e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff fcd9 	bl	8002640 <HAL_I2C_SlaveTxCpltCallback>
}
 8002c8e:	bf00      	nop
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	fe00e800 	.word	0xfe00e800
 8002c9c:	ffff0000 	.word	0xffff0000

08002ca0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a26      	ldr	r2, [pc, #152]	; (8002d48 <I2C_ITListenCplt+0xa8>)
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	089b      	lsrs	r3, r3, #2
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d022      	beq.n	8002d1e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d012      	beq.n	8002d1e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f043 0204 	orr.w	r2, r3, #4
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d1e:	f248 0103 	movw	r1, #32771	; 0x8003
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f94b 	bl	8002fbe <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2210      	movs	r2, #16
 8002d2e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff fca3 	bl	8002684 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	ffff0000 	.word	0xffff0000

08002d4c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a5d      	ldr	r2, [pc, #372]	; (8002ee0 <I2C_ITError+0x194>)
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	2b28      	cmp	r3, #40	; 0x28
 8002d82:	d005      	beq.n	8002d90 <I2C_ITError+0x44>
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2b29      	cmp	r3, #41	; 0x29
 8002d88:	d002      	beq.n	8002d90 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d8e:	d10b      	bne.n	8002da8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d90:	2103      	movs	r1, #3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f913 	bl	8002fbe <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2228      	movs	r2, #40	; 0x28
 8002d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a50      	ldr	r2, [pc, #320]	; (8002ee4 <I2C_ITError+0x198>)
 8002da4:	635a      	str	r2, [r3, #52]	; 0x34
 8002da6:	e011      	b.n	8002dcc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002da8:	f248 0103 	movw	r1, #32771	; 0x8003
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f906 	bl	8002fbe <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b60      	cmp	r3, #96	; 0x60
 8002dbc:	d003      	beq.n	8002dc6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d039      	beq.n	8002e4e <I2C_ITError+0x102>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b11      	cmp	r3, #17
 8002dde:	d002      	beq.n	8002de6 <I2C_ITError+0x9a>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b21      	cmp	r3, #33	; 0x21
 8002de4:	d133      	bne.n	8002e4e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002df4:	d107      	bne.n	8002e06 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e04:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff f977 	bl	80020fe <HAL_DMA_GetState>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d017      	beq.n	8002e46 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	4a33      	ldr	r2, [pc, #204]	; (8002ee8 <I2C_ITError+0x19c>)
 8002e1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff f929 	bl	8002082 <HAL_DMA_Abort_IT>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d04d      	beq.n	8002ed2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e40:	4610      	mov	r0, r2
 8002e42:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e44:	e045      	b.n	8002ed2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f850 	bl	8002eec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e4c:	e041      	b.n	8002ed2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d039      	beq.n	8002eca <I2C_ITError+0x17e>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b12      	cmp	r3, #18
 8002e5a:	d002      	beq.n	8002e62 <I2C_ITError+0x116>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b22      	cmp	r3, #34	; 0x22
 8002e60:	d133      	bne.n	8002eca <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e70:	d107      	bne.n	8002e82 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e80:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff f939 	bl	80020fe <HAL_DMA_GetState>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d017      	beq.n	8002ec2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	4a14      	ldr	r2, [pc, #80]	; (8002ee8 <I2C_ITError+0x19c>)
 8002e98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff f8eb 	bl	8002082 <HAL_DMA_Abort_IT>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d011      	beq.n	8002ed6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ec0:	e009      	b.n	8002ed6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f812 	bl	8002eec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ec8:	e005      	b.n	8002ed6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f80e 	bl	8002eec <I2C_TreatErrorCallback>
  }
}
 8002ed0:	e002      	b.n	8002ed8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ed2:	bf00      	nop
 8002ed4:	e000      	b.n	8002ed8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ed6:	bf00      	nop
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	ffff0000 	.word	0xffff0000
 8002ee4:	080026c1 	.word	0x080026c1
 8002ee8:	08002f83 	.word	0x08002f83

08002eec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b60      	cmp	r3, #96	; 0x60
 8002efe:	d10e      	bne.n	8002f1e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff fbc8 	bl	80026ac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f1c:	e009      	b.n	8002f32 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff fbb3 	bl	8002698 <HAL_I2C_ErrorCallback>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d103      	bne.n	8002f58 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2200      	movs	r2, #0
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d007      	beq.n	8002f76 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	619a      	str	r2, [r3, #24]
  }
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fac:	2200      	movs	r2, #0
 8002fae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f7ff ff9b 	bl	8002eec <I2C_TreatErrorCallback>
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002fce:	887b      	ldrh	r3, [r7, #2]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00f      	beq.n	8002ff8 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002fde:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fec:	2b28      	cmp	r3, #40	; 0x28
 8002fee:	d003      	beq.n	8002ff8 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002ff6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00f      	beq.n	8003022 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003008:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003016:	2b28      	cmp	r3, #40	; 0x28
 8003018:	d003      	beq.n	8003022 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003020:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003022:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003026:	2b00      	cmp	r3, #0
 8003028:	da03      	bge.n	8003032 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003030:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003032:	887b      	ldrh	r3, [r7, #2]
 8003034:	2b10      	cmp	r3, #16
 8003036:	d103      	bne.n	8003040 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800303e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003040:	887b      	ldrh	r3, [r7, #2]
 8003042:	2b20      	cmp	r3, #32
 8003044:	d103      	bne.n	800304e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f043 0320 	orr.w	r3, r3, #32
 800304c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800304e:	887b      	ldrh	r3, [r7, #2]
 8003050:	2b40      	cmp	r3, #64	; 0x40
 8003052:	d103      	bne.n	800305c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800305a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	43da      	mvns	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	400a      	ands	r2, r1
 800306c:	601a      	str	r2, [r3, #0]
}
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b20      	cmp	r3, #32
 800308e:	d138      	bne.n	8003102 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800309a:	2302      	movs	r3, #2
 800309c:	e032      	b.n	8003104 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2224      	movs	r2, #36	; 0x24
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030cc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6819      	ldr	r1, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0201 	orr.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	e000      	b.n	8003104 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003102:	2302      	movs	r3, #2
  }
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b20      	cmp	r3, #32
 8003124:	d139      	bne.n	800319a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003130:	2302      	movs	r3, #2
 8003132:	e033      	b.n	800319c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2224      	movs	r2, #36	; 0x24
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003162:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	e000      	b.n	800319c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800319a:	2302      	movs	r3, #2
  }
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	1d3b      	adds	r3, r7, #4
 80031b2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031b4:	1d3b      	adds	r3, r7, #4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d102      	bne.n	80031c2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	f000 bef4 	b.w	8003faa <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c2:	1d3b      	adds	r3, r7, #4
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 816a 	beq.w	80034a6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031d2:	4bb3      	ldr	r3, [pc, #716]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d00c      	beq.n	80031f8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031de:	4bb0      	ldr	r3, [pc, #704]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d159      	bne.n	800329e <HAL_RCC_OscConfig+0xf6>
 80031ea:	4bad      	ldr	r3, [pc, #692]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f6:	d152      	bne.n	800329e <HAL_RCC_OscConfig+0xf6>
 80031f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800320c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d102      	bne.n	800322a <HAL_RCC_OscConfig+0x82>
 8003224:	4b9e      	ldr	r3, [pc, #632]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	e015      	b.n	8003256 <HAL_RCC_OscConfig+0xae>
 800322a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800322e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003236:	fa93 f3a3 	rbit	r3, r3
 800323a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800323e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003242:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003246:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003252:	4b93      	ldr	r3, [pc, #588]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800325a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800325e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003262:	fa92 f2a2 	rbit	r2, r2
 8003266:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800326a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800326e:	fab2 f282 	clz	r2, r2
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	f042 0220 	orr.w	r2, r2, #32
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	f002 021f 	and.w	r2, r2, #31
 800327e:	2101      	movs	r1, #1
 8003280:	fa01 f202 	lsl.w	r2, r1, r2
 8003284:	4013      	ands	r3, r2
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 810c 	beq.w	80034a4 <HAL_RCC_OscConfig+0x2fc>
 800328c:	1d3b      	adds	r3, r7, #4
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f040 8106 	bne.w	80034a4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	f000 be86 	b.w	8003faa <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800329e:	1d3b      	adds	r3, r7, #4
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a8:	d106      	bne.n	80032b8 <HAL_RCC_OscConfig+0x110>
 80032aa:	4b7d      	ldr	r3, [pc, #500]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a7c      	ldr	r2, [pc, #496]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 80032b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e030      	b.n	800331a <HAL_RCC_OscConfig+0x172>
 80032b8:	1d3b      	adds	r3, r7, #4
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10c      	bne.n	80032dc <HAL_RCC_OscConfig+0x134>
 80032c2:	4b77      	ldr	r3, [pc, #476]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a76      	ldr	r2, [pc, #472]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 80032c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4b74      	ldr	r3, [pc, #464]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a73      	ldr	r2, [pc, #460]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 80032d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e01e      	b.n	800331a <HAL_RCC_OscConfig+0x172>
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032e6:	d10c      	bne.n	8003302 <HAL_RCC_OscConfig+0x15a>
 80032e8:	4b6d      	ldr	r3, [pc, #436]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a6c      	ldr	r2, [pc, #432]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 80032ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	4b6a      	ldr	r3, [pc, #424]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a69      	ldr	r2, [pc, #420]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 80032fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	e00b      	b.n	800331a <HAL_RCC_OscConfig+0x172>
 8003302:	4b67      	ldr	r3, [pc, #412]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a66      	ldr	r2, [pc, #408]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 8003308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b64      	ldr	r3, [pc, #400]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a63      	ldr	r2, [pc, #396]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 8003314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003318:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800331a:	4b61      	ldr	r3, [pc, #388]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	f023 020f 	bic.w	r2, r3, #15
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	495d      	ldr	r1, [pc, #372]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 800332a:	4313      	orrs	r3, r2
 800332c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d059      	beq.n	80033ec <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fd fda6 	bl	8000e88 <HAL_GetTick>
 800333c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003342:	f7fd fda1 	bl	8000e88 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d902      	bls.n	8003358 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	f000 be29 	b.w	8003faa <HAL_RCC_OscConfig+0xe02>
 8003358:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800335c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800336c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	b2db      	uxtb	r3, r3
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b01      	cmp	r3, #1
 8003382:	d102      	bne.n	800338a <HAL_RCC_OscConfig+0x1e2>
 8003384:	4b46      	ldr	r3, [pc, #280]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	e015      	b.n	80033b6 <HAL_RCC_OscConfig+0x20e>
 800338a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800338e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800339e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033a2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80033a6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80033aa:	fa93 f3a3 	rbit	r3, r3
 80033ae:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80033b2:	4b3b      	ldr	r3, [pc, #236]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033ba:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80033be:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80033c2:	fa92 f2a2 	rbit	r2, r2
 80033c6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80033ca:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80033ce:	fab2 f282 	clz	r2, r2
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	f042 0220 	orr.w	r2, r2, #32
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	f002 021f 	and.w	r2, r2, #31
 80033de:	2101      	movs	r1, #1
 80033e0:	fa01 f202 	lsl.w	r2, r1, r2
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0ab      	beq.n	8003342 <HAL_RCC_OscConfig+0x19a>
 80033ea:	e05c      	b.n	80034a6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fd fd4c 	bl	8000e88 <HAL_GetTick>
 80033f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f4:	e00a      	b.n	800340c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f6:	f7fd fd47 	bl	8000e88 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b64      	cmp	r3, #100	; 0x64
 8003404:	d902      	bls.n	800340c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	f000 bdcf 	b.w	8003faa <HAL_RCC_OscConfig+0xe02>
 800340c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003410:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003418:	fa93 f3a3 	rbit	r3, r3
 800341c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003420:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003424:	fab3 f383 	clz	r3, r3
 8003428:	b2db      	uxtb	r3, r3
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b01      	cmp	r3, #1
 8003436:	d102      	bne.n	800343e <HAL_RCC_OscConfig+0x296>
 8003438:	4b19      	ldr	r3, [pc, #100]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	e015      	b.n	800346a <HAL_RCC_OscConfig+0x2c2>
 800343e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003442:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800344a:	fa93 f3a3 	rbit	r3, r3
 800344e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003456:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800345a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003466:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <HAL_RCC_OscConfig+0x2f8>)
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800346e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003472:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003476:	fa92 f2a2 	rbit	r2, r2
 800347a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800347e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003482:	fab2 f282 	clz	r2, r2
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	f042 0220 	orr.w	r2, r2, #32
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	f002 021f 	and.w	r2, r2, #31
 8003492:	2101      	movs	r1, #1
 8003494:	fa01 f202 	lsl.w	r2, r1, r2
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1ab      	bne.n	80033f6 <HAL_RCC_OscConfig+0x24e>
 800349e:	e002      	b.n	80034a6 <HAL_RCC_OscConfig+0x2fe>
 80034a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034a6:	1d3b      	adds	r3, r7, #4
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 816f 	beq.w	8003794 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80034b6:	4bd0      	ldr	r3, [pc, #832]	; (80037f8 <HAL_RCC_OscConfig+0x650>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034c2:	4bcd      	ldr	r3, [pc, #820]	; (80037f8 <HAL_RCC_OscConfig+0x650>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d16c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x400>
 80034ce:	4bca      	ldr	r3, [pc, #808]	; (80037f8 <HAL_RCC_OscConfig+0x650>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d166      	bne.n	80035a8 <HAL_RCC_OscConfig+0x400>
 80034da:	2302      	movs	r3, #2
 80034dc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80034e4:	fa93 f3a3 	rbit	r3, r3
 80034e8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80034ec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f0:	fab3 f383 	clz	r3, r3
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d102      	bne.n	800350a <HAL_RCC_OscConfig+0x362>
 8003504:	4bbc      	ldr	r3, [pc, #752]	; (80037f8 <HAL_RCC_OscConfig+0x650>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	e013      	b.n	8003532 <HAL_RCC_OscConfig+0x38a>
 800350a:	2302      	movs	r3, #2
 800350c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800351c:	2302      	movs	r3, #2
 800351e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003522:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800352e:	4bb2      	ldr	r3, [pc, #712]	; (80037f8 <HAL_RCC_OscConfig+0x650>)
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	2202      	movs	r2, #2
 8003534:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003538:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800353c:	fa92 f2a2 	rbit	r2, r2
 8003540:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003544:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003548:	fab2 f282 	clz	r2, r2
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	f042 0220 	orr.w	r2, r2, #32
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	f002 021f 	and.w	r2, r2, #31
 8003558:	2101      	movs	r1, #1
 800355a:	fa01 f202 	lsl.w	r2, r1, r2
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d007      	beq.n	8003574 <HAL_RCC_OscConfig+0x3cc>
 8003564:	1d3b      	adds	r3, r7, #4
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d002      	beq.n	8003574 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	f000 bd1b 	b.w	8003faa <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003574:	4ba0      	ldr	r3, [pc, #640]	; (80037f8 <HAL_RCC_OscConfig+0x650>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800357c:	1d3b      	adds	r3, r7, #4
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	21f8      	movs	r1, #248	; 0xf8
 8003584:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800358c:	fa91 f1a1 	rbit	r1, r1
 8003590:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003594:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003598:	fab1 f181 	clz	r1, r1
 800359c:	b2c9      	uxtb	r1, r1
 800359e:	408b      	lsls	r3, r1
 80035a0:	4995      	ldr	r1, [pc, #596]	; (80037f8 <HAL_RCC_OscConfig+0x650>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a6:	e0f5      	b.n	8003794 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035a8:	1d3b      	adds	r3, r7, #4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 8085 	beq.w	80036be <HAL_RCC_OscConfig+0x516>
 80035b4:	2301      	movs	r3, #1
 80035b6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80035c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	461a      	mov	r2, r3
 80035dc:	2301      	movs	r3, #1
 80035de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fd fc52 	bl	8000e88 <HAL_GetTick>
 80035e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e8:	e00a      	b.n	8003600 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ea:	f7fd fc4d 	bl	8000e88 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d902      	bls.n	8003600 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	f000 bcd5 	b.w	8003faa <HAL_RCC_OscConfig+0xe02>
 8003600:	2302      	movs	r3, #2
 8003602:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003606:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800360a:	fa93 f3a3 	rbit	r3, r3
 800360e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003612:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003616:	fab3 f383 	clz	r3, r3
 800361a:	b2db      	uxtb	r3, r3
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	b2db      	uxtb	r3, r3
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b01      	cmp	r3, #1
 8003628:	d102      	bne.n	8003630 <HAL_RCC_OscConfig+0x488>
 800362a:	4b73      	ldr	r3, [pc, #460]	; (80037f8 <HAL_RCC_OscConfig+0x650>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	e013      	b.n	8003658 <HAL_RCC_OscConfig+0x4b0>
 8003630:	2302      	movs	r3, #2
 8003632:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003642:	2302      	movs	r3, #2
 8003644:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003648:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003654:	4b68      	ldr	r3, [pc, #416]	; (80037f8 <HAL_RCC_OscConfig+0x650>)
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	2202      	movs	r2, #2
 800365a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800365e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003662:	fa92 f2a2 	rbit	r2, r2
 8003666:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800366a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800366e:	fab2 f282 	clz	r2, r2
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	f042 0220 	orr.w	r2, r2, #32
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	f002 021f 	and.w	r2, r2, #31
 800367e:	2101      	movs	r1, #1
 8003680:	fa01 f202 	lsl.w	r2, r1, r2
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0af      	beq.n	80035ea <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368a:	4b5b      	ldr	r3, [pc, #364]	; (80037f8 <HAL_RCC_OscConfig+0x650>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003692:	1d3b      	adds	r3, r7, #4
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	21f8      	movs	r1, #248	; 0xf8
 800369a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80036a2:	fa91 f1a1 	rbit	r1, r1
 80036a6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80036aa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80036ae:	fab1 f181 	clz	r1, r1
 80036b2:	b2c9      	uxtb	r1, r1
 80036b4:	408b      	lsls	r3, r1
 80036b6:	4950      	ldr	r1, [pc, #320]	; (80037f8 <HAL_RCC_OscConfig+0x650>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
 80036bc:	e06a      	b.n	8003794 <HAL_RCC_OscConfig+0x5ec>
 80036be:	2301      	movs	r3, #1
 80036c0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80036d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	461a      	mov	r2, r3
 80036e6:	2300      	movs	r3, #0
 80036e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ea:	f7fd fbcd 	bl	8000e88 <HAL_GetTick>
 80036ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f2:	e00a      	b.n	800370a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f4:	f7fd fbc8 	bl	8000e88 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d902      	bls.n	800370a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	f000 bc50 	b.w	8003faa <HAL_RCC_OscConfig+0xe02>
 800370a:	2302      	movs	r3, #2
 800370c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800371c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003720:	fab3 f383 	clz	r3, r3
 8003724:	b2db      	uxtb	r3, r3
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	b2db      	uxtb	r3, r3
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	d102      	bne.n	800373a <HAL_RCC_OscConfig+0x592>
 8003734:	4b30      	ldr	r3, [pc, #192]	; (80037f8 <HAL_RCC_OscConfig+0x650>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	e013      	b.n	8003762 <HAL_RCC_OscConfig+0x5ba>
 800373a:	2302      	movs	r3, #2
 800373c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003744:	fa93 f3a3 	rbit	r3, r3
 8003748:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800374c:	2302      	movs	r3, #2
 800374e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003752:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800375e:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <HAL_RCC_OscConfig+0x650>)
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	2202      	movs	r2, #2
 8003764:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003768:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800376c:	fa92 f2a2 	rbit	r2, r2
 8003770:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003774:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003778:	fab2 f282 	clz	r2, r2
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	f042 0220 	orr.w	r2, r2, #32
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	f002 021f 	and.w	r2, r2, #31
 8003788:	2101      	movs	r1, #1
 800378a:	fa01 f202 	lsl.w	r2, r1, r2
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1af      	bne.n	80036f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003794:	1d3b      	adds	r3, r7, #4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80da 	beq.w	8003958 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037a4:	1d3b      	adds	r3, r7, #4
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d069      	beq.n	8003882 <HAL_RCC_OscConfig+0x6da>
 80037ae:	2301      	movs	r3, #1
 80037b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80037b8:	fa93 f3a3 	rbit	r3, r3
 80037bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80037c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c4:	fab3 f383 	clz	r3, r3
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_OscConfig+0x654>)
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	461a      	mov	r2, r3
 80037d4:	2301      	movs	r3, #1
 80037d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d8:	f7fd fb56 	bl	8000e88 <HAL_GetTick>
 80037dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e0:	e00e      	b.n	8003800 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e2:	f7fd fb51 	bl	8000e88 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d906      	bls.n	8003800 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e3d9      	b.n	8003faa <HAL_RCC_OscConfig+0xe02>
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000
 80037fc:	10908120 	.word	0x10908120
 8003800:	2302      	movs	r3, #2
 8003802:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003812:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003816:	2202      	movs	r2, #2
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	fa93 f2a3 	rbit	r2, r3
 8003824:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800382e:	2202      	movs	r2, #2
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	fa93 f2a3 	rbit	r2, r3
 800383c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003840:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003842:	4ba5      	ldr	r3, [pc, #660]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 8003844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003846:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800384a:	2102      	movs	r1, #2
 800384c:	6019      	str	r1, [r3, #0]
 800384e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	fa93 f1a3 	rbit	r1, r3
 8003858:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800385c:	6019      	str	r1, [r3, #0]
  return result;
 800385e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	fab3 f383 	clz	r3, r3
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800386e:	b2db      	uxtb	r3, r3
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	2101      	movs	r1, #1
 8003876:	fa01 f303 	lsl.w	r3, r1, r3
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0b0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x63a>
 8003880:	e06a      	b.n	8003958 <HAL_RCC_OscConfig+0x7b0>
 8003882:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003886:	2201      	movs	r2, #1
 8003888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	fa93 f2a3 	rbit	r2, r3
 8003894:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003898:	601a      	str	r2, [r3, #0]
  return result;
 800389a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800389e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a0:	fab3 f383 	clz	r3, r3
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	461a      	mov	r2, r3
 80038a8:	4b8c      	ldr	r3, [pc, #560]	; (8003adc <HAL_RCC_OscConfig+0x934>)
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	461a      	mov	r2, r3
 80038b0:	2300      	movs	r3, #0
 80038b2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b4:	f7fd fae8 	bl	8000e88 <HAL_GetTick>
 80038b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038bc:	e009      	b.n	80038d2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038be:	f7fd fae3 	bl	8000e88 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e36b      	b.n	8003faa <HAL_RCC_OscConfig+0xe02>
 80038d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80038d6:	2202      	movs	r2, #2
 80038d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038da:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	fa93 f2a3 	rbit	r2, r3
 80038e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80038ee:	2202      	movs	r2, #2
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	fa93 f2a3 	rbit	r2, r3
 80038fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003906:	2202      	movs	r2, #2
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	fa93 f2a3 	rbit	r2, r3
 8003914:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003918:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800391a:	4b6f      	ldr	r3, [pc, #444]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 800391c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800391e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003922:	2102      	movs	r1, #2
 8003924:	6019      	str	r1, [r3, #0]
 8003926:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	fa93 f1a3 	rbit	r1, r3
 8003930:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003934:	6019      	str	r1, [r3, #0]
  return result;
 8003936:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	b2db      	uxtb	r3, r3
 8003942:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003946:	b2db      	uxtb	r3, r3
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	2101      	movs	r1, #1
 800394e:	fa01 f303 	lsl.w	r3, r1, r3
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1b2      	bne.n	80038be <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003958:	1d3b      	adds	r3, r7, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8158 	beq.w	8003c18 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003968:	2300      	movs	r3, #0
 800396a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396e:	4b5a      	ldr	r3, [pc, #360]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d112      	bne.n	80039a0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800397a:	4b57      	ldr	r3, [pc, #348]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	4a56      	ldr	r2, [pc, #344]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 8003980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003984:	61d3      	str	r3, [r2, #28]
 8003986:	4b54      	ldr	r3, [pc, #336]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800398e:	f107 0308 	add.w	r3, r7, #8
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	f107 0308 	add.w	r3, r7, #8
 8003998:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a0:	4b4f      	ldr	r3, [pc, #316]	; (8003ae0 <HAL_RCC_OscConfig+0x938>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d11a      	bne.n	80039e2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ac:	4b4c      	ldr	r3, [pc, #304]	; (8003ae0 <HAL_RCC_OscConfig+0x938>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a4b      	ldr	r2, [pc, #300]	; (8003ae0 <HAL_RCC_OscConfig+0x938>)
 80039b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039b8:	f7fd fa66 	bl	8000e88 <HAL_GetTick>
 80039bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c0:	e009      	b.n	80039d6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c2:	f7fd fa61 	bl	8000e88 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b64      	cmp	r3, #100	; 0x64
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e2e9      	b.n	8003faa <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d6:	4b42      	ldr	r3, [pc, #264]	; (8003ae0 <HAL_RCC_OscConfig+0x938>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0ef      	beq.n	80039c2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e2:	1d3b      	adds	r3, r7, #4
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d106      	bne.n	80039fa <HAL_RCC_OscConfig+0x852>
 80039ec:	4b3a      	ldr	r3, [pc, #232]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	4a39      	ldr	r2, [pc, #228]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	6213      	str	r3, [r2, #32]
 80039f8:	e02f      	b.n	8003a5a <HAL_RCC_OscConfig+0x8b2>
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10c      	bne.n	8003a1e <HAL_RCC_OscConfig+0x876>
 8003a04:	4b34      	ldr	r3, [pc, #208]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	4a33      	ldr	r2, [pc, #204]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	6213      	str	r3, [r2, #32]
 8003a10:	4b31      	ldr	r3, [pc, #196]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	4a30      	ldr	r2, [pc, #192]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 8003a16:	f023 0304 	bic.w	r3, r3, #4
 8003a1a:	6213      	str	r3, [r2, #32]
 8003a1c:	e01d      	b.n	8003a5a <HAL_RCC_OscConfig+0x8b2>
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	2b05      	cmp	r3, #5
 8003a26:	d10c      	bne.n	8003a42 <HAL_RCC_OscConfig+0x89a>
 8003a28:	4b2b      	ldr	r3, [pc, #172]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	4a2a      	ldr	r2, [pc, #168]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 8003a2e:	f043 0304 	orr.w	r3, r3, #4
 8003a32:	6213      	str	r3, [r2, #32]
 8003a34:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4a27      	ldr	r2, [pc, #156]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	6213      	str	r3, [r2, #32]
 8003a40:	e00b      	b.n	8003a5a <HAL_RCC_OscConfig+0x8b2>
 8003a42:	4b25      	ldr	r3, [pc, #148]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	4a24      	ldr	r2, [pc, #144]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	6213      	str	r3, [r2, #32]
 8003a4e:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 8003a54:	f023 0304 	bic.w	r3, r3, #4
 8003a58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a5a:	1d3b      	adds	r3, r7, #4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d06b      	beq.n	8003b3c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a64:	f7fd fa10 	bl	8000e88 <HAL_GetTick>
 8003a68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6c:	e00b      	b.n	8003a86 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a6e:	f7fd fa0b 	bl	8000e88 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e291      	b.n	8003faa <HAL_RCC_OscConfig+0xe02>
 8003a86:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	fa93 f2a3 	rbit	r2, r3
 8003a98:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	fa93 f2a3 	rbit	r2, r3
 8003ab0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003ab4:	601a      	str	r2, [r3, #0]
  return result;
 8003ab6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003aba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abc:	fab3 f383 	clz	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f043 0302 	orr.w	r3, r3, #2
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d109      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x93c>
 8003ad0:	4b01      	ldr	r3, [pc, #4]	; (8003ad8 <HAL_RCC_OscConfig+0x930>)
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	e014      	b.n	8003b00 <HAL_RCC_OscConfig+0x958>
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	10908120 	.word	0x10908120
 8003ae0:	40007000 	.word	0x40007000
 8003ae4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ae8:	2202      	movs	r2, #2
 8003aea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	fa93 f2a3 	rbit	r2, r3
 8003af6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	4bbb      	ldr	r3, [pc, #748]	; (8003dec <HAL_RCC_OscConfig+0xc44>)
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b04:	2102      	movs	r1, #2
 8003b06:	6011      	str	r1, [r2, #0]
 8003b08:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	fa92 f1a2 	rbit	r1, r2
 8003b12:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003b16:	6011      	str	r1, [r2, #0]
  return result;
 8003b18:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	fab2 f282 	clz	r2, r2
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	f002 021f 	and.w	r2, r2, #31
 8003b2e:	2101      	movs	r1, #1
 8003b30:	fa01 f202 	lsl.w	r2, r1, r2
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d099      	beq.n	8003a6e <HAL_RCC_OscConfig+0x8c6>
 8003b3a:	e063      	b.n	8003c04 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3c:	f7fd f9a4 	bl	8000e88 <HAL_GetTick>
 8003b40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b44:	e00b      	b.n	8003b5e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b46:	f7fd f99f 	bl	8000e88 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e225      	b.n	8003faa <HAL_RCC_OscConfig+0xe02>
 8003b5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b62:	2202      	movs	r2, #2
 8003b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	fa93 f2a3 	rbit	r2, r3
 8003b70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	fa93 f2a3 	rbit	r2, r3
 8003b88:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003b8c:	601a      	str	r2, [r3, #0]
  return result;
 8003b8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003b92:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b94:	fab3 f383 	clz	r3, r3
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f043 0302 	orr.w	r3, r3, #2
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d102      	bne.n	8003bae <HAL_RCC_OscConfig+0xa06>
 8003ba8:	4b90      	ldr	r3, [pc, #576]	; (8003dec <HAL_RCC_OscConfig+0xc44>)
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	e00d      	b.n	8003bca <HAL_RCC_OscConfig+0xa22>
 8003bae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	fa93 f2a3 	rbit	r2, r3
 8003bc0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	4b89      	ldr	r3, [pc, #548]	; (8003dec <HAL_RCC_OscConfig+0xc44>)
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003bce:	2102      	movs	r1, #2
 8003bd0:	6011      	str	r1, [r2, #0]
 8003bd2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	fa92 f1a2 	rbit	r1, r2
 8003bdc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003be0:	6011      	str	r1, [r2, #0]
  return result;
 8003be2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	fab2 f282 	clz	r2, r2
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	f002 021f 	and.w	r2, r2, #31
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1a0      	bne.n	8003b46 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c04:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d105      	bne.n	8003c18 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0c:	4b77      	ldr	r3, [pc, #476]	; (8003dec <HAL_RCC_OscConfig+0xc44>)
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	4a76      	ldr	r2, [pc, #472]	; (8003dec <HAL_RCC_OscConfig+0xc44>)
 8003c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c16:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c18:	1d3b      	adds	r3, r7, #4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 81c2 	beq.w	8003fa8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c24:	4b71      	ldr	r3, [pc, #452]	; (8003dec <HAL_RCC_OscConfig+0xc44>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 030c 	and.w	r3, r3, #12
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	f000 819c 	beq.w	8003f6a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c32:	1d3b      	adds	r3, r7, #4
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	f040 8114 	bne.w	8003e66 <HAL_RCC_OscConfig+0xcbe>
 8003c3e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c48:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	fa93 f2a3 	rbit	r2, r3
 8003c52:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c56:	601a      	str	r2, [r3, #0]
  return result;
 8003c58:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c5c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5e:	fab3 f383 	clz	r3, r3
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	461a      	mov	r2, r3
 8003c70:	2300      	movs	r3, #0
 8003c72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fd f908 	bl	8000e88 <HAL_GetTick>
 8003c78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c7c:	e009      	b.n	8003c92 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7e:	f7fd f903 	bl	8000e88 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e18b      	b.n	8003faa <HAL_RCC_OscConfig+0xe02>
 8003c92:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	fa93 f2a3 	rbit	r2, r3
 8003ca6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003caa:	601a      	str	r2, [r3, #0]
  return result;
 8003cac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003cb0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb2:	fab3 f383 	clz	r3, r3
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d102      	bne.n	8003ccc <HAL_RCC_OscConfig+0xb24>
 8003cc6:	4b49      	ldr	r3, [pc, #292]	; (8003dec <HAL_RCC_OscConfig+0xc44>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	e01b      	b.n	8003d04 <HAL_RCC_OscConfig+0xb5c>
 8003ccc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003cd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	fa93 f2a3 	rbit	r2, r3
 8003ce0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003cea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	fa93 f2a3 	rbit	r2, r3
 8003cfa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	4b3a      	ldr	r3, [pc, #232]	; (8003dec <HAL_RCC_OscConfig+0xc44>)
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d0c:	6011      	str	r1, [r2, #0]
 8003d0e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	fa92 f1a2 	rbit	r1, r2
 8003d18:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003d1c:	6011      	str	r1, [r2, #0]
  return result;
 8003d1e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	fab2 f282 	clz	r2, r2
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	f042 0220 	orr.w	r2, r2, #32
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	f002 021f 	and.w	r2, r2, #31
 8003d34:	2101      	movs	r1, #1
 8003d36:	fa01 f202 	lsl.w	r2, r1, r2
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d19e      	bne.n	8003c7e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d40:	4b2a      	ldr	r3, [pc, #168]	; (8003dec <HAL_RCC_OscConfig+0xc44>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d48:	1d3b      	adds	r3, r7, #4
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	430b      	orrs	r3, r1
 8003d56:	4925      	ldr	r1, [pc, #148]	; (8003dec <HAL_RCC_OscConfig+0xc44>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]
 8003d5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	fa93 f2a3 	rbit	r2, r3
 8003d70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d74:	601a      	str	r2, [r3, #0]
  return result;
 8003d76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d7a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d7c:	fab3 f383 	clz	r3, r3
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	2301      	movs	r3, #1
 8003d90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d92:	f7fd f879 	bl	8000e88 <HAL_GetTick>
 8003d96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d9a:	e009      	b.n	8003db0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9c:	f7fd f874 	bl	8000e88 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e0fc      	b.n	8003faa <HAL_RCC_OscConfig+0xe02>
 8003db0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003db4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	fa93 f2a3 	rbit	r2, r3
 8003dc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dc8:	601a      	str	r2, [r3, #0]
  return result;
 8003dca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dd0:	fab3 f383 	clz	r3, r3
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d105      	bne.n	8003df0 <HAL_RCC_OscConfig+0xc48>
 8003de4:	4b01      	ldr	r3, [pc, #4]	; (8003dec <HAL_RCC_OscConfig+0xc44>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	e01e      	b.n	8003e28 <HAL_RCC_OscConfig+0xc80>
 8003dea:	bf00      	nop
 8003dec:	40021000 	.word	0x40021000
 8003df0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003df4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	fa93 f2a3 	rbit	r2, r3
 8003e04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	fa93 f2a3 	rbit	r2, r3
 8003e1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	4b63      	ldr	r3, [pc, #396]	; (8003fb4 <HAL_RCC_OscConfig+0xe0c>)
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e30:	6011      	str	r1, [r2, #0]
 8003e32:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	fa92 f1a2 	rbit	r1, r2
 8003e3c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e40:	6011      	str	r1, [r2, #0]
  return result;
 8003e42:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	fab2 f282 	clz	r2, r2
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	f042 0220 	orr.w	r2, r2, #32
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	f002 021f 	and.w	r2, r2, #31
 8003e58:	2101      	movs	r1, #1
 8003e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d09b      	beq.n	8003d9c <HAL_RCC_OscConfig+0xbf4>
 8003e64:	e0a0      	b.n	8003fa8 <HAL_RCC_OscConfig+0xe00>
 8003e66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	fa93 f2a3 	rbit	r2, r3
 8003e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e7e:	601a      	str	r2, [r3, #0]
  return result;
 8003e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e84:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	461a      	mov	r2, r3
 8003e98:	2300      	movs	r3, #0
 8003e9a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fc fff4 	bl	8000e88 <HAL_GetTick>
 8003ea0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea4:	e009      	b.n	8003eba <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea6:	f7fc ffef 	bl	8000e88 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e077      	b.n	8003faa <HAL_RCC_OscConfig+0xe02>
 8003eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ebe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	fa93 f2a3 	rbit	r2, r3
 8003ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ed2:	601a      	str	r2, [r3, #0]
  return result;
 8003ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ed8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eda:	fab3 f383 	clz	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d102      	bne.n	8003ef4 <HAL_RCC_OscConfig+0xd4c>
 8003eee:	4b31      	ldr	r3, [pc, #196]	; (8003fb4 <HAL_RCC_OscConfig+0xe0c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	e01b      	b.n	8003f2c <HAL_RCC_OscConfig+0xd84>
 8003ef4:	f107 0320 	add.w	r3, r7, #32
 8003ef8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003efc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efe:	f107 0320 	add.w	r3, r7, #32
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	fa93 f2a3 	rbit	r2, r3
 8003f08:	f107 031c 	add.w	r3, r7, #28
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	f107 0318 	add.w	r3, r7, #24
 8003f12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	f107 0318 	add.w	r3, r7, #24
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	fa93 f2a3 	rbit	r2, r3
 8003f22:	f107 0314 	add.w	r3, r7, #20
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	4b22      	ldr	r3, [pc, #136]	; (8003fb4 <HAL_RCC_OscConfig+0xe0c>)
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	f107 0210 	add.w	r2, r7, #16
 8003f30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f34:	6011      	str	r1, [r2, #0]
 8003f36:	f107 0210 	add.w	r2, r7, #16
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	fa92 f1a2 	rbit	r1, r2
 8003f40:	f107 020c 	add.w	r2, r7, #12
 8003f44:	6011      	str	r1, [r2, #0]
  return result;
 8003f46:	f107 020c 	add.w	r2, r7, #12
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	fab2 f282 	clz	r2, r2
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	f042 0220 	orr.w	r2, r2, #32
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	f002 021f 	and.w	r2, r2, #31
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d19e      	bne.n	8003ea6 <HAL_RCC_OscConfig+0xcfe>
 8003f68:	e01e      	b.n	8003fa8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f6a:	1d3b      	adds	r3, r7, #4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e018      	b.n	8003faa <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f78:	4b0e      	ldr	r3, [pc, #56]	; (8003fb4 <HAL_RCC_OscConfig+0xe0c>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f80:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f88:	1d3b      	adds	r3, r7, #4
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d108      	bne.n	8003fa4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003f92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f9a:	1d3b      	adds	r3, r7, #4
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40021000 	.word	0x40021000

08003fb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b09e      	sub	sp, #120	; 0x78
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e162      	b.n	8004296 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd0:	4b90      	ldr	r3, [pc, #576]	; (8004214 <HAL_RCC_ClockConfig+0x25c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d910      	bls.n	8004000 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fde:	4b8d      	ldr	r3, [pc, #564]	; (8004214 <HAL_RCC_ClockConfig+0x25c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f023 0207 	bic.w	r2, r3, #7
 8003fe6:	498b      	ldr	r1, [pc, #556]	; (8004214 <HAL_RCC_ClockConfig+0x25c>)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fee:	4b89      	ldr	r3, [pc, #548]	; (8004214 <HAL_RCC_ClockConfig+0x25c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e14a      	b.n	8004296 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400c:	4b82      	ldr	r3, [pc, #520]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	497f      	ldr	r1, [pc, #508]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 800401a:	4313      	orrs	r3, r2
 800401c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 80dc 	beq.w	80041e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d13c      	bne.n	80040ae <HAL_RCC_ClockConfig+0xf6>
 8004034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004038:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800403c:	fa93 f3a3 	rbit	r3, r3
 8004040:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004044:	fab3 f383 	clz	r3, r3
 8004048:	b2db      	uxtb	r3, r3
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	b2db      	uxtb	r3, r3
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d102      	bne.n	800405e <HAL_RCC_ClockConfig+0xa6>
 8004058:	4b6f      	ldr	r3, [pc, #444]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	e00f      	b.n	800407e <HAL_RCC_ClockConfig+0xc6>
 800405e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004062:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004066:	fa93 f3a3 	rbit	r3, r3
 800406a:	667b      	str	r3, [r7, #100]	; 0x64
 800406c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004070:	663b      	str	r3, [r7, #96]	; 0x60
 8004072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004074:	fa93 f3a3 	rbit	r3, r3
 8004078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800407a:	4b67      	ldr	r3, [pc, #412]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004082:	65ba      	str	r2, [r7, #88]	; 0x58
 8004084:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004086:	fa92 f2a2 	rbit	r2, r2
 800408a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800408c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800408e:	fab2 f282 	clz	r2, r2
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	f042 0220 	orr.w	r2, r2, #32
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	f002 021f 	and.w	r2, r2, #31
 800409e:	2101      	movs	r1, #1
 80040a0:	fa01 f202 	lsl.w	r2, r1, r2
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d17b      	bne.n	80041a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e0f3      	b.n	8004296 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d13c      	bne.n	8004130 <HAL_RCC_ClockConfig+0x178>
 80040b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040be:	fa93 f3a3 	rbit	r3, r3
 80040c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80040c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c6:	fab3 f383 	clz	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d102      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x128>
 80040da:	4b4f      	ldr	r3, [pc, #316]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	e00f      	b.n	8004100 <HAL_RCC_ClockConfig+0x148>
 80040e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e8:	fa93 f3a3 	rbit	r3, r3
 80040ec:	647b      	str	r3, [r7, #68]	; 0x44
 80040ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040f2:	643b      	str	r3, [r7, #64]	; 0x40
 80040f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f6:	fa93 f3a3 	rbit	r3, r3
 80040fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040fc:	4b46      	ldr	r3, [pc, #280]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004104:	63ba      	str	r2, [r7, #56]	; 0x38
 8004106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004108:	fa92 f2a2 	rbit	r2, r2
 800410c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800410e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004110:	fab2 f282 	clz	r2, r2
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	f042 0220 	orr.w	r2, r2, #32
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	f002 021f 	and.w	r2, r2, #31
 8004120:	2101      	movs	r1, #1
 8004122:	fa01 f202 	lsl.w	r2, r1, r2
 8004126:	4013      	ands	r3, r2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d13a      	bne.n	80041a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0b2      	b.n	8004296 <HAL_RCC_ClockConfig+0x2de>
 8004130:	2302      	movs	r3, #2
 8004132:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004136:	fa93 f3a3 	rbit	r3, r3
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800413c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413e:	fab3 f383 	clz	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f043 0301 	orr.w	r3, r3, #1
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b01      	cmp	r3, #1
 8004150:	d102      	bne.n	8004158 <HAL_RCC_ClockConfig+0x1a0>
 8004152:	4b31      	ldr	r3, [pc, #196]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	e00d      	b.n	8004174 <HAL_RCC_ClockConfig+0x1bc>
 8004158:	2302      	movs	r3, #2
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	fa93 f3a3 	rbit	r3, r3
 8004162:	627b      	str	r3, [r7, #36]	; 0x24
 8004164:	2302      	movs	r3, #2
 8004166:	623b      	str	r3, [r7, #32]
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	fa93 f3a3 	rbit	r3, r3
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	4b29      	ldr	r3, [pc, #164]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	2202      	movs	r2, #2
 8004176:	61ba      	str	r2, [r7, #24]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	fa92 f2a2 	rbit	r2, r2
 800417e:	617a      	str	r2, [r7, #20]
  return result;
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	fab2 f282 	clz	r2, r2
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	f042 0220 	orr.w	r2, r2, #32
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	f002 021f 	and.w	r2, r2, #31
 8004192:	2101      	movs	r1, #1
 8004194:	fa01 f202 	lsl.w	r2, r1, r2
 8004198:	4013      	ands	r3, r2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e079      	b.n	8004296 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041a2:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f023 0203 	bic.w	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	491a      	ldr	r1, [pc, #104]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b4:	f7fc fe68 	bl	8000e88 <HAL_GetTick>
 80041b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041bc:	f7fc fe64 	bl	8000e88 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e061      	b.n	8004296 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d2:	4b11      	ldr	r3, [pc, #68]	; (8004218 <HAL_RCC_ClockConfig+0x260>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f003 020c 	and.w	r2, r3, #12
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d1eb      	bne.n	80041bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <HAL_RCC_ClockConfig+0x25c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d214      	bcs.n	800421c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b08      	ldr	r3, [pc, #32]	; (8004214 <HAL_RCC_ClockConfig+0x25c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 0207 	bic.w	r2, r3, #7
 80041fa:	4906      	ldr	r1, [pc, #24]	; (8004214 <HAL_RCC_ClockConfig+0x25c>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b04      	ldr	r3, [pc, #16]	; (8004214 <HAL_RCC_ClockConfig+0x25c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d005      	beq.n	800421c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e040      	b.n	8004296 <HAL_RCC_ClockConfig+0x2de>
 8004214:	40022000 	.word	0x40022000
 8004218:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d008      	beq.n	800423a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004228:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <HAL_RCC_ClockConfig+0x2e8>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	491a      	ldr	r1, [pc, #104]	; (80042a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004236:	4313      	orrs	r3, r2
 8004238:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d009      	beq.n	800425a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004246:	4b16      	ldr	r3, [pc, #88]	; (80042a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4912      	ldr	r1, [pc, #72]	; (80042a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004256:	4313      	orrs	r3, r2
 8004258:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800425a:	f000 f829 	bl	80042b0 <HAL_RCC_GetSysClockFreq>
 800425e:	4601      	mov	r1, r0
 8004260:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004268:	22f0      	movs	r2, #240	; 0xf0
 800426a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	fa92 f2a2 	rbit	r2, r2
 8004272:	60fa      	str	r2, [r7, #12]
  return result;
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	fab2 f282 	clz	r2, r2
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	40d3      	lsrs	r3, r2
 800427e:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <HAL_RCC_ClockConfig+0x2ec>)
 8004280:	5cd3      	ldrb	r3, [r2, r3]
 8004282:	fa21 f303 	lsr.w	r3, r1, r3
 8004286:	4a08      	ldr	r2, [pc, #32]	; (80042a8 <HAL_RCC_ClockConfig+0x2f0>)
 8004288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800428a:	4b08      	ldr	r3, [pc, #32]	; (80042ac <HAL_RCC_ClockConfig+0x2f4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7fc fdb6 	bl	8000e00 <HAL_InitTick>
  
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3778      	adds	r7, #120	; 0x78
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40021000 	.word	0x40021000
 80042a4:	08005a3c 	.word	0x08005a3c
 80042a8:	20000000 	.word	0x20000000
 80042ac:	20000004 	.word	0x20000004

080042b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b08b      	sub	sp, #44	; 0x2c
 80042b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	61fb      	str	r3, [r7, #28]
 80042ba:	2300      	movs	r3, #0
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	2300      	movs	r3, #0
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80042ca:	4b29      	ldr	r3, [pc, #164]	; (8004370 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d002      	beq.n	80042e0 <HAL_RCC_GetSysClockFreq+0x30>
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d003      	beq.n	80042e6 <HAL_RCC_GetSysClockFreq+0x36>
 80042de:	e03c      	b.n	800435a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042e0:	4b24      	ldr	r3, [pc, #144]	; (8004374 <HAL_RCC_GetSysClockFreq+0xc4>)
 80042e2:	623b      	str	r3, [r7, #32]
      break;
 80042e4:	e03c      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80042ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80042f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	fa92 f2a2 	rbit	r2, r2
 80042f8:	607a      	str	r2, [r7, #4]
  return result;
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	fab2 f282 	clz	r2, r2
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	40d3      	lsrs	r3, r2
 8004304:	4a1c      	ldr	r2, [pc, #112]	; (8004378 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004306:	5cd3      	ldrb	r3, [r2, r3]
 8004308:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800430a:	4b19      	ldr	r3, [pc, #100]	; (8004370 <HAL_RCC_GetSysClockFreq+0xc0>)
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	220f      	movs	r2, #15
 8004314:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	fa92 f2a2 	rbit	r2, r2
 800431c:	60fa      	str	r2, [r7, #12]
  return result;
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	fab2 f282 	clz	r2, r2
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	40d3      	lsrs	r3, r2
 8004328:	4a14      	ldr	r2, [pc, #80]	; (800437c <HAL_RCC_GetSysClockFreq+0xcc>)
 800432a:	5cd3      	ldrb	r3, [r2, r3]
 800432c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004338:	4a0e      	ldr	r2, [pc, #56]	; (8004374 <HAL_RCC_GetSysClockFreq+0xc4>)
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
 8004348:	e004      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	4a0c      	ldr	r2, [pc, #48]	; (8004380 <HAL_RCC_GetSysClockFreq+0xd0>)
 800434e:	fb02 f303 	mul.w	r3, r2, r3
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	623b      	str	r3, [r7, #32]
      break;
 8004358:	e002      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <HAL_RCC_GetSysClockFreq+0xc4>)
 800435c:	623b      	str	r3, [r7, #32]
      break;
 800435e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004360:	6a3b      	ldr	r3, [r7, #32]
}
 8004362:	4618      	mov	r0, r3
 8004364:	372c      	adds	r7, #44	; 0x2c
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000
 8004374:	007a1200 	.word	0x007a1200
 8004378:	08005a4c 	.word	0x08005a4c
 800437c:	08005a5c 	.word	0x08005a5c
 8004380:	003d0900 	.word	0x003d0900

08004384 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b092      	sub	sp, #72	; 0x48
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004394:	2300      	movs	r3, #0
 8004396:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 80cd 	beq.w	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a8:	4b86      	ldr	r3, [pc, #536]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10e      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b4:	4b83      	ldr	r3, [pc, #524]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	4a82      	ldr	r2, [pc, #520]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043be:	61d3      	str	r3, [r2, #28]
 80043c0:	4b80      	ldr	r3, [pc, #512]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d2:	4b7d      	ldr	r3, [pc, #500]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d118      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043de:	4b7a      	ldr	r3, [pc, #488]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a79      	ldr	r2, [pc, #484]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80043e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ea:	f7fc fd4d 	bl	8000e88 <HAL_GetTick>
 80043ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f0:	e008      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f2:	f7fc fd49 	bl	8000e88 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b64      	cmp	r3, #100	; 0x64
 80043fe:	d901      	bls.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e0db      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004404:	4b70      	ldr	r3, [pc, #448]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0f0      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004410:	4b6c      	ldr	r3, [pc, #432]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004418:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800441a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d07d      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004428:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800442a:	429a      	cmp	r2, r3
 800442c:	d076      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800442e:	4b65      	ldr	r3, [pc, #404]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800443c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	fa93 f3a3 	rbit	r3, r3
 8004444:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004448:	fab3 f383 	clz	r3, r3
 800444c:	b2db      	uxtb	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	4b5e      	ldr	r3, [pc, #376]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	461a      	mov	r2, r3
 8004458:	2301      	movs	r3, #1
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004460:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	fa93 f3a3 	rbit	r3, r3
 8004468:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800446a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800446c:	fab3 f383 	clz	r3, r3
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	4b55      	ldr	r3, [pc, #340]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	461a      	mov	r2, r3
 800447c:	2300      	movs	r3, #0
 800447e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004480:	4a50      	ldr	r2, [pc, #320]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004484:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d045      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004490:	f7fc fcfa 	bl	8000e88 <HAL_GetTick>
 8004494:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004496:	e00a      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004498:	f7fc fcf6 	bl	8000e88 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e086      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80044ae:	2302      	movs	r3, #2
 80044b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	fa93 f3a3 	rbit	r3, r3
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ba:	2302      	movs	r3, #2
 80044bc:	623b      	str	r3, [r7, #32]
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	fa93 f3a3 	rbit	r3, r3
 80044c4:	61fb      	str	r3, [r7, #28]
  return result;
 80044c6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c8:	fab3 f383 	clz	r3, r3
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f043 0302 	orr.w	r3, r3, #2
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d102      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80044dc:	4b39      	ldr	r3, [pc, #228]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	e007      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80044e2:	2302      	movs	r3, #2
 80044e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	fa93 f3a3 	rbit	r3, r3
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	4b35      	ldr	r3, [pc, #212]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	2202      	movs	r2, #2
 80044f4:	613a      	str	r2, [r7, #16]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	fa92 f2a2 	rbit	r2, r2
 80044fc:	60fa      	str	r2, [r7, #12]
  return result;
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	fab2 f282 	clz	r2, r2
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	f002 021f 	and.w	r2, r2, #31
 8004510:	2101      	movs	r1, #1
 8004512:	fa01 f202 	lsl.w	r2, r1, r2
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0bd      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800451c:	4b29      	ldr	r3, [pc, #164]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	4926      	ldr	r1, [pc, #152]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800452a:	4313      	orrs	r3, r2
 800452c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800452e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004532:	2b01      	cmp	r3, #1
 8004534:	d105      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004536:	4b23      	ldr	r3, [pc, #140]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	4a22      	ldr	r2, [pc, #136]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800453c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004540:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800454e:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	f023 0203 	bic.w	r2, r3, #3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	491a      	ldr	r1, [pc, #104]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800455c:	4313      	orrs	r3, r2
 800455e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d008      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800456c:	4b15      	ldr	r3, [pc, #84]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800456e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004570:	f023 0210 	bic.w	r2, r3, #16
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4912      	ldr	r1, [pc, #72]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800457a:	4313      	orrs	r3, r2
 800457c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800458a:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	490b      	ldr	r1, [pc, #44]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004598:	4313      	orrs	r3, r2
 800459a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	4903      	ldr	r1, [pc, #12]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3748      	adds	r7, #72	; 0x48
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40007000 	.word	0x40007000
 80045cc:	10908100 	.word	0x10908100

080045d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e095      	b.n	800470e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d108      	bne.n	80045fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045f2:	d009      	beq.n	8004608 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	61da      	str	r2, [r3, #28]
 80045fa:	e005      	b.n	8004608 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fc f902 	bl	800082c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800463e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004648:	d902      	bls.n	8004650 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	e002      	b.n	8004656 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004654:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800465e:	d007      	beq.n	8004670 <HAL_SPI_Init+0xa0>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004668:	d002      	beq.n	8004670 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b2:	ea42 0103 	orr.w	r1, r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	0c1b      	lsrs	r3, r3, #16
 80046cc:	f003 0204 	and.w	r2, r3, #4
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046ec:	ea42 0103 	orr.w	r1, r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	099b      	lsrs	r3, r3, #6
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10f      	bne.n	800475c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	099b      	lsrs	r3, r3, #6
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d004      	beq.n	800475c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	4798      	blx	r3
    return;
 800475a:	e0d8      	b.n	800490e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	085b      	lsrs	r3, r3, #1
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_SPI_IRQHandler+0x66>
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	09db      	lsrs	r3, r3, #7
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d004      	beq.n	800477e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	4798      	blx	r3
    return;
 800477c:	e0c7      	b.n	800490e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10c      	bne.n	80047a4 <HAL_SPI_IRQHandler+0x8c>
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	099b      	lsrs	r3, r3, #6
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d106      	bne.n	80047a4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 80b5 	beq.w	800490e <HAL_SPI_IRQHandler+0x1f6>
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80ae 	beq.w	800490e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	099b      	lsrs	r3, r3, #6
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d023      	beq.n	8004806 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d011      	beq.n	80047ee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ce:	f043 0204 	orr.w	r2, r3, #4
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	e00b      	b.n	8004806 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047ee:	2300      	movs	r3, #0
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	693b      	ldr	r3, [r7, #16]
        return;
 8004804:	e083      	b.n	800490e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d014      	beq.n	800483c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004816:	f043 0201 	orr.w	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	0a1b      	lsrs	r3, r3, #8
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00c      	beq.n	8004862 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484c:	f043 0208 	orr.w	r2, r3, #8
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004854:	2300      	movs	r3, #0
 8004856:	60bb      	str	r3, [r7, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004866:	2b00      	cmp	r3, #0
 8004868:	d050      	beq.n	800490c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004878:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d104      	bne.n	8004896 <HAL_SPI_IRQHandler+0x17e>
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d034      	beq.n	8004900 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0203 	bic.w	r2, r2, #3
 80048a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d011      	beq.n	80048d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b2:	4a18      	ldr	r2, [pc, #96]	; (8004914 <HAL_SPI_IRQHandler+0x1fc>)
 80048b4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fd fbe1 	bl	8002082 <HAL_DMA_Abort_IT>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d016      	beq.n	8004908 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048de:	4a0d      	ldr	r2, [pc, #52]	; (8004914 <HAL_SPI_IRQHandler+0x1fc>)
 80048e0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fd fbcb 	bl	8002082 <HAL_DMA_Abort_IT>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80048fe:	e003      	b.n	8004908 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f809 	bl	8004918 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004906:	e000      	b.n	800490a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004908:	bf00      	nop
    return;
 800490a:	bf00      	nop
 800490c:	bf00      	nop
  }
}
 800490e:	3720      	adds	r7, #32
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	0800492d 	.word	0x0800492d

08004918 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f7ff ffe5 	bl	8004918 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800494e:	bf00      	nop
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b082      	sub	sp, #8
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e049      	b.n	80049fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d106      	bne.n	8004982 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7fc f967 	bl	8000c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2202      	movs	r2, #2
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	3304      	adds	r3, #4
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f000 fbd1 	bl	800513c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e049      	b.n	8004aaa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fc f8ea 	bl	8000c04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4619      	mov	r1, r3
 8004a42:	4610      	mov	r0, r2
 8004a44:	f000 fb7a 	bl	800513c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d109      	bne.n	8004ad8 <HAL_TIM_PWM_Start+0x24>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	bf14      	ite	ne
 8004ad0:	2301      	movne	r3, #1
 8004ad2:	2300      	moveq	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	e03c      	b.n	8004b52 <HAL_TIM_PWM_Start+0x9e>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d109      	bne.n	8004af2 <HAL_TIM_PWM_Start+0x3e>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	bf14      	ite	ne
 8004aea:	2301      	movne	r3, #1
 8004aec:	2300      	moveq	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	e02f      	b.n	8004b52 <HAL_TIM_PWM_Start+0x9e>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d109      	bne.n	8004b0c <HAL_TIM_PWM_Start+0x58>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	bf14      	ite	ne
 8004b04:	2301      	movne	r3, #1
 8004b06:	2300      	moveq	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	e022      	b.n	8004b52 <HAL_TIM_PWM_Start+0x9e>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2b0c      	cmp	r3, #12
 8004b10:	d109      	bne.n	8004b26 <HAL_TIM_PWM_Start+0x72>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	bf14      	ite	ne
 8004b1e:	2301      	movne	r3, #1
 8004b20:	2300      	moveq	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	e015      	b.n	8004b52 <HAL_TIM_PWM_Start+0x9e>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d109      	bne.n	8004b40 <HAL_TIM_PWM_Start+0x8c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	bf14      	ite	ne
 8004b38:	2301      	movne	r3, #1
 8004b3a:	2300      	moveq	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	e008      	b.n	8004b52 <HAL_TIM_PWM_Start+0x9e>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e088      	b.n	8004c6c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <HAL_TIM_PWM_Start+0xb6>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b68:	e023      	b.n	8004bb2 <HAL_TIM_PWM_Start+0xfe>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d104      	bne.n	8004b7a <HAL_TIM_PWM_Start+0xc6>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b78:	e01b      	b.n	8004bb2 <HAL_TIM_PWM_Start+0xfe>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_PWM_Start+0xd6>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b88:	e013      	b.n	8004bb2 <HAL_TIM_PWM_Start+0xfe>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b0c      	cmp	r3, #12
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_PWM_Start+0xe6>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b98:	e00b      	b.n	8004bb2 <HAL_TIM_PWM_Start+0xfe>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_PWM_Start+0xf6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ba8:	e003      	b.n	8004bb2 <HAL_TIM_PWM_Start+0xfe>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	6839      	ldr	r1, [r7, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fddc 	bl	8005778 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a2b      	ldr	r2, [pc, #172]	; (8004c74 <HAL_TIM_PWM_Start+0x1c0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00e      	beq.n	8004be8 <HAL_TIM_PWM_Start+0x134>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a2a      	ldr	r2, [pc, #168]	; (8004c78 <HAL_TIM_PWM_Start+0x1c4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d009      	beq.n	8004be8 <HAL_TIM_PWM_Start+0x134>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a28      	ldr	r2, [pc, #160]	; (8004c7c <HAL_TIM_PWM_Start+0x1c8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d004      	beq.n	8004be8 <HAL_TIM_PWM_Start+0x134>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a27      	ldr	r2, [pc, #156]	; (8004c80 <HAL_TIM_PWM_Start+0x1cc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d101      	bne.n	8004bec <HAL_TIM_PWM_Start+0x138>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <HAL_TIM_PWM_Start+0x13a>
 8004bec:	2300      	movs	r3, #0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1b      	ldr	r2, [pc, #108]	; (8004c74 <HAL_TIM_PWM_Start+0x1c0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00e      	beq.n	8004c2a <HAL_TIM_PWM_Start+0x176>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c14:	d009      	beq.n	8004c2a <HAL_TIM_PWM_Start+0x176>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1a      	ldr	r2, [pc, #104]	; (8004c84 <HAL_TIM_PWM_Start+0x1d0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d004      	beq.n	8004c2a <HAL_TIM_PWM_Start+0x176>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a14      	ldr	r2, [pc, #80]	; (8004c78 <HAL_TIM_PWM_Start+0x1c4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d115      	bne.n	8004c56 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	4b15      	ldr	r3, [pc, #84]	; (8004c88 <HAL_TIM_PWM_Start+0x1d4>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b06      	cmp	r3, #6
 8004c3a:	d015      	beq.n	8004c68 <HAL_TIM_PWM_Start+0x1b4>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c42:	d011      	beq.n	8004c68 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c54:	e008      	b.n	8004c68 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0201 	orr.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	e000      	b.n	8004c6a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40012c00 	.word	0x40012c00
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40014400 	.word	0x40014400
 8004c80:	40014800 	.word	0x40014800
 8004c84:	40000400 	.word	0x40000400
 8004c88:	00010007 	.word	0x00010007

08004c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d122      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d11b      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0202 	mvn.w	r2, #2
 8004cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fa16 	bl	8005100 <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e005      	b.n	8004ce2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fa08 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fa19 	bl	8005114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d122      	bne.n	8004d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d11b      	bne.n	8004d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0204 	mvn.w	r2, #4
 8004d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2202      	movs	r2, #2
 8004d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f9ec 	bl	8005100 <HAL_TIM_IC_CaptureCallback>
 8004d28:	e005      	b.n	8004d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f9de 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f9ef 	bl	8005114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d122      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d11b      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0208 	mvn.w	r2, #8
 8004d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2204      	movs	r2, #4
 8004d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f9c2 	bl	8005100 <HAL_TIM_IC_CaptureCallback>
 8004d7c:	e005      	b.n	8004d8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9b4 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f9c5 	bl	8005114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	2b10      	cmp	r3, #16
 8004d9c:	d122      	bne.n	8004de4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d11b      	bne.n	8004de4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0210 	mvn.w	r2, #16
 8004db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2208      	movs	r2, #8
 8004dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f998 	bl	8005100 <HAL_TIM_IC_CaptureCallback>
 8004dd0:	e005      	b.n	8004dde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f98a 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f99b 	bl	8005114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d10e      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d107      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0201 	mvn.w	r2, #1
 8004e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fb fc42 	bl	8000694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1a:	2b80      	cmp	r3, #128	; 0x80
 8004e1c:	d10e      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e28:	2b80      	cmp	r3, #128	; 0x80
 8004e2a:	d107      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fdb4 	bl	80059a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4a:	d10e      	bne.n	8004e6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e56:	2b80      	cmp	r3, #128	; 0x80
 8004e58:	d107      	bne.n	8004e6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fda7 	bl	80059b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d10e      	bne.n	8004e96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e82:	2b40      	cmp	r3, #64	; 0x40
 8004e84:	d107      	bne.n	8004e96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f949 	bl	8005128 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	d10e      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d107      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f06f 0220 	mvn.w	r2, #32
 8004eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fd67 	bl	8005990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e0fd      	b.n	80050e2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b14      	cmp	r3, #20
 8004ef2:	f200 80f0 	bhi.w	80050d6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004ef6:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f51 	.word	0x08004f51
 8004f00:	080050d7 	.word	0x080050d7
 8004f04:	080050d7 	.word	0x080050d7
 8004f08:	080050d7 	.word	0x080050d7
 8004f0c:	08004f91 	.word	0x08004f91
 8004f10:	080050d7 	.word	0x080050d7
 8004f14:	080050d7 	.word	0x080050d7
 8004f18:	080050d7 	.word	0x080050d7
 8004f1c:	08004fd3 	.word	0x08004fd3
 8004f20:	080050d7 	.word	0x080050d7
 8004f24:	080050d7 	.word	0x080050d7
 8004f28:	080050d7 	.word	0x080050d7
 8004f2c:	08005013 	.word	0x08005013
 8004f30:	080050d7 	.word	0x080050d7
 8004f34:	080050d7 	.word	0x080050d7
 8004f38:	080050d7 	.word	0x080050d7
 8004f3c:	08005055 	.word	0x08005055
 8004f40:	080050d7 	.word	0x080050d7
 8004f44:	080050d7 	.word	0x080050d7
 8004f48:	080050d7 	.word	0x080050d7
 8004f4c:	08005095 	.word	0x08005095
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f968 	bl	800522c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0208 	orr.w	r2, r2, #8
 8004f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0204 	bic.w	r2, r2, #4
 8004f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6999      	ldr	r1, [r3, #24]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	619a      	str	r2, [r3, #24]
      break;
 8004f8e:	e0a3      	b.n	80050d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 f9ce 	bl	8005338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004faa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6999      	ldr	r1, [r3, #24]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	021a      	lsls	r2, r3, #8
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	619a      	str	r2, [r3, #24]
      break;
 8004fd0:	e082      	b.n	80050d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68b9      	ldr	r1, [r7, #8]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fa2d 	bl	8005438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69da      	ldr	r2, [r3, #28]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0208 	orr.w	r2, r2, #8
 8004fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69da      	ldr	r2, [r3, #28]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0204 	bic.w	r2, r2, #4
 8004ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69d9      	ldr	r1, [r3, #28]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	61da      	str	r2, [r3, #28]
      break;
 8005010:	e062      	b.n	80050d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	4618      	mov	r0, r3
 800501a:	f000 fa8b 	bl	8005534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800502c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69d9      	ldr	r1, [r3, #28]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	021a      	lsls	r2, r3, #8
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	61da      	str	r2, [r3, #28]
      break;
 8005052:	e041      	b.n	80050d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68b9      	ldr	r1, [r7, #8]
 800505a:	4618      	mov	r0, r3
 800505c:	f000 face 	bl	80055fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0208 	orr.w	r2, r2, #8
 800506e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0204 	bic.w	r2, r2, #4
 800507e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	691a      	ldr	r2, [r3, #16]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005092:	e021      	b.n	80050d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fb0c 	bl	80056b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	021a      	lsls	r2, r3, #8
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050d4:	e000      	b.n	80050d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80050d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop

080050ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a32      	ldr	r2, [pc, #200]	; (8005218 <TIM_Base_SetConfig+0xdc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d007      	beq.n	8005164 <TIM_Base_SetConfig+0x28>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515a:	d003      	beq.n	8005164 <TIM_Base_SetConfig+0x28>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a2f      	ldr	r2, [pc, #188]	; (800521c <TIM_Base_SetConfig+0xe0>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d108      	bne.n	8005176 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a27      	ldr	r2, [pc, #156]	; (8005218 <TIM_Base_SetConfig+0xdc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <TIM_Base_SetConfig+0x6a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005184:	d00f      	beq.n	80051a6 <TIM_Base_SetConfig+0x6a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a24      	ldr	r2, [pc, #144]	; (800521c <TIM_Base_SetConfig+0xe0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00b      	beq.n	80051a6 <TIM_Base_SetConfig+0x6a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a23      	ldr	r2, [pc, #140]	; (8005220 <TIM_Base_SetConfig+0xe4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d007      	beq.n	80051a6 <TIM_Base_SetConfig+0x6a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a22      	ldr	r2, [pc, #136]	; (8005224 <TIM_Base_SetConfig+0xe8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d003      	beq.n	80051a6 <TIM_Base_SetConfig+0x6a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a21      	ldr	r2, [pc, #132]	; (8005228 <TIM_Base_SetConfig+0xec>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d108      	bne.n	80051b8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a0e      	ldr	r2, [pc, #56]	; (8005218 <TIM_Base_SetConfig+0xdc>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00b      	beq.n	80051fc <TIM_Base_SetConfig+0xc0>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a0e      	ldr	r2, [pc, #56]	; (8005220 <TIM_Base_SetConfig+0xe4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d007      	beq.n	80051fc <TIM_Base_SetConfig+0xc0>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a0d      	ldr	r2, [pc, #52]	; (8005224 <TIM_Base_SetConfig+0xe8>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_Base_SetConfig+0xc0>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a0c      	ldr	r2, [pc, #48]	; (8005228 <TIM_Base_SetConfig+0xec>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d103      	bne.n	8005204 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	615a      	str	r2, [r3, #20]
}
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40012c00 	.word	0x40012c00
 800521c:	40000400 	.word	0x40000400
 8005220:	40014000 	.word	0x40014000
 8005224:	40014400 	.word	0x40014400
 8005228:	40014800 	.word	0x40014800

0800522c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f023 0201 	bic.w	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800525a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0303 	bic.w	r3, r3, #3
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f023 0302 	bic.w	r3, r3, #2
 8005278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a28      	ldr	r2, [pc, #160]	; (8005328 <TIM_OC1_SetConfig+0xfc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00b      	beq.n	80052a4 <TIM_OC1_SetConfig+0x78>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a27      	ldr	r2, [pc, #156]	; (800532c <TIM_OC1_SetConfig+0x100>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d007      	beq.n	80052a4 <TIM_OC1_SetConfig+0x78>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a26      	ldr	r2, [pc, #152]	; (8005330 <TIM_OC1_SetConfig+0x104>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_OC1_SetConfig+0x78>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a25      	ldr	r2, [pc, #148]	; (8005334 <TIM_OC1_SetConfig+0x108>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10c      	bne.n	80052be <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f023 0308 	bic.w	r3, r3, #8
 80052aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f023 0304 	bic.w	r3, r3, #4
 80052bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a19      	ldr	r2, [pc, #100]	; (8005328 <TIM_OC1_SetConfig+0xfc>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00b      	beq.n	80052de <TIM_OC1_SetConfig+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a18      	ldr	r2, [pc, #96]	; (800532c <TIM_OC1_SetConfig+0x100>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d007      	beq.n	80052de <TIM_OC1_SetConfig+0xb2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a17      	ldr	r2, [pc, #92]	; (8005330 <TIM_OC1_SetConfig+0x104>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d003      	beq.n	80052de <TIM_OC1_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a16      	ldr	r2, [pc, #88]	; (8005334 <TIM_OC1_SetConfig+0x108>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d111      	bne.n	8005302 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	621a      	str	r2, [r3, #32]
}
 800531c:	bf00      	nop
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	40012c00 	.word	0x40012c00
 800532c:	40014000 	.word	0x40014000
 8005330:	40014400 	.word	0x40014400
 8005334:	40014800 	.word	0x40014800

08005338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f023 0210 	bic.w	r2, r3, #16
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800536a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f023 0320 	bic.w	r3, r3, #32
 8005386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a24      	ldr	r2, [pc, #144]	; (8005428 <TIM_OC2_SetConfig+0xf0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d10d      	bne.n	80053b8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a1b      	ldr	r2, [pc, #108]	; (8005428 <TIM_OC2_SetConfig+0xf0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00b      	beq.n	80053d8 <TIM_OC2_SetConfig+0xa0>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a1a      	ldr	r2, [pc, #104]	; (800542c <TIM_OC2_SetConfig+0xf4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d007      	beq.n	80053d8 <TIM_OC2_SetConfig+0xa0>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a19      	ldr	r2, [pc, #100]	; (8005430 <TIM_OC2_SetConfig+0xf8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d003      	beq.n	80053d8 <TIM_OC2_SetConfig+0xa0>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a18      	ldr	r2, [pc, #96]	; (8005434 <TIM_OC2_SetConfig+0xfc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d113      	bne.n	8005400 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053de:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053e6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	621a      	str	r2, [r3, #32]
}
 800541a:	bf00      	nop
 800541c:	371c      	adds	r7, #28
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40012c00 	.word	0x40012c00
 800542c:	40014000 	.word	0x40014000
 8005430:	40014400 	.word	0x40014400
 8005434:	40014800 	.word	0x40014800

08005438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0303 	bic.w	r3, r3, #3
 8005472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	021b      	lsls	r3, r3, #8
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	4313      	orrs	r3, r2
 8005490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a23      	ldr	r2, [pc, #140]	; (8005524 <TIM_OC3_SetConfig+0xec>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d10d      	bne.n	80054b6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	021b      	lsls	r3, r3, #8
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054b4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a1a      	ldr	r2, [pc, #104]	; (8005524 <TIM_OC3_SetConfig+0xec>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00b      	beq.n	80054d6 <TIM_OC3_SetConfig+0x9e>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a19      	ldr	r2, [pc, #100]	; (8005528 <TIM_OC3_SetConfig+0xf0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d007      	beq.n	80054d6 <TIM_OC3_SetConfig+0x9e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a18      	ldr	r2, [pc, #96]	; (800552c <TIM_OC3_SetConfig+0xf4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <TIM_OC3_SetConfig+0x9e>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a17      	ldr	r2, [pc, #92]	; (8005530 <TIM_OC3_SetConfig+0xf8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d113      	bne.n	80054fe <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	621a      	str	r2, [r3, #32]
}
 8005518:	bf00      	nop
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40014000 	.word	0x40014000
 800552c:	40014400 	.word	0x40014400
 8005530:	40014800 	.word	0x40014800

08005534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	031b      	lsls	r3, r3, #12
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a16      	ldr	r2, [pc, #88]	; (80055ec <TIM_OC4_SetConfig+0xb8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00b      	beq.n	80055b0 <TIM_OC4_SetConfig+0x7c>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a15      	ldr	r2, [pc, #84]	; (80055f0 <TIM_OC4_SetConfig+0xbc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d007      	beq.n	80055b0 <TIM_OC4_SetConfig+0x7c>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a14      	ldr	r2, [pc, #80]	; (80055f4 <TIM_OC4_SetConfig+0xc0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d003      	beq.n	80055b0 <TIM_OC4_SetConfig+0x7c>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a13      	ldr	r2, [pc, #76]	; (80055f8 <TIM_OC4_SetConfig+0xc4>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d109      	bne.n	80055c4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	019b      	lsls	r3, r3, #6
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	621a      	str	r2, [r3, #32]
}
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40012c00 	.word	0x40012c00
 80055f0:	40014000 	.word	0x40014000
 80055f4:	40014400 	.word	0x40014400
 80055f8:	40014800 	.word	0x40014800

080055fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800562a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005640:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	041b      	lsls	r3, r3, #16
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a15      	ldr	r2, [pc, #84]	; (80056a8 <TIM_OC5_SetConfig+0xac>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00b      	beq.n	800566e <TIM_OC5_SetConfig+0x72>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a14      	ldr	r2, [pc, #80]	; (80056ac <TIM_OC5_SetConfig+0xb0>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d007      	beq.n	800566e <TIM_OC5_SetConfig+0x72>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a13      	ldr	r2, [pc, #76]	; (80056b0 <TIM_OC5_SetConfig+0xb4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d003      	beq.n	800566e <TIM_OC5_SetConfig+0x72>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a12      	ldr	r2, [pc, #72]	; (80056b4 <TIM_OC5_SetConfig+0xb8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d109      	bne.n	8005682 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005674:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	021b      	lsls	r3, r3, #8
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	621a      	str	r2, [r3, #32]
}
 800569c:	bf00      	nop
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	40012c00 	.word	0x40012c00
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40014400 	.word	0x40014400
 80056b4:	40014800 	.word	0x40014800

080056b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	051b      	lsls	r3, r3, #20
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a16      	ldr	r2, [pc, #88]	; (8005768 <TIM_OC6_SetConfig+0xb0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00b      	beq.n	800572c <TIM_OC6_SetConfig+0x74>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a15      	ldr	r2, [pc, #84]	; (800576c <TIM_OC6_SetConfig+0xb4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d007      	beq.n	800572c <TIM_OC6_SetConfig+0x74>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a14      	ldr	r2, [pc, #80]	; (8005770 <TIM_OC6_SetConfig+0xb8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d003      	beq.n	800572c <TIM_OC6_SetConfig+0x74>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a13      	ldr	r2, [pc, #76]	; (8005774 <TIM_OC6_SetConfig+0xbc>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d109      	bne.n	8005740 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005732:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	029b      	lsls	r3, r3, #10
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	621a      	str	r2, [r3, #32]
}
 800575a:	bf00      	nop
 800575c:	371c      	adds	r7, #28
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40012c00 	.word	0x40012c00
 800576c:	40014000 	.word	0x40014000
 8005770:	40014400 	.word	0x40014400
 8005774:	40014800 	.word	0x40014800

08005778 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f003 031f 	and.w	r3, r3, #31
 800578a:	2201      	movs	r2, #1
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a1a      	ldr	r2, [r3, #32]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	43db      	mvns	r3, r3
 800579a:	401a      	ands	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a1a      	ldr	r2, [r3, #32]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	fa01 f303 	lsl.w	r3, r1, r3
 80057b0:	431a      	orrs	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	621a      	str	r2, [r3, #32]
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
	...

080057c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057d8:	2302      	movs	r3, #2
 80057da:	e054      	b.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a24      	ldr	r2, [pc, #144]	; (8005894 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d108      	bne.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800580c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a17      	ldr	r2, [pc, #92]	; (8005894 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00e      	beq.n	800585a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005844:	d009      	beq.n	800585a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a13      	ldr	r2, [pc, #76]	; (8005898 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d004      	beq.n	800585a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a11      	ldr	r2, [pc, #68]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d10c      	bne.n	8005874 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	4313      	orrs	r3, r2
 800586a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40012c00 	.word	0x40012c00
 8005898:	40000400 	.word	0x40000400
 800589c:	40014000 	.word	0x40014000

080058a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e060      	b.n	800597e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	041b      	lsls	r3, r3, #16
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a14      	ldr	r2, [pc, #80]	; (800598c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d115      	bne.n	800596c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	051b      	lsls	r3, r3, #20
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40012c00 	.word	0x40012c00

08005990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <__libc_init_array>:
 80059cc:	b570      	push	{r4, r5, r6, lr}
 80059ce:	4e0d      	ldr	r6, [pc, #52]	; (8005a04 <__libc_init_array+0x38>)
 80059d0:	4c0d      	ldr	r4, [pc, #52]	; (8005a08 <__libc_init_array+0x3c>)
 80059d2:	1ba4      	subs	r4, r4, r6
 80059d4:	10a4      	asrs	r4, r4, #2
 80059d6:	2500      	movs	r5, #0
 80059d8:	42a5      	cmp	r5, r4
 80059da:	d109      	bne.n	80059f0 <__libc_init_array+0x24>
 80059dc:	4e0b      	ldr	r6, [pc, #44]	; (8005a0c <__libc_init_array+0x40>)
 80059de:	4c0c      	ldr	r4, [pc, #48]	; (8005a10 <__libc_init_array+0x44>)
 80059e0:	f000 f820 	bl	8005a24 <_init>
 80059e4:	1ba4      	subs	r4, r4, r6
 80059e6:	10a4      	asrs	r4, r4, #2
 80059e8:	2500      	movs	r5, #0
 80059ea:	42a5      	cmp	r5, r4
 80059ec:	d105      	bne.n	80059fa <__libc_init_array+0x2e>
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059f4:	4798      	blx	r3
 80059f6:	3501      	adds	r5, #1
 80059f8:	e7ee      	b.n	80059d8 <__libc_init_array+0xc>
 80059fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059fe:	4798      	blx	r3
 8005a00:	3501      	adds	r5, #1
 8005a02:	e7f2      	b.n	80059ea <__libc_init_array+0x1e>
 8005a04:	08005a6c 	.word	0x08005a6c
 8005a08:	08005a6c 	.word	0x08005a6c
 8005a0c:	08005a6c 	.word	0x08005a6c
 8005a10:	08005a70 	.word	0x08005a70

08005a14 <memset>:
 8005a14:	4402      	add	r2, r0
 8005a16:	4603      	mov	r3, r0
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d100      	bne.n	8005a1e <memset+0xa>
 8005a1c:	4770      	bx	lr
 8005a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a22:	e7f9      	b.n	8005a18 <memset+0x4>

08005a24 <_init>:
 8005a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a26:	bf00      	nop
 8005a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2a:	bc08      	pop	{r3}
 8005a2c:	469e      	mov	lr, r3
 8005a2e:	4770      	bx	lr

08005a30 <_fini>:
 8005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a32:	bf00      	nop
 8005a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a36:	bc08      	pop	{r3}
 8005a38:	469e      	mov	lr, r3
 8005a3a:	4770      	bx	lr
