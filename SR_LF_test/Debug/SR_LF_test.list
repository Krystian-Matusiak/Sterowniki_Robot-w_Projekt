
SR_LF_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005c24  08005c24  00015c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d3c  08005d3c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005d3c  08005d3c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d3c  08005d3c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000070  08005db4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005db4  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfab  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023eb  00000000  00000000  0002e04b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ae0  00000000  00000000  00030438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c8  00000000  00000000  00030f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ccc9  00000000  00000000  000318e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bc34  00000000  00000000  0004e5a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a3715  00000000  00000000  0005a1dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fd8f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000310c  00000000  00000000  000fd970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c0c 	.word	0x08005c0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005c0c 	.word	0x08005c0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08a      	sub	sp, #40	; 0x28
 8000274:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000276:	f107 031c 	add.w	r3, r7, #28
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
 8000290:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000292:	4b3c      	ldr	r3, [pc, #240]	; (8000384 <MX_ADC1_Init+0x114>)
 8000294:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000298:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800029a:	4b3a      	ldr	r3, [pc, #232]	; (8000384 <MX_ADC1_Init+0x114>)
 800029c:	2200      	movs	r2, #0
 800029e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002a0:	4b38      	ldr	r3, [pc, #224]	; (8000384 <MX_ADC1_Init+0x114>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002a6:	4b37      	ldr	r3, [pc, #220]	; (8000384 <MX_ADC1_Init+0x114>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002ac:	4b35      	ldr	r3, [pc, #212]	; (8000384 <MX_ADC1_Init+0x114>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002b2:	4b34      	ldr	r3, [pc, #208]	; (8000384 <MX_ADC1_Init+0x114>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002ba:	4b32      	ldr	r3, [pc, #200]	; (8000384 <MX_ADC1_Init+0x114>)
 80002bc:	2200      	movs	r2, #0
 80002be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002c0:	4b30      	ldr	r3, [pc, #192]	; (8000384 <MX_ADC1_Init+0x114>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002c6:	4b2f      	ldr	r3, [pc, #188]	; (8000384 <MX_ADC1_Init+0x114>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80002cc:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <MX_ADC1_Init+0x114>)
 80002ce:	2203      	movs	r2, #3
 80002d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80002d2:	4b2c      	ldr	r3, [pc, #176]	; (8000384 <MX_ADC1_Init+0x114>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002da:	4b2a      	ldr	r3, [pc, #168]	; (8000384 <MX_ADC1_Init+0x114>)
 80002dc:	2204      	movs	r2, #4
 80002de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002e0:	4b28      	ldr	r3, [pc, #160]	; (8000384 <MX_ADC1_Init+0x114>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <MX_ADC1_Init+0x114>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002ec:	4825      	ldr	r0, [pc, #148]	; (8000384 <MX_ADC1_Init+0x114>)
 80002ee:	f000 fd73 	bl	8000dd8 <HAL_ADC_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80002f8:	f000 fb03 	bl	8000902 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80002fc:	2300      	movs	r3, #0
 80002fe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000300:	f107 031c 	add.w	r3, r7, #28
 8000304:	4619      	mov	r1, r3
 8000306:	481f      	ldr	r0, [pc, #124]	; (8000384 <MX_ADC1_Init+0x114>)
 8000308:	f001 fe80 	bl	800200c <HAL_ADCEx_MultiModeConfigChannel>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000312:	f000 faf6 	bl	8000902 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000316:	2301      	movs	r3, #1
 8000318:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800031a:	2301      	movs	r3, #1
 800031c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000322:	2305      	movs	r3, #5
 8000324:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	4619      	mov	r1, r3
 8000332:	4814      	ldr	r0, [pc, #80]	; (8000384 <MX_ADC1_Init+0x114>)
 8000334:	f001 fba8 	bl	8001a88 <HAL_ADC_ConfigChannel>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800033e:	f000 fae0 	bl	8000902 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000342:	2302      	movs	r3, #2
 8000344:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000346:	2302      	movs	r3, #2
 8000348:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4619      	mov	r1, r3
 800034e:	480d      	ldr	r0, [pc, #52]	; (8000384 <MX_ADC1_Init+0x114>)
 8000350:	f001 fb9a 	bl	8001a88 <HAL_ADC_ConfigChannel>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800035a:	f000 fad2 	bl	8000902 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800035e:	2304      	movs	r3, #4
 8000360:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000362:	2303      	movs	r3, #3
 8000364:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4619      	mov	r1, r3
 800036a:	4806      	ldr	r0, [pc, #24]	; (8000384 <MX_ADC1_Init+0x114>)
 800036c:	f001 fb8c 	bl	8001a88 <HAL_ADC_ConfigChannel>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000376:	f000 fac4 	bl	8000902 <Error_Handler>
  }

}
 800037a:	bf00      	nop
 800037c:	3728      	adds	r7, #40	; 0x28
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	200000ec 	.word	0x200000ec

08000388 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800038e:	463b      	mov	r3, r7
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
 8000398:	60da      	str	r2, [r3, #12]
 800039a:	611a      	str	r2, [r3, #16]
 800039c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 800039e:	4b35      	ldr	r3, [pc, #212]	; (8000474 <MX_ADC2_Init+0xec>)
 80003a0:	4a35      	ldr	r2, [pc, #212]	; (8000478 <MX_ADC2_Init+0xf0>)
 80003a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003a4:	4b33      	ldr	r3, [pc, #204]	; (8000474 <MX_ADC2_Init+0xec>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003aa:	4b32      	ldr	r3, [pc, #200]	; (8000474 <MX_ADC2_Init+0xec>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003b0:	4b30      	ldr	r3, [pc, #192]	; (8000474 <MX_ADC2_Init+0xec>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003b6:	4b2f      	ldr	r3, [pc, #188]	; (8000474 <MX_ADC2_Init+0xec>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003bc:	4b2d      	ldr	r3, [pc, #180]	; (8000474 <MX_ADC2_Init+0xec>)
 80003be:	2200      	movs	r2, #0
 80003c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003c4:	4b2b      	ldr	r3, [pc, #172]	; (8000474 <MX_ADC2_Init+0xec>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ca:	4b2a      	ldr	r3, [pc, #168]	; (8000474 <MX_ADC2_Init+0xec>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003d0:	4b28      	ldr	r3, [pc, #160]	; (8000474 <MX_ADC2_Init+0xec>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 80003d6:	4b27      	ldr	r3, [pc, #156]	; (8000474 <MX_ADC2_Init+0xec>)
 80003d8:	2203      	movs	r2, #3
 80003da:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80003dc:	4b25      	ldr	r3, [pc, #148]	; (8000474 <MX_ADC2_Init+0xec>)
 80003de:	2201      	movs	r2, #1
 80003e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003e4:	4b23      	ldr	r3, [pc, #140]	; (8000474 <MX_ADC2_Init+0xec>)
 80003e6:	2204      	movs	r2, #4
 80003e8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80003ea:	4b22      	ldr	r3, [pc, #136]	; (8000474 <MX_ADC2_Init+0xec>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003f0:	4b20      	ldr	r3, [pc, #128]	; (8000474 <MX_ADC2_Init+0xec>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003f6:	481f      	ldr	r0, [pc, #124]	; (8000474 <MX_ADC2_Init+0xec>)
 80003f8:	f000 fcee 	bl	8000dd8 <HAL_ADC_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000402:	f000 fa7e 	bl	8000902 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000406:	2301      	movs	r3, #1
 8000408:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800040a:	2301      	movs	r3, #1
 800040c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800040e:	2300      	movs	r3, #0
 8000410:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8000412:	2302      	movs	r3, #2
 8000414:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000416:	2300      	movs	r3, #0
 8000418:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800041e:	463b      	mov	r3, r7
 8000420:	4619      	mov	r1, r3
 8000422:	4814      	ldr	r0, [pc, #80]	; (8000474 <MX_ADC2_Init+0xec>)
 8000424:	f001 fb30 	bl	8001a88 <HAL_ADC_ConfigChannel>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800042e:	f000 fa68 	bl	8000902 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000432:	2302      	movs	r3, #2
 8000434:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000436:	2302      	movs	r3, #2
 8000438:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800043a:	463b      	mov	r3, r7
 800043c:	4619      	mov	r1, r3
 800043e:	480d      	ldr	r0, [pc, #52]	; (8000474 <MX_ADC2_Init+0xec>)
 8000440:	f001 fb22 	bl	8001a88 <HAL_ADC_ConfigChannel>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 800044a:	f000 fa5a 	bl	8000902 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800044e:	2303      	movs	r3, #3
 8000450:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000452:	2303      	movs	r3, #3
 8000454:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000456:	463b      	mov	r3, r7
 8000458:	4619      	mov	r1, r3
 800045a:	4806      	ldr	r0, [pc, #24]	; (8000474 <MX_ADC2_Init+0xec>)
 800045c:	f001 fb14 	bl	8001a88 <HAL_ADC_ConfigChannel>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 8000466:	f000 fa4c 	bl	8000902 <Error_Handler>
  }

}
 800046a:	bf00      	nop
 800046c:	3718      	adds	r7, #24
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	2000009c 	.word	0x2000009c
 8000478:	50000100 	.word	0x50000100

0800047c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b08c      	sub	sp, #48	; 0x30
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000484:	f107 031c 	add.w	r3, r7, #28
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
 8000492:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800049c:	d15c      	bne.n	8000558 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800049e:	4b61      	ldr	r3, [pc, #388]	; (8000624 <HAL_ADC_MspInit+0x1a8>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	3301      	adds	r3, #1
 80004a4:	4a5f      	ldr	r2, [pc, #380]	; (8000624 <HAL_ADC_MspInit+0x1a8>)
 80004a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80004a8:	4b5e      	ldr	r3, [pc, #376]	; (8000624 <HAL_ADC_MspInit+0x1a8>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d10b      	bne.n	80004c8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80004b0:	4b5d      	ldr	r3, [pc, #372]	; (8000628 <HAL_ADC_MspInit+0x1ac>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	4a5c      	ldr	r2, [pc, #368]	; (8000628 <HAL_ADC_MspInit+0x1ac>)
 80004b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ba:	6153      	str	r3, [r2, #20]
 80004bc:	4b5a      	ldr	r3, [pc, #360]	; (8000628 <HAL_ADC_MspInit+0x1ac>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c4:	61bb      	str	r3, [r7, #24]
 80004c6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	4b57      	ldr	r3, [pc, #348]	; (8000628 <HAL_ADC_MspInit+0x1ac>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	4a56      	ldr	r2, [pc, #344]	; (8000628 <HAL_ADC_MspInit+0x1ac>)
 80004ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d2:	6153      	str	r3, [r2, #20]
 80004d4:	4b54      	ldr	r3, [pc, #336]	; (8000628 <HAL_ADC_MspInit+0x1ac>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004dc:	617b      	str	r3, [r7, #20]
 80004de:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80004e0:	230b      	movs	r3, #11
 80004e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e4:	2303      	movs	r3, #3
 80004e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	f107 031c 	add.w	r3, r7, #28
 80004f0:	4619      	mov	r1, r3
 80004f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f6:	f002 fa93 	bl	8002a20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80004fa:	4b4c      	ldr	r3, [pc, #304]	; (800062c <HAL_ADC_MspInit+0x1b0>)
 80004fc:	4a4c      	ldr	r2, [pc, #304]	; (8000630 <HAL_ADC_MspInit+0x1b4>)
 80004fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000500:	4b4a      	ldr	r3, [pc, #296]	; (800062c <HAL_ADC_MspInit+0x1b0>)
 8000502:	2200      	movs	r2, #0
 8000504:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000506:	4b49      	ldr	r3, [pc, #292]	; (800062c <HAL_ADC_MspInit+0x1b0>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800050c:	4b47      	ldr	r3, [pc, #284]	; (800062c <HAL_ADC_MspInit+0x1b0>)
 800050e:	2280      	movs	r2, #128	; 0x80
 8000510:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000512:	4b46      	ldr	r3, [pc, #280]	; (800062c <HAL_ADC_MspInit+0x1b0>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000518:	4b44      	ldr	r3, [pc, #272]	; (800062c <HAL_ADC_MspInit+0x1b0>)
 800051a:	2200      	movs	r2, #0
 800051c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800051e:	4b43      	ldr	r3, [pc, #268]	; (800062c <HAL_ADC_MspInit+0x1b0>)
 8000520:	2220      	movs	r2, #32
 8000522:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000524:	4b41      	ldr	r3, [pc, #260]	; (800062c <HAL_ADC_MspInit+0x1b0>)
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800052a:	4840      	ldr	r0, [pc, #256]	; (800062c <HAL_ADC_MspInit+0x1b0>)
 800052c:	f002 f869 	bl	8002602 <HAL_DMA_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000536:	f000 f9e4 	bl	8000902 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a3b      	ldr	r2, [pc, #236]	; (800062c <HAL_ADC_MspInit+0x1b0>)
 800053e:	639a      	str	r2, [r3, #56]	; 0x38
 8000540:	4a3a      	ldr	r2, [pc, #232]	; (800062c <HAL_ADC_MspInit+0x1b0>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	2012      	movs	r0, #18
 800054c:	f002 f823 	bl	8002596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000550:	2012      	movs	r0, #18
 8000552:	f002 f83c 	bl	80025ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000556:	e060      	b.n	800061a <HAL_ADC_MspInit+0x19e>
  else if(adcHandle->Instance==ADC2)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a35      	ldr	r2, [pc, #212]	; (8000634 <HAL_ADC_MspInit+0x1b8>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d15b      	bne.n	800061a <HAL_ADC_MspInit+0x19e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000562:	4b30      	ldr	r3, [pc, #192]	; (8000624 <HAL_ADC_MspInit+0x1a8>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	4a2e      	ldr	r2, [pc, #184]	; (8000624 <HAL_ADC_MspInit+0x1a8>)
 800056a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800056c:	4b2d      	ldr	r3, [pc, #180]	; (8000624 <HAL_ADC_MspInit+0x1a8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d10b      	bne.n	800058c <HAL_ADC_MspInit+0x110>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000574:	4b2c      	ldr	r3, [pc, #176]	; (8000628 <HAL_ADC_MspInit+0x1ac>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	4a2b      	ldr	r2, [pc, #172]	; (8000628 <HAL_ADC_MspInit+0x1ac>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6153      	str	r3, [r2, #20]
 8000580:	4b29      	ldr	r3, [pc, #164]	; (8000628 <HAL_ADC_MspInit+0x1ac>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	613b      	str	r3, [r7, #16]
 800058a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b26      	ldr	r3, [pc, #152]	; (8000628 <HAL_ADC_MspInit+0x1ac>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a25      	ldr	r2, [pc, #148]	; (8000628 <HAL_ADC_MspInit+0x1ac>)
 8000592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000596:	6153      	str	r3, [r2, #20]
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <HAL_ADC_MspInit+0x1ac>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80005a4:	2370      	movs	r3, #112	; 0x70
 80005a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a8:	2303      	movs	r3, #3
 80005aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 031c 	add.w	r3, r7, #28
 80005b4:	4619      	mov	r1, r3
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f002 fa31 	bl	8002a20 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80005be:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <HAL_ADC_MspInit+0x1bc>)
 80005c0:	4a1e      	ldr	r2, [pc, #120]	; (800063c <HAL_ADC_MspInit+0x1c0>)
 80005c2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005c4:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <HAL_ADC_MspInit+0x1bc>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <HAL_ADC_MspInit+0x1bc>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <HAL_ADC_MspInit+0x1bc>)
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <HAL_ADC_MspInit+0x1bc>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <HAL_ADC_MspInit+0x1bc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <HAL_ADC_MspInit+0x1bc>)
 80005e4:	2220      	movs	r2, #32
 80005e6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <HAL_ADC_MspInit+0x1bc>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80005ee:	4812      	ldr	r0, [pc, #72]	; (8000638 <HAL_ADC_MspInit+0x1bc>)
 80005f0:	f002 f807 	bl	8002602 <HAL_DMA_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <HAL_ADC_MspInit+0x182>
      Error_Handler();
 80005fa:	f000 f982 	bl	8000902 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <HAL_ADC_MspInit+0x1bc>)
 8000602:	639a      	str	r2, [r3, #56]	; 0x38
 8000604:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <HAL_ADC_MspInit+0x1bc>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	2012      	movs	r0, #18
 8000610:	f001 ffc1 	bl	8002596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000614:	2012      	movs	r0, #18
 8000616:	f001 ffda 	bl	80025ce <HAL_NVIC_EnableIRQ>
}
 800061a:	bf00      	nop
 800061c:	3730      	adds	r7, #48	; 0x30
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000008c 	.word	0x2000008c
 8000628:	40021000 	.word	0x40021000
 800062c:	2000013c 	.word	0x2000013c
 8000630:	40020008 	.word	0x40020008
 8000634:	50000100 	.word	0x50000100
 8000638:	20000180 	.word	0x20000180
 800063c:	4002001c 	.word	0x4002001c

08000640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_DMA_Init+0x48>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <MX_DMA_Init+0x48>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6153      	str	r3, [r2, #20]
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MX_DMA_Init+0x48>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	200b      	movs	r0, #11
 8000664:	f001 ff97 	bl	8002596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000668:	200b      	movs	r0, #11
 800066a:	f001 ffb0 	bl	80025ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	200c      	movs	r0, #12
 8000674:	f001 ff8f 	bl	8002596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000678:	200c      	movs	r0, #12
 800067a:	f001 ffa8 	bl	80025ce <HAL_NVIC_EnableIRQ>

}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000

0800068c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_GPIO_Init+0x74>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <MX_GPIO_Init+0x74>)
 80006a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006ac:	6153      	str	r3, [r2, #20]
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_GPIO_Init+0x74>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_GPIO_Init+0x74>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a10      	ldr	r2, [pc, #64]	; (8000700 <MX_GPIO_Init+0x74>)
 80006c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c4:	6153      	str	r3, [r2, #20]
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_GPIO_Init+0x74>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80006d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e0:	2303      	movs	r3, #3
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006e4:	2307      	movs	r3, #7
 80006e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	4619      	mov	r1, r3
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f2:	f002 f995 	bl	8002a20 <HAL_GPIO_Init>

}
 80006f6:	bf00      	nop
 80006f8:	3720      	adds	r7, #32
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <HAL_ADC_ConvCpltCallback>:

volatile uint8_t adc3[3];
volatile uint8_t adc4[3];


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <HAL_ADC_ConvCpltCallback+0x34>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d10d      	bne.n	8000730 <HAL_ADC_ConvCpltCallback+0x2c>
		czuj1 = HAL_ADC_GetValue(hadc);
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 ff61 	bl	80015dc <HAL_ADC_GetValue>
 800071a:	4603      	mov	r3, r0
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b07      	ldr	r3, [pc, #28]	; (800073c <HAL_ADC_ConvCpltCallback+0x38>)
 8000720:	801a      	strh	r2, [r3, #0]
		czuj2 = HAL_ADC_GetValue(hadc);
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f000 ff5a 	bl	80015dc <HAL_ADC_GetValue>
 8000728:	4603      	mov	r3, r0
 800072a:	b29a      	uxth	r2, r3
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <HAL_ADC_ConvCpltCallback+0x3c>)
 800072e:	801a      	strh	r2, [r3, #0]

	}
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000ec 	.word	0x200000ec
 800073c:	200001c6 	.word	0x200001c6
 8000740:	200001ca 	.word	0x200001ca

08000744 <_write>:


int _write(int file, char *ptr, int len){
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
	  HAL_UART_Transmit( &huart1, ptr, len,50 );
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b29a      	uxth	r2, r3
 8000754:	2332      	movs	r3, #50	; 0x32
 8000756:	68b9      	ldr	r1, [r7, #8]
 8000758:	4803      	ldr	r0, [pc, #12]	; (8000768 <_write+0x24>)
 800075a:	f003 fd85 	bl	8004268 <HAL_UART_Transmit>
	  return len;
 800075e:	687b      	ldr	r3, [r7, #4]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200001d8 	.word	0x200001d8

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000770:	f000 fa8c 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000774:	f000 f86a 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000778:	f7ff ff88 	bl	800068c <MX_GPIO_Init>
  MX_DMA_Init();
 800077c:	f7ff ff60 	bl	8000640 <MX_DMA_Init>
  MX_ADC1_Init();
 8000780:	f7ff fd76 	bl	8000270 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000784:	f7ff fe00 	bl	8000388 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8000788:	f000 f9da 	bl	8000b40 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);

  HAL_ADC_Start_IT(&hadc1);
 800078c:	4825      	ldr	r0, [pc, #148]	; (8000824 <main+0xb8>)
 800078e:	f000 fd6b 	bl	8001268 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 8000792:	4825      	ldr	r0, [pc, #148]	; (8000828 <main+0xbc>)
 8000794:	f000 fd68 	bl	8001268 <HAL_ADC_Start_IT>
  HAL_ADC_Start(&hadc1);
 8000798:	4822      	ldr	r0, [pc, #136]	; (8000824 <main+0xb8>)
 800079a:	f000 fcaf 	bl	80010fc <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc1, adc3, 3);
 800079e:	2203      	movs	r2, #3
 80007a0:	4922      	ldr	r1, [pc, #136]	; (800082c <main+0xc0>)
 80007a2:	4820      	ldr	r0, [pc, #128]	; (8000824 <main+0xb8>)
 80007a4:	f000 fe40 	bl	8001428 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, adc4, 3);
 80007a8:	2203      	movs	r2, #3
 80007aa:	4921      	ldr	r1, [pc, #132]	; (8000830 <main+0xc4>)
 80007ac:	481e      	ldr	r0, [pc, #120]	; (8000828 <main+0xbc>)
 80007ae:	f000 fe3b 	bl	8001428 <HAL_ADC_Start_DMA>
	  printf("Czuj4 %d\r\n" , czuj4);
	  printf("Czuj5 %d\r\n" , czuj5);
	  printf("Czuj6 %d\r\n\n" , czuj6);
*/

	  printf("Czuj1 %d\r\n" , adc3[0]);
 80007b2:	4b1e      	ldr	r3, [pc, #120]	; (800082c <main+0xc0>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	4619      	mov	r1, r3
 80007ba:	481e      	ldr	r0, [pc, #120]	; (8000834 <main+0xc8>)
 80007bc:	f004 fb42 	bl	8004e44 <iprintf>
	  printf("Czuj2 %d\r\n" , adc3[1]);
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <main+0xc0>)
 80007c2:	785b      	ldrb	r3, [r3, #1]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	481b      	ldr	r0, [pc, #108]	; (8000838 <main+0xcc>)
 80007ca:	f004 fb3b 	bl	8004e44 <iprintf>
	  printf("Czuj3 %d\r\n" , adc3[2]);
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <main+0xc0>)
 80007d0:	789b      	ldrb	r3, [r3, #2]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	4619      	mov	r1, r3
 80007d6:	4819      	ldr	r0, [pc, #100]	; (800083c <main+0xd0>)
 80007d8:	f004 fb34 	bl	8004e44 <iprintf>
	  printf("Czuj4 %d\r\n" , adc4[0]);
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <main+0xc4>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4619      	mov	r1, r3
 80007e4:	4816      	ldr	r0, [pc, #88]	; (8000840 <main+0xd4>)
 80007e6:	f004 fb2d 	bl	8004e44 <iprintf>
	  printf("Czuj5 %d\r\n" , adc4[1]);
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <main+0xc4>)
 80007ec:	785b      	ldrb	r3, [r3, #1]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4619      	mov	r1, r3
 80007f2:	4814      	ldr	r0, [pc, #80]	; (8000844 <main+0xd8>)
 80007f4:	f004 fb26 	bl	8004e44 <iprintf>
	  printf("Czuj6 %d\r\n\n" , adc4[2]);
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <main+0xc4>)
 80007fa:	789b      	ldrb	r3, [r3, #2]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4619      	mov	r1, r3
 8000800:	4811      	ldr	r0, [pc, #68]	; (8000848 <main+0xdc>)
 8000802:	f004 fb1f 	bl	8004e44 <iprintf>


	  //HAL_ADC_PollForConversion(&hadc1, 10);
	  //HAL_ADC_Start_IT(&hadc1);
	  //HAL_ADC_Start(&hadc1);
	  HAL_ADC_Start_DMA(&hadc1, adc3, 3);
 8000806:	2203      	movs	r2, #3
 8000808:	4908      	ldr	r1, [pc, #32]	; (800082c <main+0xc0>)
 800080a:	4806      	ldr	r0, [pc, #24]	; (8000824 <main+0xb8>)
 800080c:	f000 fe0c 	bl	8001428 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc2, adc4, 3);
 8000810:	2203      	movs	r2, #3
 8000812:	4907      	ldr	r1, [pc, #28]	; (8000830 <main+0xc4>)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <main+0xbc>)
 8000816:	f000 fe07 	bl	8001428 <HAL_ADC_Start_DMA>


	  HAL_Delay(400);
 800081a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800081e:	f000 fa9b 	bl	8000d58 <HAL_Delay>
	  printf("Czuj1 %d\r\n" , adc3[0]);
 8000822:	e7c6      	b.n	80007b2 <main+0x46>
 8000824:	200000ec 	.word	0x200000ec
 8000828:	2000009c 	.word	0x2000009c
 800082c:	200001d4 	.word	0x200001d4
 8000830:	200001d0 	.word	0x200001d0
 8000834:	08005c24 	.word	0x08005c24
 8000838:	08005c30 	.word	0x08005c30
 800083c:	08005c3c 	.word	0x08005c3c
 8000840:	08005c48 	.word	0x08005c48
 8000844:	08005c54 	.word	0x08005c54
 8000848:	08005c60 	.word	0x08005c60

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b096      	sub	sp, #88	; 0x58
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000856:	2228      	movs	r2, #40	; 0x28
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f004 faea 	bl	8004e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
 800087e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000880:	2302      	movs	r3, #2
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000888:	2310      	movs	r3, #16
 800088a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000890:	2300      	movs	r3, #0
 8000892:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000894:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000898:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 fa30 	bl	8002d04 <HAL_RCC_OscConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x62>
  {
    Error_Handler();
 80008aa:	f000 f82a 	bl	8000902 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	230f      	movs	r3, #15
 80008b0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	2101      	movs	r1, #1
 80008ca:	4618      	mov	r0, r3
 80008cc:	f003 f922 	bl	8003b14 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008d6:	f000 f814 	bl	8000902 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 80008da:	2381      	movs	r3, #129	; 0x81
 80008dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80008e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e6:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 fb48 	bl	8003f80 <HAL_RCCEx_PeriphCLKConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008f6:	f000 f804 	bl	8000902 <Error_Handler>
  }
}
 80008fa:	bf00      	nop
 80008fc:	3758      	adds	r7, #88	; 0x58
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <HAL_MspInit+0x44>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <HAL_MspInit+0x44>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6193      	str	r3, [r2, #24]
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <HAL_MspInit+0x44>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_MspInit+0x44>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_MspInit+0x44>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	61d3      	str	r3, [r2, #28]
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_MspInit+0x44>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ac:	f000 f9b4 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <DMA1_Channel1_IRQHandler+0x10>)
 80009ba:	f001 ff3f 	bl	800283c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000013c 	.word	0x2000013c

080009c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <DMA1_Channel2_IRQHandler+0x10>)
 80009ce:	f001 ff35 	bl	800283c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000180 	.word	0x20000180

080009dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80009e0:	4803      	ldr	r0, [pc, #12]	; (80009f0 <ADC1_2_IRQHandler+0x14>)
 80009e2:	f000 fe09 	bl	80015f8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80009e6:	4803      	ldr	r0, [pc, #12]	; (80009f4 <ADC1_2_IRQHandler+0x18>)
 80009e8:	f000 fe06 	bl	80015f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200000ec 	.word	0x200000ec
 80009f4:	2000009c 	.word	0x2000009c

080009f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <USART1_IRQHandler+0x10>)
 80009fe:	f003 fcc7 	bl	8004390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200001d8 	.word	0x200001d8

08000a0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	e00a      	b.n	8000a34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a1e:	f3af 8000 	nop.w
 8000a22:	4601      	mov	r1, r0
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	b2ca      	uxtb	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbf0      	blt.n	8000a1e <_read+0x12>
	}

return len;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a6e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <_isatty>:

int _isatty(int file)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
	return 1;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
	return 0;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab8:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <_sbrk+0x5c>)
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <_sbrk+0x60>)
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d102      	bne.n	8000ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <_sbrk+0x64>)
 8000ace:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <_sbrk+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d207      	bcs.n	8000af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae0:	f004 f97e 	bl	8004de0 <__errno>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	230c      	movs	r3, #12
 8000ae8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	e009      	b.n	8000b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <_sbrk+0x64>)
 8000b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b02:	68fb      	ldr	r3, [r7, #12]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20003000 	.word	0x20003000
 8000b10:	00000400 	.word	0x00000400
 8000b14:	20000090 	.word	0x20000090
 8000b18:	20000268 	.word	0x20000268

08000b1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b46:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <MX_USART1_UART_Init+0x5c>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b4c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000b50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b84:	f003 fb22 	bl	80041cc <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b8e:	f7ff feb8 	bl	8000902 <Error_Handler>
  }

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200001d8 	.word	0x200001d8
 8000b9c:	40013800 	.word	0x40013800

08000ba0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a1c      	ldr	r2, [pc, #112]	; (8000c30 <HAL_UART_MspInit+0x90>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d131      	bne.n	8000c26 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <HAL_UART_MspInit+0x94>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	4a1b      	ldr	r2, [pc, #108]	; (8000c34 <HAL_UART_MspInit+0x94>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6193      	str	r3, [r2, #24]
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HAL_UART_MspInit+0x94>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_UART_MspInit+0x94>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a15      	ldr	r2, [pc, #84]	; (8000c34 <HAL_UART_MspInit+0x94>)
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_UART_MspInit+0x94>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bf2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c04:	2307      	movs	r3, #7
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c12:	f001 ff05 	bl	8002a20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2025      	movs	r0, #37	; 0x25
 8000c1c:	f001 fcbb 	bl	8002596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c20:	2025      	movs	r0, #37	; 0x25
 8000c22:	f001 fcd4 	bl	80025ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	; 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40013800 	.word	0x40013800
 8000c34:	40021000 	.word	0x40021000

08000c38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c3e:	490e      	ldr	r1, [pc, #56]	; (8000c78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <LoopForever+0xe>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c54:	4c0b      	ldr	r4, [pc, #44]	; (8000c84 <LoopForever+0x16>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c62:	f7ff ff5b 	bl	8000b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f004 f8c1 	bl	8004dec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c6a:	f7ff fd7f 	bl	800076c <main>

08000c6e <LoopForever>:

LoopForever:
    b LoopForever
 8000c6e:	e7fe      	b.n	8000c6e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c70:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c7c:	08005d44 	.word	0x08005d44
  ldr r2, =_sbss
 8000c80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c84:	20000264 	.word	0x20000264

08000c88 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <CAN_RX0_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_Init+0x28>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_Init+0x28>)
 8000c96:	f043 0310 	orr.w	r3, r3, #16
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f001 fc6f 	bl	8002580 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fe32 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 fc87 	bl	80025ea <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f001 fc4f 	bl	8002596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000004 	.word	0x20000004

08000d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	2000025c 	.word	0x2000025c

08000d40 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	2000025c 	.word	0x2000025c

08000d58 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_Delay+0x40>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000008 	.word	0x20000008

08000d9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b09a      	sub	sp, #104	; 0x68
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e172      	b.n	80010de <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d176      	bne.n	8000ef8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d152      	bne.n	8000eb8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff fb25 	bl	800047c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d13b      	bne.n	8000eb8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f001 fa6d 	bl	8002320 <ADC_Disable>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	f003 0310 	and.w	r3, r3, #16
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d12f      	bne.n	8000eb8 <HAL_ADC_Init+0xe0>
 8000e58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d12b      	bne.n	8000eb8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e68:	f023 0302 	bic.w	r3, r3, #2
 8000e6c:	f043 0202 	orr.w	r2, r3, #2
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e82:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e92:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e94:	4b94      	ldr	r3, [pc, #592]	; (80010e8 <HAL_ADC_Init+0x310>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a94      	ldr	r2, [pc, #592]	; (80010ec <HAL_ADC_Init+0x314>)
 8000e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9e:	0c9a      	lsrs	r2, r3, #18
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eaa:	e002      	b.n	8000eb2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1f9      	bne.n	8000eac <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d007      	beq.n	8000ed6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ed4:	d110      	bne.n	8000ef8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f023 0312 	bic.w	r3, r3, #18
 8000ede:	f043 0210 	orr.w	r2, r3, #16
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f043 0201 	orr.w	r2, r3, #1
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f040 80df 	bne.w	80010c4 <HAL_ADC_Init+0x2ec>
 8000f06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f040 80da 	bne.w	80010c4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f040 80d2 	bne.w	80010c4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f28:	f043 0202 	orr.w	r2, r3, #2
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f30:	4b6f      	ldr	r3, [pc, #444]	; (80010f0 <HAL_ADC_Init+0x318>)
 8000f32:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f3c:	d102      	bne.n	8000f44 <HAL_ADC_Init+0x16c>
 8000f3e:	4b6d      	ldr	r3, [pc, #436]	; (80010f4 <HAL_ADC_Init+0x31c>)
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	e002      	b.n	8000f4a <HAL_ADC_Init+0x172>
 8000f44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f48:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d108      	bne.n	8000f6a <HAL_ADC_Init+0x192>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d101      	bne.n	8000f6a <HAL_ADC_Init+0x192>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <HAL_ADC_Init+0x194>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d11c      	bne.n	8000faa <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f70:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d010      	beq.n	8000f98 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d107      	bne.n	8000f92 <HAL_ADC_Init+0x1ba>
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d101      	bne.n	8000f92 <HAL_ADC_Init+0x1ba>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <HAL_ADC_Init+0x1bc>
 8000f92:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d108      	bne.n	8000faa <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fa8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7e5b      	ldrb	r3, [r3, #25]
 8000fae:	035b      	lsls	r3, r3, #13
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000fb4:	2a01      	cmp	r2, #1
 8000fb6:	d002      	beq.n	8000fbe <HAL_ADC_Init+0x1e6>
 8000fb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fbc:	e000      	b.n	8000fc0 <HAL_ADC_Init+0x1e8>
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d11b      	bne.n	8001016 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7e5b      	ldrb	r3, [r3, #25]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d109      	bne.n	8000ffa <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	3b01      	subs	r3, #1
 8000fec:	045a      	lsls	r2, r3, #17
 8000fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff6:	663b      	str	r3, [r7, #96]	; 0x60
 8000ff8:	e00d      	b.n	8001016 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001002:	f043 0220 	orr.w	r2, r3, #32
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101a:	2b01      	cmp	r3, #1
 800101c:	d007      	beq.n	800102e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001026:	4313      	orrs	r3, r2
 8001028:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800102a:	4313      	orrs	r3, r2
 800102c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 030c 	and.w	r3, r3, #12
 8001038:	2b00      	cmp	r3, #0
 800103a:	d114      	bne.n	8001066 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800104a:	f023 0302 	bic.w	r3, r3, #2
 800104e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7e1b      	ldrb	r3, [r3, #24]
 8001054:	039a      	lsls	r2, r3, #14
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4313      	orrs	r3, r2
 8001060:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001062:	4313      	orrs	r3, r2
 8001064:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <HAL_ADC_Init+0x320>)
 800106e:	4013      	ands	r3, r2
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001076:	430b      	orrs	r3, r1
 8001078:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d10c      	bne.n	800109c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	f023 010f 	bic.w	r1, r3, #15
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	1e5a      	subs	r2, r3, #1
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	430a      	orrs	r2, r1
 8001098:	631a      	str	r2, [r3, #48]	; 0x30
 800109a:	e007      	b.n	80010ac <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 020f 	bic.w	r2, r2, #15
 80010aa:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f023 0303 	bic.w	r3, r3, #3
 80010ba:	f043 0201 	orr.w	r2, r3, #1
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
 80010c2:	e00a      	b.n	80010da <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	f023 0312 	bic.w	r3, r3, #18
 80010cc:	f043 0210 	orr.w	r2, r3, #16
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80010d4:	2301      	movs	r3, #1
 80010d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80010da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3768      	adds	r7, #104	; 0x68
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000000 	.word	0x20000000
 80010ec:	431bde83 	.word	0x431bde83
 80010f0:	50000300 	.word	0x50000300
 80010f4:	50000100 	.word	0x50000100
 80010f8:	fff0c007 	.word	0xfff0c007

080010fc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	2b00      	cmp	r3, #0
 8001114:	f040 809c 	bne.w	8001250 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <HAL_ADC_Start+0x2a>
 8001122:	2302      	movs	r3, #2
 8001124:	e097      	b.n	8001256 <HAL_ADC_Start+0x15a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f001 f898 	bl	8002264 <ADC_Enable>
 8001134:	4603      	mov	r3, r0
 8001136:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	2b00      	cmp	r3, #0
 800113c:	f040 8083 	bne.w	8001246 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001148:	f023 0301 	bic.w	r3, r3, #1
 800114c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001154:	4b42      	ldr	r3, [pc, #264]	; (8001260 <HAL_ADC_Start+0x164>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 031f 	and.w	r3, r3, #31
 800115c:	2b00      	cmp	r3, #0
 800115e:	d004      	beq.n	800116a <HAL_ADC_Start+0x6e>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001168:	d115      	bne.n	8001196 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d027      	beq.n	80011d4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800118c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001194:	e01e      	b.n	80011d4 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011aa:	d004      	beq.n	80011b6 <HAL_ADC_Start+0xba>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a2c      	ldr	r2, [pc, #176]	; (8001264 <HAL_ADC_Start+0x168>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d10e      	bne.n	80011d4 <HAL_ADC_Start+0xd8>
 80011b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d007      	beq.n	80011d4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011e0:	d106      	bne.n	80011f0 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f023 0206 	bic.w	r2, r3, #6
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	645a      	str	r2, [r3, #68]	; 0x44
 80011ee:	e002      	b.n	80011f6 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	221c      	movs	r2, #28
 8001204:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_ADC_Start+0x164>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	2b00      	cmp	r3, #0
 8001210:	d010      	beq.n	8001234 <HAL_ADC_Start+0x138>
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <HAL_ADC_Start+0x164>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 031f 	and.w	r3, r3, #31
 800121a:	2b05      	cmp	r3, #5
 800121c:	d00a      	beq.n	8001234 <HAL_ADC_Start+0x138>
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <HAL_ADC_Start+0x164>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	2b09      	cmp	r3, #9
 8001228:	d004      	beq.n	8001234 <HAL_ADC_Start+0x138>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001232:	d10f      	bne.n	8001254 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0204 	orr.w	r2, r2, #4
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	e006      	b.n	8001254 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800124e:	e001      	b.n	8001254 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001250:	2302      	movs	r3, #2
 8001252:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	50000300 	.word	0x50000300
 8001264:	50000100 	.word	0x50000100

08001268 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	2b00      	cmp	r3, #0
 8001280:	f040 80c6 	bne.w	8001410 <HAL_ADC_Start_IT+0x1a8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <HAL_ADC_Start_IT+0x2a>
 800128e:	2302      	movs	r3, #2
 8001290:	e0c1      	b.n	8001416 <HAL_ADC_Start_IT+0x1ae>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 ffe2 	bl	8002264 <ADC_Enable>
 80012a0:	4603      	mov	r3, r0
 80012a2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f040 80ad 	bne.w	8001406 <HAL_ADC_Start_IT+0x19e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012b4:	f023 0301 	bic.w	r3, r3, #1
 80012b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012c0:	4b57      	ldr	r3, [pc, #348]	; (8001420 <HAL_ADC_Start_IT+0x1b8>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 031f 	and.w	r3, r3, #31
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <HAL_ADC_Start_IT+0x6e>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d4:	d115      	bne.n	8001302 <HAL_ADC_Start_IT+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d027      	beq.n	8001340 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001300:	e01e      	b.n	8001340 <HAL_ADC_Start_IT+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001316:	d004      	beq.n	8001322 <HAL_ADC_Start_IT+0xba>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a41      	ldr	r2, [pc, #260]	; (8001424 <HAL_ADC_Start_IT+0x1bc>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d10e      	bne.n	8001340 <HAL_ADC_Start_IT+0xd8>
 8001322:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d007      	beq.n	8001340 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001338:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800134c:	d106      	bne.n	800135c <HAL_ADC_Start_IT+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f023 0206 	bic.w	r2, r3, #6
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	645a      	str	r2, [r3, #68]	; 0x44
 800135a:	e002      	b.n	8001362 <HAL_ADC_Start_IT+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	221c      	movs	r2, #28
 8001370:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	2b08      	cmp	r3, #8
 8001378:	d110      	bne.n	800139c <HAL_ADC_Start_IT+0x134>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0204 	bic.w	r2, r2, #4
 8001388:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f042 0208 	orr.w	r2, r2, #8
 8001398:	605a      	str	r2, [r3, #4]
          break;
 800139a:	e008      	b.n	80013ae <HAL_ADC_Start_IT+0x146>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 020c 	orr.w	r2, r2, #12
 80013aa:	605a      	str	r2, [r3, #4]
          break;
 80013ac:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d107      	bne.n	80013c6 <HAL_ADC_Start_IT+0x15e>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0210 	bic.w	r2, r2, #16
 80013c4:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <HAL_ADC_Start_IT+0x1b8>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d010      	beq.n	80013f4 <HAL_ADC_Start_IT+0x18c>
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <HAL_ADC_Start_IT+0x1b8>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 031f 	and.w	r3, r3, #31
 80013da:	2b05      	cmp	r3, #5
 80013dc:	d00a      	beq.n	80013f4 <HAL_ADC_Start_IT+0x18c>
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_ADC_Start_IT+0x1b8>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 031f 	and.w	r3, r3, #31
 80013e6:	2b09      	cmp	r3, #9
 80013e8:	d004      	beq.n	80013f4 <HAL_ADC_Start_IT+0x18c>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013f2:	d10f      	bne.n	8001414 <HAL_ADC_Start_IT+0x1ac>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0204 	orr.w	r2, r2, #4
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	e006      	b.n	8001414 <HAL_ADC_Start_IT+0x1ac>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800140e:	e001      	b.n	8001414 <HAL_ADC_Start_IT+0x1ac>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001410:	2302      	movs	r3, #2
 8001412:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	50000300 	.word	0x50000300
 8001424:	50000100 	.word	0x50000100

08001428 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	2b00      	cmp	r3, #0
 8001444:	f040 80b9 	bne.w	80015ba <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <HAL_ADC_Start_DMA+0x2e>
 8001452:	2302      	movs	r3, #2
 8001454:	e0b4      	b.n	80015c0 <HAL_ADC_Start_DMA+0x198>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800145e:	4b5a      	ldr	r3, [pc, #360]	; (80015c8 <HAL_ADC_Start_DMA+0x1a0>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 031f 	and.w	r3, r3, #31
 8001466:	2b00      	cmp	r3, #0
 8001468:	f040 80a0 	bne.w	80015ac <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f000 fef9 	bl	8002264 <ADC_Enable>
 8001472:	4603      	mov	r3, r0
 8001474:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001476:	7dfb      	ldrb	r3, [r7, #23]
 8001478:	2b00      	cmp	r3, #0
 800147a:	f040 8092 	bne.w	80015a2 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001486:	f023 0301 	bic.w	r3, r3, #1
 800148a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001492:	4b4d      	ldr	r3, [pc, #308]	; (80015c8 <HAL_ADC_Start_DMA+0x1a0>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 031f 	and.w	r3, r3, #31
 800149a:	2b00      	cmp	r3, #0
 800149c:	d004      	beq.n	80014a8 <HAL_ADC_Start_DMA+0x80>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a6:	d115      	bne.n	80014d4 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d027      	beq.n	8001512 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80014d2:	e01e      	b.n	8001512 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014e8:	d004      	beq.n	80014f4 <HAL_ADC_Start_DMA+0xcc>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a37      	ldr	r2, [pc, #220]	; (80015cc <HAL_ADC_Start_DMA+0x1a4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d10e      	bne.n	8001512 <HAL_ADC_Start_DMA+0xea>
 80014f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800150a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800151e:	d106      	bne.n	800152e <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001524:	f023 0206 	bic.w	r2, r3, #6
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	645a      	str	r2, [r3, #68]	; 0x44
 800152c:	e002      	b.n	8001534 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001540:	4a23      	ldr	r2, [pc, #140]	; (80015d0 <HAL_ADC_Start_DMA+0x1a8>)
 8001542:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001548:	4a22      	ldr	r2, [pc, #136]	; (80015d4 <HAL_ADC_Start_DMA+0x1ac>)
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001550:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <HAL_ADC_Start_DMA+0x1b0>)
 8001552:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	221c      	movs	r2, #28
 800155a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0210 	orr.w	r2, r2, #16
 800156a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0201 	orr.w	r2, r2, #1
 800157a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3340      	adds	r3, #64	; 0x40
 8001586:	4619      	mov	r1, r3
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f001 f880 	bl	8002690 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0204 	orr.w	r2, r2, #4
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	e00d      	b.n	80015be <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80015aa:	e008      	b.n	80015be <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80015b8:	e001      	b.n	80015be <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015ba:	2302      	movs	r3, #2
 80015bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015be:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	50000300 	.word	0x50000300
 80015cc:	50000100 	.word	0x50000100
 80015d0:	08002199 	.word	0x08002199
 80015d4:	08002213 	.word	0x08002213
 80015d8:	0800222f 	.word	0x0800222f

080015dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	2b04      	cmp	r3, #4
 8001618:	d106      	bne.n	8001628 <HAL_ADC_IRQHandler+0x30>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b04      	cmp	r3, #4
 8001626:	d00d      	beq.n	8001644 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001632:	2b08      	cmp	r3, #8
 8001634:	d17a      	bne.n	800172c <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b08      	cmp	r3, #8
 8001642:	d173      	bne.n	800172c <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	2b00      	cmp	r3, #0
 800164e:	d105      	bne.n	800165c <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800165c:	4b88      	ldr	r3, [pc, #544]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	2b00      	cmp	r3, #0
 8001666:	d010      	beq.n	800168a <HAL_ADC_IRQHandler+0x92>
 8001668:	4b85      	ldr	r3, [pc, #532]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	2b05      	cmp	r3, #5
 8001672:	d00a      	beq.n	800168a <HAL_ADC_IRQHandler+0x92>
 8001674:	4b82      	ldr	r3, [pc, #520]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 031f 	and.w	r3, r3, #31
 800167c:	2b09      	cmp	r3, #9
 800167e:	d004      	beq.n	800168a <HAL_ADC_IRQHandler+0x92>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001688:	d104      	bne.n	8001694 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	e003      	b.n	800169c <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001694:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d139      	bne.n	800171e <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d134      	bne.n	800171e <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d12d      	bne.n	800171e <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d11a      	bne.n	8001706 <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 020c 	bic.w	r2, r2, #12
 80016de:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d112      	bne.n	800171e <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f043 0201 	orr.w	r2, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	641a      	str	r2, [r3, #64]	; 0x40
 8001704:	e00b      	b.n	800171e <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f043 0210 	orr.w	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7fe fff0 	bl	8000704 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	220c      	movs	r2, #12
 800172a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0320 	and.w	r3, r3, #32
 8001736:	2b20      	cmp	r3, #32
 8001738:	d106      	bne.n	8001748 <HAL_ADC_IRQHandler+0x150>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0320 	and.w	r3, r3, #32
 8001744:	2b20      	cmp	r3, #32
 8001746:	d00f      	beq.n	8001768 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001752:	2b40      	cmp	r3, #64	; 0x40
 8001754:	f040 80a9 	bne.w	80018aa <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001762:	2b40      	cmp	r3, #64	; 0x40
 8001764:	f040 80a1 	bne.w	80018aa <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001774:	4b42      	ldr	r3, [pc, #264]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	2b00      	cmp	r3, #0
 800177e:	d010      	beq.n	80017a2 <HAL_ADC_IRQHandler+0x1aa>
 8001780:	4b3f      	ldr	r3, [pc, #252]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 031f 	and.w	r3, r3, #31
 8001788:	2b05      	cmp	r3, #5
 800178a:	d00a      	beq.n	80017a2 <HAL_ADC_IRQHandler+0x1aa>
 800178c:	4b3c      	ldr	r3, [pc, #240]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	2b09      	cmp	r3, #9
 8001796:	d004      	beq.n	80017a2 <HAL_ADC_IRQHandler+0x1aa>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017a0:	d104      	bne.n	80017ac <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	e003      	b.n	80017b4 <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80017ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d16c      	bne.n	800189c <HAL_ADC_IRQHandler+0x2a4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00b      	beq.n	80017e4 <HAL_ADC_IRQHandler+0x1ec>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d160      	bne.n	800189c <HAL_ADC_IRQHandler+0x2a4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d15b      	bne.n	800189c <HAL_ADC_IRQHandler+0x2a4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ee:	2b40      	cmp	r3, #64	; 0x40
 80017f0:	d154      	bne.n	800189c <HAL_ADC_IRQHandler+0x2a4>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80017f2:	4b23      	ldr	r3, [pc, #140]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d010      	beq.n	8001820 <HAL_ADC_IRQHandler+0x228>
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	2b06      	cmp	r3, #6
 8001808:	d00a      	beq.n	8001820 <HAL_ADC_IRQHandler+0x228>
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	2b07      	cmp	r3, #7
 8001814:	d004      	beq.n	8001820 <HAL_ADC_IRQHandler+0x228>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800181e:	d104      	bne.n	800182a <HAL_ADC_IRQHandler+0x232>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e003      	b.n	8001832 <HAL_ADC_IRQHandler+0x23a>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800182a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d12f      	bne.n	800189c <HAL_ADC_IRQHandler+0x2a4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d11c      	bne.n	8001884 <HAL_ADC_IRQHandler+0x28c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001858:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d114      	bne.n	800189c <HAL_ADC_IRQHandler+0x2a4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f043 0201 	orr.w	r2, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
 800187e:	e00d      	b.n	800189c <HAL_ADC_IRQHandler+0x2a4>
 8001880:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	f043 0210 	orr.w	r2, r3, #16
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f8cb 	bl	8001a38 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2260      	movs	r2, #96	; 0x60
 80018a8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b4:	2b80      	cmp	r3, #128	; 0x80
 80018b6:	d113      	bne.n	80018e0 <HAL_ADC_IRQHandler+0x2e8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c2:	2b80      	cmp	r3, #128	; 0x80
 80018c4:	d10c      	bne.n	80018e0 <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff fa6c 	bl	8000db0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2280      	movs	r2, #128	; 0x80
 80018de:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ee:	d115      	bne.n	800191c <HAL_ADC_IRQHandler+0x324>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018fe:	d10d      	bne.n	800191c <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f8a7 	bl	8001a60 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800191a:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800192a:	d115      	bne.n	8001958 <HAL_ADC_IRQHandler+0x360>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800193a:	d10d      	bne.n	8001958 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f893 	bl	8001a74 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001956:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b10      	cmp	r3, #16
 8001964:	d13d      	bne.n	80019e2 <HAL_ADC_IRQHandler+0x3ea>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0310 	and.w	r3, r3, #16
 8001970:	2b10      	cmp	r3, #16
 8001972:	d136      	bne.n	80019e2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001978:	2b01      	cmp	r3, #1
 800197a:	d102      	bne.n	8001982 <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 800197c:	2301      	movs	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	e019      	b.n	80019b6 <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001982:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <HAL_ADC_IRQHandler+0x43c>)
 8001984:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 031f 	and.w	r3, r3, #31
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b01      	cmp	r3, #1
 800199e:	d10a      	bne.n	80019b6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80019a0:	2301      	movs	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e007      	b.n	80019b6 <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80019b2:	2301      	movs	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d10e      	bne.n	80019da <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	f043 0202 	orr.w	r2, r3, #2
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff f9f5 	bl	8000dc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2210      	movs	r2, #16
 80019e0:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f0:	d11b      	bne.n	8001a2a <HAL_ADC_IRQHandler+0x432>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a00:	d113      	bne.n	8001a2a <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f043 0208 	orr.w	r2, r3, #8
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a22:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f811 	bl	8001a4c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	50000300 	.word	0x50000300

08001a38 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b09b      	sub	sp, #108	; 0x6c
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x22>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e2a5      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x56e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f040 8289 	bne.w	8001fd4 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d81c      	bhi.n	8001b04 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	461a      	mov	r2, r3
 8001ade:	231f      	movs	r3, #31
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	4019      	ands	r1, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa00 f203 	lsl.w	r2, r0, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	631a      	str	r2, [r3, #48]	; 0x30
 8001b02:	e063      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b09      	cmp	r3, #9
 8001b0a:	d81e      	bhi.n	8001b4a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	3b1e      	subs	r3, #30
 8001b20:	221f      	movs	r2, #31
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	4019      	ands	r1, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	3b1e      	subs	r3, #30
 8001b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	635a      	str	r2, [r3, #52]	; 0x34
 8001b48:	e040      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b0e      	cmp	r3, #14
 8001b50:	d81e      	bhi.n	8001b90 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	3b3c      	subs	r3, #60	; 0x3c
 8001b66:	221f      	movs	r2, #31
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	4019      	ands	r1, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	3b3c      	subs	r3, #60	; 0x3c
 8001b82:	fa00 f203 	lsl.w	r2, r0, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	639a      	str	r2, [r3, #56]	; 0x38
 8001b8e:	e01d      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	3b5a      	subs	r3, #90	; 0x5a
 8001ba4:	221f      	movs	r2, #31
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	4019      	ands	r1, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	3b5a      	subs	r3, #90	; 0x5a
 8001bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 80e5 	bne.w	8001da6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b09      	cmp	r3, #9
 8001be2:	d91c      	bls.n	8001c1e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6999      	ldr	r1, [r3, #24]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b1e      	subs	r3, #30
 8001bf6:	2207      	movs	r2, #7
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4019      	ands	r1, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6898      	ldr	r0, [r3, #8]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3b1e      	subs	r3, #30
 8001c10:	fa00 f203 	lsl.w	r2, r0, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	619a      	str	r2, [r3, #24]
 8001c1c:	e019      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6959      	ldr	r1, [r3, #20]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	2207      	movs	r2, #7
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	4019      	ands	r1, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	6898      	ldr	r0, [r3, #8]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	08db      	lsrs	r3, r3, #3
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d84f      	bhi.n	8001d14 <HAL_ADC_ConfigChannel+0x28c>
 8001c74:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <HAL_ADC_ConfigChannel+0x1f4>)
 8001c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7a:	bf00      	nop
 8001c7c:	08001c8d 	.word	0x08001c8d
 8001c80:	08001caf 	.word	0x08001caf
 8001c84:	08001cd1 	.word	0x08001cd1
 8001c88:	08001cf3 	.word	0x08001cf3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c92:	4b9e      	ldr	r3, [pc, #632]	; (8001f0c <HAL_ADC_ConfigChannel+0x484>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	0691      	lsls	r1, r2, #26
 8001c9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001caa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cac:	e07e      	b.n	8001dac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cb4:	4b95      	ldr	r3, [pc, #596]	; (8001f0c <HAL_ADC_ConfigChannel+0x484>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	0691      	lsls	r1, r2, #26
 8001cbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ccc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cce:	e06d      	b.n	8001dac <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001cd6:	4b8d      	ldr	r3, [pc, #564]	; (8001f0c <HAL_ADC_ConfigChannel+0x484>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	0691      	lsls	r1, r2, #26
 8001ce0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cee:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cf0:	e05c      	b.n	8001dac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cf8:	4b84      	ldr	r3, [pc, #528]	; (8001f0c <HAL_ADC_ConfigChannel+0x484>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	0691      	lsls	r1, r2, #26
 8001d02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d04:	430a      	orrs	r2, r1
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d10:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d12:	e04b      	b.n	8001dac <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	069b      	lsls	r3, r3, #26
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d107      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d36:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	069b      	lsls	r3, r3, #26
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d107      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d5a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	069b      	lsls	r3, r3, #26
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d107      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d7e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	069b      	lsls	r3, r3, #26
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d10a      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001da2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001da4:	e001      	b.n	8001daa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001da6:	bf00      	nop
 8001da8:	e000      	b.n	8001dac <HAL_ADC_ConfigChannel+0x324>
      break;
 8001daa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d108      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x344>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x344>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <HAL_ADC_ConfigChannel+0x346>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 810b 	bne.w	8001fea <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d00f      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2201      	movs	r2, #1
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	400a      	ands	r2, r1
 8001df6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001dfa:	e049      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b09      	cmp	r3, #9
 8001e1c:	d91c      	bls.n	8001e58 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6999      	ldr	r1, [r3, #24]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3b1b      	subs	r3, #27
 8001e30:	2207      	movs	r2, #7
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	4019      	ands	r1, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6898      	ldr	r0, [r3, #8]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	3b1b      	subs	r3, #27
 8001e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	619a      	str	r2, [r3, #24]
 8001e56:	e01b      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6959      	ldr	r1, [r3, #20]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	4019      	ands	r1, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	6898      	ldr	r0, [r3, #8]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	fa00 f203 	lsl.w	r2, r0, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e90:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <HAL_ADC_ConfigChannel+0x488>)
 8001e92:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d105      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d015      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001eac:	2b11      	cmp	r3, #17
 8001eae:	d105      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00b      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ec0:	2b12      	cmp	r3, #18
 8001ec2:	f040 8092 	bne.w	8001fea <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f040 808b 	bne.w	8001fea <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001edc:	d102      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x45c>
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <HAL_ADC_ConfigChannel+0x48c>)
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	e002      	b.n	8001eea <HAL_ADC_ConfigChannel+0x462>
 8001ee4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ee8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d10f      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x490>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d108      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x490>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e007      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x492>
 8001f0a:	bf00      	nop
 8001f0c:	83fff000 	.word	0x83fff000
 8001f10:	50000300 	.word	0x50000300
 8001f14:	50000100 	.word	0x50000100
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d150      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f1e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d010      	beq.n	8001f46 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d107      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x4b8>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x4b8>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x4ba>
 8001f40:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d13c      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d11d      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x502>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f56:	d118      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f62:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HAL_ADC_ConfigChannel+0x57c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a27      	ldr	r2, [pc, #156]	; (8002008 <HAL_ADC_ConfigChannel+0x580>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0c9a      	lsrs	r2, r3, #18
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f7a:	e002      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f9      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f88:	e02e      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b11      	cmp	r3, #17
 8001f90:	d10b      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x522>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f9a:	d106      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001f9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fa8:	e01e      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b12      	cmp	r3, #18
 8001fb0:	d11a      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fbc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fbe:	e013      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	f043 0220 	orr.w	r2, r3, #32
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001fd2:	e00a      	b.n	8001fea <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f043 0220 	orr.w	r2, r3, #32
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001fe6:	e000      	b.n	8001fea <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fe8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ff2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	376c      	adds	r7, #108	; 0x6c
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000000 	.word	0x20000000
 8002008:	431bde83 	.word	0x431bde83

0800200c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800200c:	b480      	push	{r7}
 800200e:	b099      	sub	sp, #100	; 0x64
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002024:	d102      	bne.n	800202c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002026:	4b5a      	ldr	r3, [pc, #360]	; (8002190 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	e002      	b.n	8002032 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800202c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002030:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0a2      	b.n	8002182 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002046:	2302      	movs	r3, #2
 8002048:	e09b      	b.n	8002182 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d17f      	bne.n	8002160 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d179      	bne.n	8002160 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800206c:	4b49      	ldr	r3, [pc, #292]	; (8002194 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800206e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d040      	beq.n	80020fa <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002078:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800208a:	035b      	lsls	r3, r3, #13
 800208c:	430b      	orrs	r3, r1
 800208e:	431a      	orrs	r2, r3
 8002090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002092:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d108      	bne.n	80020b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80020b4:	2300      	movs	r3, #0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d15c      	bne.n	8002174 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d107      	bne.n	80020d6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80020d6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d14b      	bne.n	8002174 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80020dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020e4:	f023 030f 	bic.w	r3, r3, #15
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	6811      	ldr	r1, [r2, #0]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	6892      	ldr	r2, [r2, #8]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	431a      	orrs	r2, r3
 80020f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020f6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020f8:	e03c      	b.n	8002174 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002104:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d108      	bne.n	8002126 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002126:	2300      	movs	r3, #0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d123      	bne.n	8002174 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d107      	bne.n	8002148 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002148:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800214a:	2b00      	cmp	r3, #0
 800214c:	d112      	bne.n	8002174 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800214e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002156:	f023 030f 	bic.w	r3, r3, #15
 800215a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800215c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800215e:	e009      	b.n	8002174 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f043 0220 	orr.w	r2, r3, #32
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002172:	e000      	b.n	8002176 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002174:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800217e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002182:	4618      	mov	r0, r3
 8002184:	3764      	adds	r7, #100	; 0x64
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	50000100 	.word	0x50000100
 8002194:	50000300 	.word	0x50000300

08002198 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d126      	bne.n	8002200 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d115      	bne.n	80021f8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d111      	bne.n	80021f8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d105      	bne.n	80021f8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f7fe fa83 	bl	8000704 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80021fe:	e004      	b.n	800220a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f7fe fdbb 	bl	8000d9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224c:	f043 0204 	orr.w	r2, r3, #4
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7fe fdb5 	bl	8000dc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <ADC_Enable+0x2c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <ADC_Enable+0x2c>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <ADC_Enable+0x2e>
 8002290:	2300      	movs	r3, #0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d13c      	bne.n	8002310 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <ADC_Enable+0xb8>)
 800229e:	4013      	ands	r3, r2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00d      	beq.n	80022c0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	f043 0210 	orr.w	r2, r3, #16
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b4:	f043 0201 	orr.w	r2, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e028      	b.n	8002312 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80022d0:	f7fe fd36 	bl	8000d40 <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022d6:	e014      	b.n	8002302 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022d8:	f7fe fd32 	bl	8000d40 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d90d      	bls.n	8002302 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f043 0210 	orr.w	r2, r3, #16
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f043 0201 	orr.w	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e007      	b.n	8002312 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d1e3      	bne.n	80022d8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	8000003f 	.word	0x8000003f

08002320 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b01      	cmp	r3, #1
 8002338:	d108      	bne.n	800234c <ADC_Disable+0x2c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <ADC_Disable+0x2c>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <ADC_Disable+0x2e>
 800234c:	2300      	movs	r3, #0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d040      	beq.n	80023d4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 030d 	and.w	r3, r3, #13
 800235c:	2b01      	cmp	r3, #1
 800235e:	d10f      	bne.n	8002380 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0202 	orr.w	r2, r2, #2
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2203      	movs	r2, #3
 8002376:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002378:	f7fe fce2 	bl	8000d40 <HAL_GetTick>
 800237c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800237e:	e022      	b.n	80023c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f043 0210 	orr.w	r2, r3, #16
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002390:	f043 0201 	orr.w	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e01c      	b.n	80023d6 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800239c:	f7fe fcd0 	bl	8000d40 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d90d      	bls.n	80023c6 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f043 0210 	orr.w	r2, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f043 0201 	orr.w	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e007      	b.n	80023d6 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d0e3      	beq.n	800239c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <__NVIC_SetPriorityGrouping+0x44>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023fc:	4013      	ands	r3, r2
 80023fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800240c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002412:	4a04      	ldr	r2, [pc, #16]	; (8002424 <__NVIC_SetPriorityGrouping+0x44>)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	60d3      	str	r3, [r2, #12]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <__NVIC_GetPriorityGrouping+0x18>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	f003 0307 	and.w	r3, r3, #7
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	2b00      	cmp	r3, #0
 8002454:	db0b      	blt.n	800246e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	f003 021f 	and.w	r2, r3, #31
 800245c:	4907      	ldr	r1, [pc, #28]	; (800247c <__NVIC_EnableIRQ+0x38>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	2001      	movs	r0, #1
 8002466:	fa00 f202 	lsl.w	r2, r0, r2
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000e100 	.word	0xe000e100

08002480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	6039      	str	r1, [r7, #0]
 800248a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002490:	2b00      	cmp	r3, #0
 8002492:	db0a      	blt.n	80024aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	b2da      	uxtb	r2, r3
 8002498:	490c      	ldr	r1, [pc, #48]	; (80024cc <__NVIC_SetPriority+0x4c>)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	0112      	lsls	r2, r2, #4
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	440b      	add	r3, r1
 80024a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a8:	e00a      	b.n	80024c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4908      	ldr	r1, [pc, #32]	; (80024d0 <__NVIC_SetPriority+0x50>)
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	3b04      	subs	r3, #4
 80024b8:	0112      	lsls	r2, r2, #4
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	440b      	add	r3, r1
 80024be:	761a      	strb	r2, [r3, #24]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000e100 	.word	0xe000e100
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	; 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f1c3 0307 	rsb	r3, r3, #7
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	bf28      	it	cs
 80024f2:	2304      	movcs	r3, #4
 80024f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3304      	adds	r3, #4
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d902      	bls.n	8002504 <NVIC_EncodePriority+0x30>
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3b03      	subs	r3, #3
 8002502:	e000      	b.n	8002506 <NVIC_EncodePriority+0x32>
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	f04f 32ff 	mov.w	r2, #4294967295
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	401a      	ands	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800251c:	f04f 31ff 	mov.w	r1, #4294967295
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	43d9      	mvns	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	4313      	orrs	r3, r2
         );
}
 800252e:	4618      	mov	r0, r3
 8002530:	3724      	adds	r7, #36	; 0x24
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800254c:	d301      	bcc.n	8002552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254e:	2301      	movs	r3, #1
 8002550:	e00f      	b.n	8002572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <SysTick_Config+0x40>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255a:	210f      	movs	r1, #15
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	f7ff ff8e 	bl	8002480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <SysTick_Config+0x40>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <SysTick_Config+0x40>)
 800256c:	2207      	movs	r2, #7
 800256e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	e000e010 	.word	0xe000e010

08002580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff29 	bl	80023e0 <__NVIC_SetPriorityGrouping>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a8:	f7ff ff3e 	bl	8002428 <__NVIC_GetPriorityGrouping>
 80025ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	6978      	ldr	r0, [r7, #20]
 80025b4:	f7ff ff8e 	bl	80024d4 <NVIC_EncodePriority>
 80025b8:	4602      	mov	r2, r0
 80025ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff5d 	bl	8002480 <__NVIC_SetPriority>
}
 80025c6:	bf00      	nop
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4603      	mov	r3, r0
 80025d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff31 	bl	8002444 <__NVIC_EnableIRQ>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff ffa2 	bl	800253c <SysTick_Config>
 80025f8:	4603      	mov	r3, r0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e037      	b.n	8002688 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2202      	movs	r2, #2
 800261c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800262e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002632:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800263c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4313      	orrs	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f9b8 	bl	80029e0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}  
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_DMA_Start_IT+0x20>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e04a      	b.n	8002746 <HAL_DMA_Start_IT+0xb6>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d13a      	bne.n	8002738 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f94b 	bl	8002982 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 020e 	orr.w	r2, r2, #14
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	e00f      	b.n	8002726 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 020a 	orr.w	r2, r2, #10
 8002714:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0204 	bic.w	r2, r2, #4
 8002724:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0201 	orr.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e005      	b.n	8002744 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002740:	2302      	movs	r3, #2
 8002742:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002744:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800275c:	2b02      	cmp	r3, #2
 800275e:	d008      	beq.n	8002772 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2204      	movs	r2, #4
 8002764:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e020      	b.n	80027b4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 020e 	bic.w	r2, r2, #14
 8002780:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f202 	lsl.w	r2, r1, r2
 80027a0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d005      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2204      	movs	r2, #4
 80027da:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e027      	b.n	8002832 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 020e 	bic.w	r2, r2, #14
 80027f0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0201 	bic.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	2101      	movs	r1, #1
 800280c:	fa01 f202 	lsl.w	r2, r1, r2
 8002810:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	4798      	blx	r3
    } 
  }
  return status;
 8002832:	7bfb      	ldrb	r3, [r7, #15]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	2204      	movs	r2, #4
 800285a:	409a      	lsls	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d024      	beq.n	80028ae <HAL_DMA_IRQHandler+0x72>
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d01f      	beq.n	80028ae <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	2b00      	cmp	r3, #0
 800287a:	d107      	bne.n	800288c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0204 	bic.w	r2, r2, #4
 800288a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002894:	2104      	movs	r1, #4
 8002896:	fa01 f202 	lsl.w	r2, r1, r2
 800289a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d06a      	beq.n	800297a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80028ac:	e065      	b.n	800297a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	2202      	movs	r2, #2
 80028b4:	409a      	lsls	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d02c      	beq.n	8002918 <HAL_DMA_IRQHandler+0xdc>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d027      	beq.n	8002918 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10b      	bne.n	80028ee <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 020a 	bic.w	r2, r2, #10
 80028e4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	2102      	movs	r1, #2
 80028f8:	fa01 f202 	lsl.w	r2, r1, r2
 80028fc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	2b00      	cmp	r3, #0
 800290c:	d035      	beq.n	800297a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002916:	e030      	b.n	800297a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	2208      	movs	r2, #8
 800291e:	409a      	lsls	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d028      	beq.n	800297a <HAL_DMA_IRQHandler+0x13e>
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d023      	beq.n	800297a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 020e 	bic.w	r2, r2, #14
 8002940:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294a:	2101      	movs	r1, #1
 800294c:	fa01 f202 	lsl.w	r2, r1, r2
 8002950:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	2b00      	cmp	r3, #0
 800296e:	d004      	beq.n	800297a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
    }
  }
}  
 8002978:	e7ff      	b.n	800297a <HAL_DMA_IRQHandler+0x13e>
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002998:	2101      	movs	r1, #1
 800299a:	fa01 f202 	lsl.w	r2, r1, r2
 800299e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b10      	cmp	r3, #16
 80029ae:	d108      	bne.n	80029c2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029c0:	e007      	b.n	80029d2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	60da      	str	r2, [r3, #12]
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <DMA_CalcBaseAndBitshift+0x34>)
 80029f0:	4413      	add	r3, r2
 80029f2:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <DMA_CalcBaseAndBitshift+0x38>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	009a      	lsls	r2, r3, #2
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a06      	ldr	r2, [pc, #24]	; (8002a1c <DMA_CalcBaseAndBitshift+0x3c>)
 8002a04:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	bffdfff8 	.word	0xbffdfff8
 8002a18:	cccccccd 	.word	0xcccccccd
 8002a1c:	40020000 	.word	0x40020000

08002a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2e:	e14e      	b.n	8002cce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	2101      	movs	r1, #1
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8140 	beq.w	8002cc8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d00b      	beq.n	8002a68 <HAL_GPIO_Init+0x48>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d007      	beq.n	8002a68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a5c:	2b11      	cmp	r3, #17
 8002a5e:	d003      	beq.n	8002a68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b12      	cmp	r3, #18
 8002a66:	d130      	bne.n	8002aca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	2203      	movs	r2, #3
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	f003 0201 	and.w	r2, r3, #1
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0xea>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b12      	cmp	r3, #18
 8002b08:	d123      	bne.n	8002b52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	08da      	lsrs	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3208      	adds	r2, #8
 8002b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	220f      	movs	r2, #15
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	08da      	lsrs	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3208      	adds	r2, #8
 8002b4c:	6939      	ldr	r1, [r7, #16]
 8002b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0203 	and.w	r2, r3, #3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 809a 	beq.w	8002cc8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b94:	4b55      	ldr	r3, [pc, #340]	; (8002cec <HAL_GPIO_Init+0x2cc>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	4a54      	ldr	r2, [pc, #336]	; (8002cec <HAL_GPIO_Init+0x2cc>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6193      	str	r3, [r2, #24]
 8002ba0:	4b52      	ldr	r3, [pc, #328]	; (8002cec <HAL_GPIO_Init+0x2cc>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bac:	4a50      	ldr	r2, [pc, #320]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	089b      	lsrs	r3, r3, #2
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	220f      	movs	r2, #15
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bd6:	d013      	beq.n	8002c00 <HAL_GPIO_Init+0x1e0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a46      	ldr	r2, [pc, #280]	; (8002cf4 <HAL_GPIO_Init+0x2d4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d00d      	beq.n	8002bfc <HAL_GPIO_Init+0x1dc>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a45      	ldr	r2, [pc, #276]	; (8002cf8 <HAL_GPIO_Init+0x2d8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d007      	beq.n	8002bf8 <HAL_GPIO_Init+0x1d8>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a44      	ldr	r2, [pc, #272]	; (8002cfc <HAL_GPIO_Init+0x2dc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d101      	bne.n	8002bf4 <HAL_GPIO_Init+0x1d4>
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e006      	b.n	8002c02 <HAL_GPIO_Init+0x1e2>
 8002bf4:	2305      	movs	r3, #5
 8002bf6:	e004      	b.n	8002c02 <HAL_GPIO_Init+0x1e2>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e002      	b.n	8002c02 <HAL_GPIO_Init+0x1e2>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <HAL_GPIO_Init+0x1e2>
 8002c00:	2300      	movs	r3, #0
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	f002 0203 	and.w	r2, r2, #3
 8002c08:	0092      	lsls	r2, r2, #2
 8002c0a:	4093      	lsls	r3, r2
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c12:	4937      	ldr	r1, [pc, #220]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	3302      	adds	r3, #2
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c20:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <HAL_GPIO_Init+0x2e0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c44:	4a2e      	ldr	r2, [pc, #184]	; (8002d00 <HAL_GPIO_Init+0x2e0>)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c4a:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <HAL_GPIO_Init+0x2e0>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c6e:	4a24      	ldr	r2, [pc, #144]	; (8002d00 <HAL_GPIO_Init+0x2e0>)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c74:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <HAL_GPIO_Init+0x2e0>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c98:	4a19      	ldr	r2, [pc, #100]	; (8002d00 <HAL_GPIO_Init+0x2e0>)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_GPIO_Init+0x2e0>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cc2:	4a0f      	ldr	r2, [pc, #60]	; (8002d00 <HAL_GPIO_Init+0x2e0>)
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f47f aea9 	bne.w	8002a30 <HAL_GPIO_Init+0x10>
  }
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	48000400 	.word	0x48000400
 8002cf8:	48000800 	.word	0x48000800
 8002cfc:	48000c00 	.word	0x48000c00
 8002d00:	40010400 	.word	0x40010400

08002d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f000 bef4 	b.w	8003b06 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 816a 	beq.w	8003002 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d2e:	4bb3      	ldr	r3, [pc, #716]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d00c      	beq.n	8002d54 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d3a:	4bb0      	ldr	r3, [pc, #704]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d159      	bne.n	8002dfa <HAL_RCC_OscConfig+0xf6>
 8002d46:	4bad      	ldr	r3, [pc, #692]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d52:	d152      	bne.n	8002dfa <HAL_RCC_OscConfig+0xf6>
 8002d54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d68:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6c:	fab3 f383 	clz	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d102      	bne.n	8002d86 <HAL_RCC_OscConfig+0x82>
 8002d80:	4b9e      	ldr	r3, [pc, #632]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	e015      	b.n	8002db2 <HAL_RCC_OscConfig+0xae>
 8002d86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d8a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002d9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d9e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002da2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002dae:	4b93      	ldr	r3, [pc, #588]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002db6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002dba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002dbe:	fa92 f2a2 	rbit	r2, r2
 8002dc2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002dc6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002dca:	fab2 f282 	clz	r2, r2
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f042 0220 	orr.w	r2, r2, #32
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	f002 021f 	and.w	r2, r2, #31
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 810c 	beq.w	8003000 <HAL_RCC_OscConfig+0x2fc>
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f040 8106 	bne.w	8003000 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	f000 be86 	b.w	8003b06 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e04:	d106      	bne.n	8002e14 <HAL_RCC_OscConfig+0x110>
 8002e06:	4b7d      	ldr	r3, [pc, #500]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7c      	ldr	r2, [pc, #496]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e030      	b.n	8002e76 <HAL_RCC_OscConfig+0x172>
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x134>
 8002e1e:	4b77      	ldr	r3, [pc, #476]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a76      	ldr	r2, [pc, #472]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b74      	ldr	r3, [pc, #464]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a73      	ldr	r2, [pc, #460]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e01e      	b.n	8002e76 <HAL_RCC_OscConfig+0x172>
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e42:	d10c      	bne.n	8002e5e <HAL_RCC_OscConfig+0x15a>
 8002e44:	4b6d      	ldr	r3, [pc, #436]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a6c      	ldr	r2, [pc, #432]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002e4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b6a      	ldr	r3, [pc, #424]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a69      	ldr	r2, [pc, #420]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	e00b      	b.n	8002e76 <HAL_RCC_OscConfig+0x172>
 8002e5e:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a66      	ldr	r2, [pc, #408]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	4b64      	ldr	r3, [pc, #400]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a63      	ldr	r2, [pc, #396]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e74:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e76:	4b61      	ldr	r3, [pc, #388]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	f023 020f 	bic.w	r2, r3, #15
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	495d      	ldr	r1, [pc, #372]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d059      	beq.n	8002f48 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7fd ff54 	bl	8000d40 <HAL_GetTick>
 8002e98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e9e:	f7fd ff4f 	bl	8000d40 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d902      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	f000 be29 	b.w	8003b06 <HAL_RCC_OscConfig+0xe02>
 8002eb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eb8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002ec8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ecc:	fab3 f383 	clz	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d102      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x1e2>
 8002ee0:	4b46      	ldr	r3, [pc, #280]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	e015      	b.n	8002f12 <HAL_RCC_OscConfig+0x20e>
 8002ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002efe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002f02:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002f0e:	4b3b      	ldr	r3, [pc, #236]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f16:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002f1a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002f1e:	fa92 f2a2 	rbit	r2, r2
 8002f22:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002f26:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002f2a:	fab2 f282 	clz	r2, r2
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	f042 0220 	orr.w	r2, r2, #32
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	f002 021f 	and.w	r2, r2, #31
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0ab      	beq.n	8002e9e <HAL_RCC_OscConfig+0x19a>
 8002f46:	e05c      	b.n	8003002 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fd fefa 	bl	8000d40 <HAL_GetTick>
 8002f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f52:	f7fd fef5 	bl	8000d40 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d902      	bls.n	8002f68 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	f000 bdcf 	b.w	8003b06 <HAL_RCC_OscConfig+0xe02>
 8002f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f6c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002f7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d102      	bne.n	8002f9a <HAL_RCC_OscConfig+0x296>
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	e015      	b.n	8002fc6 <HAL_RCC_OscConfig+0x2c2>
 8002f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f9e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fb2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002fb6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <HAL_RCC_OscConfig+0x2f8>)
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002fce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002fd2:	fa92 f2a2 	rbit	r2, r2
 8002fd6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002fda:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002fde:	fab2 f282 	clz	r2, r2
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	f042 0220 	orr.w	r2, r2, #32
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	f002 021f 	and.w	r2, r2, #31
 8002fee:	2101      	movs	r1, #1
 8002ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1ab      	bne.n	8002f52 <HAL_RCC_OscConfig+0x24e>
 8002ffa:	e002      	b.n	8003002 <HAL_RCC_OscConfig+0x2fe>
 8002ffc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003002:	1d3b      	adds	r3, r7, #4
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 816f 	beq.w	80032f0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003012:	4bd0      	ldr	r3, [pc, #832]	; (8003354 <HAL_RCC_OscConfig+0x650>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800301e:	4bcd      	ldr	r3, [pc, #820]	; (8003354 <HAL_RCC_OscConfig+0x650>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b08      	cmp	r3, #8
 8003028:	d16c      	bne.n	8003104 <HAL_RCC_OscConfig+0x400>
 800302a:	4bca      	ldr	r3, [pc, #808]	; (8003354 <HAL_RCC_OscConfig+0x650>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d166      	bne.n	8003104 <HAL_RCC_OscConfig+0x400>
 8003036:	2302      	movs	r3, #2
 8003038:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003048:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304c:	fab3 f383 	clz	r3, r3
 8003050:	b2db      	uxtb	r3, r3
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b01      	cmp	r3, #1
 800305e:	d102      	bne.n	8003066 <HAL_RCC_OscConfig+0x362>
 8003060:	4bbc      	ldr	r3, [pc, #752]	; (8003354 <HAL_RCC_OscConfig+0x650>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	e013      	b.n	800308e <HAL_RCC_OscConfig+0x38a>
 8003066:	2302      	movs	r3, #2
 8003068:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003078:	2302      	movs	r3, #2
 800307a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800307e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800308a:	4bb2      	ldr	r3, [pc, #712]	; (8003354 <HAL_RCC_OscConfig+0x650>)
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	2202      	movs	r2, #2
 8003090:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003094:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003098:	fa92 f2a2 	rbit	r2, r2
 800309c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80030a0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80030a4:	fab2 f282 	clz	r2, r2
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	f042 0220 	orr.w	r2, r2, #32
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	f002 021f 	and.w	r2, r2, #31
 80030b4:	2101      	movs	r1, #1
 80030b6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <HAL_RCC_OscConfig+0x3cc>
 80030c0:	1d3b      	adds	r3, r7, #4
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d002      	beq.n	80030d0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f000 bd1b 	b.w	8003b06 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d0:	4ba0      	ldr	r3, [pc, #640]	; (8003354 <HAL_RCC_OscConfig+0x650>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d8:	1d3b      	adds	r3, r7, #4
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	21f8      	movs	r1, #248	; 0xf8
 80030e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80030e8:	fa91 f1a1 	rbit	r1, r1
 80030ec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80030f0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80030f4:	fab1 f181 	clz	r1, r1
 80030f8:	b2c9      	uxtb	r1, r1
 80030fa:	408b      	lsls	r3, r1
 80030fc:	4995      	ldr	r1, [pc, #596]	; (8003354 <HAL_RCC_OscConfig+0x650>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003102:	e0f5      	b.n	80032f0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003104:	1d3b      	adds	r3, r7, #4
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 8085 	beq.w	800321a <HAL_RCC_OscConfig+0x516>
 8003110:	2301      	movs	r3, #1
 8003112:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800311a:	fa93 f3a3 	rbit	r3, r3
 800311e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003122:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003126:	fab3 f383 	clz	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003130:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	461a      	mov	r2, r3
 8003138:	2301      	movs	r3, #1
 800313a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fd fe00 	bl	8000d40 <HAL_GetTick>
 8003140:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003144:	e00a      	b.n	800315c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003146:	f7fd fdfb 	bl	8000d40 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d902      	bls.n	800315c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	f000 bcd5 	b.w	8003b06 <HAL_RCC_OscConfig+0xe02>
 800315c:	2302      	movs	r3, #2
 800315e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800316e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d102      	bne.n	800318c <HAL_RCC_OscConfig+0x488>
 8003186:	4b73      	ldr	r3, [pc, #460]	; (8003354 <HAL_RCC_OscConfig+0x650>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	e013      	b.n	80031b4 <HAL_RCC_OscConfig+0x4b0>
 800318c:	2302      	movs	r3, #2
 800318e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800319e:	2302      	movs	r3, #2
 80031a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80031a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80031a8:	fa93 f3a3 	rbit	r3, r3
 80031ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80031b0:	4b68      	ldr	r3, [pc, #416]	; (8003354 <HAL_RCC_OscConfig+0x650>)
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	2202      	movs	r2, #2
 80031b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80031ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80031be:	fa92 f2a2 	rbit	r2, r2
 80031c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80031c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80031ca:	fab2 f282 	clz	r2, r2
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	f042 0220 	orr.w	r2, r2, #32
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	f002 021f 	and.w	r2, r2, #31
 80031da:	2101      	movs	r1, #1
 80031dc:	fa01 f202 	lsl.w	r2, r1, r2
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0af      	beq.n	8003146 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	4b5b      	ldr	r3, [pc, #364]	; (8003354 <HAL_RCC_OscConfig+0x650>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	21f8      	movs	r1, #248	; 0xf8
 80031f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80031fe:	fa91 f1a1 	rbit	r1, r1
 8003202:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003206:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800320a:	fab1 f181 	clz	r1, r1
 800320e:	b2c9      	uxtb	r1, r1
 8003210:	408b      	lsls	r3, r1
 8003212:	4950      	ldr	r1, [pc, #320]	; (8003354 <HAL_RCC_OscConfig+0x650>)
 8003214:	4313      	orrs	r3, r2
 8003216:	600b      	str	r3, [r1, #0]
 8003218:	e06a      	b.n	80032f0 <HAL_RCC_OscConfig+0x5ec>
 800321a:	2301      	movs	r3, #1
 800321c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003224:	fa93 f3a3 	rbit	r3, r3
 8003228:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800322c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003230:	fab3 f383 	clz	r3, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800323a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	461a      	mov	r2, r3
 8003242:	2300      	movs	r3, #0
 8003244:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003246:	f7fd fd7b 	bl	8000d40 <HAL_GetTick>
 800324a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324e:	e00a      	b.n	8003266 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003250:	f7fd fd76 	bl	8000d40 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d902      	bls.n	8003266 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	f000 bc50 	b.w	8003b06 <HAL_RCC_OscConfig+0xe02>
 8003266:	2302      	movs	r3, #2
 8003268:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d102      	bne.n	8003296 <HAL_RCC_OscConfig+0x592>
 8003290:	4b30      	ldr	r3, [pc, #192]	; (8003354 <HAL_RCC_OscConfig+0x650>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	e013      	b.n	80032be <HAL_RCC_OscConfig+0x5ba>
 8003296:	2302      	movs	r3, #2
 8003298:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80032a8:	2302      	movs	r3, #2
 80032aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80032ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80032b2:	fa93 f3a3 	rbit	r3, r3
 80032b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80032ba:	4b26      	ldr	r3, [pc, #152]	; (8003354 <HAL_RCC_OscConfig+0x650>)
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	2202      	movs	r2, #2
 80032c0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80032c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80032c8:	fa92 f2a2 	rbit	r2, r2
 80032cc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80032d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80032d4:	fab2 f282 	clz	r2, r2
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	f042 0220 	orr.w	r2, r2, #32
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	f002 021f 	and.w	r2, r2, #31
 80032e4:	2101      	movs	r1, #1
 80032e6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1af      	bne.n	8003250 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f0:	1d3b      	adds	r3, r7, #4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80da 	beq.w	80034b4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003300:	1d3b      	adds	r3, r7, #4
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d069      	beq.n	80033de <HAL_RCC_OscConfig+0x6da>
 800330a:	2301      	movs	r3, #1
 800330c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800331c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003320:	fab3 f383 	clz	r3, r3
 8003324:	b2db      	uxtb	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_RCC_OscConfig+0x654>)
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	461a      	mov	r2, r3
 8003330:	2301      	movs	r3, #1
 8003332:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003334:	f7fd fd04 	bl	8000d40 <HAL_GetTick>
 8003338:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333c:	e00e      	b.n	800335c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800333e:	f7fd fcff 	bl	8000d40 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d906      	bls.n	800335c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e3d9      	b.n	8003b06 <HAL_RCC_OscConfig+0xe02>
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
 8003358:	10908120 	.word	0x10908120
 800335c:	2302      	movs	r3, #2
 800335e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003366:	fa93 f3a3 	rbit	r3, r3
 800336a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800336e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003372:	2202      	movs	r2, #2
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	fa93 f2a3 	rbit	r2, r3
 8003380:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800338a:	2202      	movs	r2, #2
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	fa93 f2a3 	rbit	r2, r3
 8003398:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800339c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	4ba5      	ldr	r3, [pc, #660]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 80033a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80033a6:	2102      	movs	r1, #2
 80033a8:	6019      	str	r1, [r3, #0]
 80033aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	fa93 f1a3 	rbit	r1, r3
 80033b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033b8:	6019      	str	r1, [r3, #0]
  return result;
 80033ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	fab3 f383 	clz	r3, r3
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2101      	movs	r1, #1
 80033d2:	fa01 f303 	lsl.w	r3, r1, r3
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0b0      	beq.n	800333e <HAL_RCC_OscConfig+0x63a>
 80033dc:	e06a      	b.n	80034b4 <HAL_RCC_OscConfig+0x7b0>
 80033de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033e2:	2201      	movs	r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	fa93 f2a3 	rbit	r2, r3
 80033f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033f4:	601a      	str	r2, [r3, #0]
  return result;
 80033f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033fa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033fc:	fab3 f383 	clz	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	4b8c      	ldr	r3, [pc, #560]	; (8003638 <HAL_RCC_OscConfig+0x934>)
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	461a      	mov	r2, r3
 800340c:	2300      	movs	r3, #0
 800340e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003410:	f7fd fc96 	bl	8000d40 <HAL_GetTick>
 8003414:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003418:	e009      	b.n	800342e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800341a:	f7fd fc91 	bl	8000d40 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e36b      	b.n	8003b06 <HAL_RCC_OscConfig+0xe02>
 800342e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003432:	2202      	movs	r2, #2
 8003434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	fa93 f2a3 	rbit	r2, r3
 8003440:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800344a:	2202      	movs	r2, #2
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	fa93 f2a3 	rbit	r2, r3
 8003458:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003462:	2202      	movs	r2, #2
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	fa93 f2a3 	rbit	r2, r3
 8003470:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003474:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003476:	4b6f      	ldr	r3, [pc, #444]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 8003478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800347a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800347e:	2102      	movs	r1, #2
 8003480:	6019      	str	r1, [r3, #0]
 8003482:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	fa93 f1a3 	rbit	r1, r3
 800348c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003490:	6019      	str	r1, [r3, #0]
  return result;
 8003492:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	fab3 f383 	clz	r3, r3
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	2101      	movs	r1, #1
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1b2      	bne.n	800341a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 8158 	beq.w	8003774 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ca:	4b5a      	ldr	r3, [pc, #360]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d112      	bne.n	80034fc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d6:	4b57      	ldr	r3, [pc, #348]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	4a56      	ldr	r2, [pc, #344]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e0:	61d3      	str	r3, [r2, #28]
 80034e2:	4b54      	ldr	r3, [pc, #336]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80034ea:	f107 0308 	add.w	r3, r7, #8
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	f107 0308 	add.w	r3, r7, #8
 80034f4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fc:	4b4f      	ldr	r3, [pc, #316]	; (800363c <HAL_RCC_OscConfig+0x938>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d11a      	bne.n	800353e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003508:	4b4c      	ldr	r3, [pc, #304]	; (800363c <HAL_RCC_OscConfig+0x938>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a4b      	ldr	r2, [pc, #300]	; (800363c <HAL_RCC_OscConfig+0x938>)
 800350e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003512:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003514:	f7fd fc14 	bl	8000d40 <HAL_GetTick>
 8003518:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351c:	e009      	b.n	8003532 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351e:	f7fd fc0f 	bl	8000d40 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	; 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e2e9      	b.n	8003b06 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	4b42      	ldr	r3, [pc, #264]	; (800363c <HAL_RCC_OscConfig+0x938>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0ef      	beq.n	800351e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800353e:	1d3b      	adds	r3, r7, #4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d106      	bne.n	8003556 <HAL_RCC_OscConfig+0x852>
 8003548:	4b3a      	ldr	r3, [pc, #232]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	4a39      	ldr	r2, [pc, #228]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6213      	str	r3, [r2, #32]
 8003554:	e02f      	b.n	80035b6 <HAL_RCC_OscConfig+0x8b2>
 8003556:	1d3b      	adds	r3, r7, #4
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10c      	bne.n	800357a <HAL_RCC_OscConfig+0x876>
 8003560:	4b34      	ldr	r3, [pc, #208]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	4a33      	ldr	r2, [pc, #204]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 8003566:	f023 0301 	bic.w	r3, r3, #1
 800356a:	6213      	str	r3, [r2, #32]
 800356c:	4b31      	ldr	r3, [pc, #196]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	4a30      	ldr	r2, [pc, #192]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 8003572:	f023 0304 	bic.w	r3, r3, #4
 8003576:	6213      	str	r3, [r2, #32]
 8003578:	e01d      	b.n	80035b6 <HAL_RCC_OscConfig+0x8b2>
 800357a:	1d3b      	adds	r3, r7, #4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	2b05      	cmp	r3, #5
 8003582:	d10c      	bne.n	800359e <HAL_RCC_OscConfig+0x89a>
 8003584:	4b2b      	ldr	r3, [pc, #172]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	4a2a      	ldr	r2, [pc, #168]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 800358a:	f043 0304 	orr.w	r3, r3, #4
 800358e:	6213      	str	r3, [r2, #32]
 8003590:	4b28      	ldr	r3, [pc, #160]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	4a27      	ldr	r2, [pc, #156]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6213      	str	r3, [r2, #32]
 800359c:	e00b      	b.n	80035b6 <HAL_RCC_OscConfig+0x8b2>
 800359e:	4b25      	ldr	r3, [pc, #148]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	4a24      	ldr	r2, [pc, #144]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	6213      	str	r3, [r2, #32]
 80035aa:	4b22      	ldr	r3, [pc, #136]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	4a21      	ldr	r2, [pc, #132]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 80035b0:	f023 0304 	bic.w	r3, r3, #4
 80035b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d06b      	beq.n	8003698 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c0:	f7fd fbbe 	bl	8000d40 <HAL_GetTick>
 80035c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c8:	e00b      	b.n	80035e2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ca:	f7fd fbb9 	bl	8000d40 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e291      	b.n	8003b06 <HAL_RCC_OscConfig+0xe02>
 80035e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80035e6:	2202      	movs	r2, #2
 80035e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	fa93 f2a3 	rbit	r2, r3
 80035f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035fe:	2202      	movs	r2, #2
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	fa93 f2a3 	rbit	r2, r3
 800360c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003610:	601a      	str	r2, [r3, #0]
  return result;
 8003612:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003616:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003618:	fab3 f383 	clz	r3, r3
 800361c:	b2db      	uxtb	r3, r3
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f043 0302 	orr.w	r3, r3, #2
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d109      	bne.n	8003640 <HAL_RCC_OscConfig+0x93c>
 800362c:	4b01      	ldr	r3, [pc, #4]	; (8003634 <HAL_RCC_OscConfig+0x930>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	e014      	b.n	800365c <HAL_RCC_OscConfig+0x958>
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000
 8003638:	10908120 	.word	0x10908120
 800363c:	40007000 	.word	0x40007000
 8003640:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003644:	2202      	movs	r2, #2
 8003646:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	fa93 f2a3 	rbit	r2, r3
 8003652:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	4bbb      	ldr	r3, [pc, #748]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003660:	2102      	movs	r1, #2
 8003662:	6011      	str	r1, [r2, #0]
 8003664:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	fa92 f1a2 	rbit	r1, r2
 800366e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003672:	6011      	str	r1, [r2, #0]
  return result;
 8003674:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003678:	6812      	ldr	r2, [r2, #0]
 800367a:	fab2 f282 	clz	r2, r2
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	f002 021f 	and.w	r2, r2, #31
 800368a:	2101      	movs	r1, #1
 800368c:	fa01 f202 	lsl.w	r2, r1, r2
 8003690:	4013      	ands	r3, r2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d099      	beq.n	80035ca <HAL_RCC_OscConfig+0x8c6>
 8003696:	e063      	b.n	8003760 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003698:	f7fd fb52 	bl	8000d40 <HAL_GetTick>
 800369c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a0:	e00b      	b.n	80036ba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7fd fb4d 	bl	8000d40 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e225      	b.n	8003b06 <HAL_RCC_OscConfig+0xe02>
 80036ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80036be:	2202      	movs	r2, #2
 80036c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	fa93 f2a3 	rbit	r2, r3
 80036cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036d6:	2202      	movs	r2, #2
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	fa93 f2a3 	rbit	r2, r3
 80036e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036e8:	601a      	str	r2, [r3, #0]
  return result;
 80036ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f0:	fab3 f383 	clz	r3, r3
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d102      	bne.n	800370a <HAL_RCC_OscConfig+0xa06>
 8003704:	4b90      	ldr	r3, [pc, #576]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	e00d      	b.n	8003726 <HAL_RCC_OscConfig+0xa22>
 800370a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800370e:	2202      	movs	r2, #2
 8003710:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	fa93 f2a3 	rbit	r2, r3
 800371c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	4b89      	ldr	r3, [pc, #548]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800372a:	2102      	movs	r1, #2
 800372c:	6011      	str	r1, [r2, #0]
 800372e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	fa92 f1a2 	rbit	r1, r2
 8003738:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800373c:	6011      	str	r1, [r2, #0]
  return result;
 800373e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	fab2 f282 	clz	r2, r2
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	f002 021f 	and.w	r2, r2, #31
 8003754:	2101      	movs	r1, #1
 8003756:	fa01 f202 	lsl.w	r2, r1, r2
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1a0      	bne.n	80036a2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003760:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003764:	2b01      	cmp	r3, #1
 8003766:	d105      	bne.n	8003774 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003768:	4b77      	ldr	r3, [pc, #476]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	4a76      	ldr	r2, [pc, #472]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 800376e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003772:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003774:	1d3b      	adds	r3, r7, #4
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 81c2 	beq.w	8003b04 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003780:	4b71      	ldr	r3, [pc, #452]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	2b08      	cmp	r3, #8
 800378a:	f000 819c 	beq.w	8003ac6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800378e:	1d3b      	adds	r3, r7, #4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	2b02      	cmp	r3, #2
 8003796:	f040 8114 	bne.w	80039c2 <HAL_RCC_OscConfig+0xcbe>
 800379a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800379e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	fa93 f2a3 	rbit	r2, r3
 80037ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80037b2:	601a      	str	r2, [r3, #0]
  return result;
 80037b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80037b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	461a      	mov	r2, r3
 80037cc:	2300      	movs	r3, #0
 80037ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fd fab6 	bl	8000d40 <HAL_GetTick>
 80037d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d8:	e009      	b.n	80037ee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037da:	f7fd fab1 	bl	8000d40 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e18b      	b.n	8003b06 <HAL_RCC_OscConfig+0xe02>
 80037ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	fa93 f2a3 	rbit	r2, r3
 8003802:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003806:	601a      	str	r2, [r3, #0]
  return result;
 8003808:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800380c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	b2db      	uxtb	r3, r3
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b01      	cmp	r3, #1
 8003820:	d102      	bne.n	8003828 <HAL_RCC_OscConfig+0xb24>
 8003822:	4b49      	ldr	r3, [pc, #292]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	e01b      	b.n	8003860 <HAL_RCC_OscConfig+0xb5c>
 8003828:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800382c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	fa93 f2a3 	rbit	r2, r3
 800383c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003846:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	fa93 f2a3 	rbit	r2, r3
 8003856:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	4b3a      	ldr	r3, [pc, #232]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003864:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003868:	6011      	str	r1, [r2, #0]
 800386a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	fa92 f1a2 	rbit	r1, r2
 8003874:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003878:	6011      	str	r1, [r2, #0]
  return result;
 800387a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	fab2 f282 	clz	r2, r2
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	f042 0220 	orr.w	r2, r2, #32
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	f002 021f 	and.w	r2, r2, #31
 8003890:	2101      	movs	r1, #1
 8003892:	fa01 f202 	lsl.w	r2, r1, r2
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d19e      	bne.n	80037da <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800389c:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038a4:	1d3b      	adds	r3, r7, #4
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	430b      	orrs	r3, r1
 80038b2:	4925      	ldr	r1, [pc, #148]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	604b      	str	r3, [r1, #4]
 80038b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	fa93 f2a3 	rbit	r2, r3
 80038cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038d0:	601a      	str	r2, [r3, #0]
  return result;
 80038d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	461a      	mov	r2, r3
 80038ea:	2301      	movs	r3, #1
 80038ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ee:	f7fd fa27 	bl	8000d40 <HAL_GetTick>
 80038f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f6:	e009      	b.n	800390c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f8:	f7fd fa22 	bl	8000d40 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e0fc      	b.n	8003b06 <HAL_RCC_OscConfig+0xe02>
 800390c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003910:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	fa93 f2a3 	rbit	r2, r3
 8003920:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003924:	601a      	str	r2, [r3, #0]
  return result;
 8003926:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800392a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800392c:	fab3 f383 	clz	r3, r3
 8003930:	b2db      	uxtb	r3, r3
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d105      	bne.n	800394c <HAL_RCC_OscConfig+0xc48>
 8003940:	4b01      	ldr	r3, [pc, #4]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	e01e      	b.n	8003984 <HAL_RCC_OscConfig+0xc80>
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003950:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003956:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	fa93 f2a3 	rbit	r2, r3
 8003960:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800396a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	fa93 f2a3 	rbit	r2, r3
 800397a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	4b63      	ldr	r3, [pc, #396]	; (8003b10 <HAL_RCC_OscConfig+0xe0c>)
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003988:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800398c:	6011      	str	r1, [r2, #0]
 800398e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	fa92 f1a2 	rbit	r1, r2
 8003998:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800399c:	6011      	str	r1, [r2, #0]
  return result;
 800399e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	fab2 f282 	clz	r2, r2
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	f042 0220 	orr.w	r2, r2, #32
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	f002 021f 	and.w	r2, r2, #31
 80039b4:	2101      	movs	r1, #1
 80039b6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d09b      	beq.n	80038f8 <HAL_RCC_OscConfig+0xbf4>
 80039c0:	e0a0      	b.n	8003b04 <HAL_RCC_OscConfig+0xe00>
 80039c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	fa93 f2a3 	rbit	r2, r3
 80039d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039da:	601a      	str	r2, [r3, #0]
  return result;
 80039dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	461a      	mov	r2, r3
 80039f4:	2300      	movs	r3, #0
 80039f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7fd f9a2 	bl	8000d40 <HAL_GetTick>
 80039fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a00:	e009      	b.n	8003a16 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a02:	f7fd f99d 	bl	8000d40 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e077      	b.n	8003b06 <HAL_RCC_OscConfig+0xe02>
 8003a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	fa93 f2a3 	rbit	r2, r3
 8003a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a2e:	601a      	str	r2, [r3, #0]
  return result;
 8003a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a36:	fab3 f383 	clz	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d102      	bne.n	8003a50 <HAL_RCC_OscConfig+0xd4c>
 8003a4a:	4b31      	ldr	r3, [pc, #196]	; (8003b10 <HAL_RCC_OscConfig+0xe0c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	e01b      	b.n	8003a88 <HAL_RCC_OscConfig+0xd84>
 8003a50:	f107 0320 	add.w	r3, r7, #32
 8003a54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	f107 0320 	add.w	r3, r7, #32
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	fa93 f2a3 	rbit	r2, r3
 8003a64:	f107 031c 	add.w	r3, r7, #28
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	f107 0318 	add.w	r3, r7, #24
 8003a6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	f107 0318 	add.w	r3, r7, #24
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	fa93 f2a3 	rbit	r2, r3
 8003a7e:	f107 0314 	add.w	r3, r7, #20
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	4b22      	ldr	r3, [pc, #136]	; (8003b10 <HAL_RCC_OscConfig+0xe0c>)
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	f107 0210 	add.w	r2, r7, #16
 8003a8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a90:	6011      	str	r1, [r2, #0]
 8003a92:	f107 0210 	add.w	r2, r7, #16
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	fa92 f1a2 	rbit	r1, r2
 8003a9c:	f107 020c 	add.w	r2, r7, #12
 8003aa0:	6011      	str	r1, [r2, #0]
  return result;
 8003aa2:	f107 020c 	add.w	r2, r7, #12
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	fab2 f282 	clz	r2, r2
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	f042 0220 	orr.w	r2, r2, #32
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	f002 021f 	and.w	r2, r2, #31
 8003ab8:	2101      	movs	r1, #1
 8003aba:	fa01 f202 	lsl.w	r2, r1, r2
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d19e      	bne.n	8003a02 <HAL_RCC_OscConfig+0xcfe>
 8003ac4:	e01e      	b.n	8003b04 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ac6:	1d3b      	adds	r3, r7, #4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e018      	b.n	8003b06 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ad4:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <HAL_RCC_OscConfig+0xe0c>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003adc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ae0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ae4:	1d3b      	adds	r3, r7, #4
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d108      	bne.n	8003b00 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003aee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003af2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003af6:	1d3b      	adds	r3, r7, #4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000

08003b14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b09e      	sub	sp, #120	; 0x78
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e162      	b.n	8003df2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b2c:	4b90      	ldr	r3, [pc, #576]	; (8003d70 <HAL_RCC_ClockConfig+0x25c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d910      	bls.n	8003b5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3a:	4b8d      	ldr	r3, [pc, #564]	; (8003d70 <HAL_RCC_ClockConfig+0x25c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 0207 	bic.w	r2, r3, #7
 8003b42:	498b      	ldr	r1, [pc, #556]	; (8003d70 <HAL_RCC_ClockConfig+0x25c>)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4a:	4b89      	ldr	r3, [pc, #548]	; (8003d70 <HAL_RCC_ClockConfig+0x25c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e14a      	b.n	8003df2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b68:	4b82      	ldr	r3, [pc, #520]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	497f      	ldr	r1, [pc, #508]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80dc 	beq.w	8003d40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d13c      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xf6>
 8003b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba0:	fab3 f383 	clz	r3, r3
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d102      	bne.n	8003bba <HAL_RCC_ClockConfig+0xa6>
 8003bb4:	4b6f      	ldr	r3, [pc, #444]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	e00f      	b.n	8003bda <HAL_RCC_ClockConfig+0xc6>
 8003bba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bc2:	fa93 f3a3 	rbit	r3, r3
 8003bc6:	667b      	str	r3, [r7, #100]	; 0x64
 8003bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8003bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bd0:	fa93 f3a3 	rbit	r3, r3
 8003bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bd6:	4b67      	ldr	r3, [pc, #412]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bde:	65ba      	str	r2, [r7, #88]	; 0x58
 8003be0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003be2:	fa92 f2a2 	rbit	r2, r2
 8003be6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003be8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bea:	fab2 f282 	clz	r2, r2
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	f042 0220 	orr.w	r2, r2, #32
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	f002 021f 	and.w	r2, r2, #31
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d17b      	bne.n	8003cfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e0f3      	b.n	8003df2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d13c      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x178>
 8003c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1a:	fa93 f3a3 	rbit	r3, r3
 8003c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c22:	fab3 f383 	clz	r3, r3
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d102      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x128>
 8003c36:	4b4f      	ldr	r3, [pc, #316]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	e00f      	b.n	8003c5c <HAL_RCC_ClockConfig+0x148>
 8003c3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c44:	fa93 f3a3 	rbit	r3, r3
 8003c48:	647b      	str	r3, [r7, #68]	; 0x44
 8003c4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c4e:	643b      	str	r3, [r7, #64]	; 0x40
 8003c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c52:	fa93 f3a3 	rbit	r3, r3
 8003c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c58:	4b46      	ldr	r3, [pc, #280]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c60:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c64:	fa92 f2a2 	rbit	r2, r2
 8003c68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c6c:	fab2 f282 	clz	r2, r2
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	f042 0220 	orr.w	r2, r2, #32
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	f002 021f 	and.w	r2, r2, #31
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d13a      	bne.n	8003cfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0b2      	b.n	8003df2 <HAL_RCC_ClockConfig+0x2de>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9a:	fab3 f383 	clz	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d102      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x1a0>
 8003cae:	4b31      	ldr	r3, [pc, #196]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	e00d      	b.n	8003cd0 <HAL_RCC_ClockConfig+0x1bc>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	623b      	str	r3, [r7, #32]
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	fa93 f3a3 	rbit	r3, r3
 8003cca:	61fb      	str	r3, [r7, #28]
 8003ccc:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	61ba      	str	r2, [r7, #24]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	fa92 f2a2 	rbit	r2, r2
 8003cda:	617a      	str	r2, [r7, #20]
  return result;
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	fab2 f282 	clz	r2, r2
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	f042 0220 	orr.w	r2, r2, #32
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	f002 021f 	and.w	r2, r2, #31
 8003cee:	2101      	movs	r1, #1
 8003cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e079      	b.n	8003df2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cfe:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f023 0203 	bic.w	r2, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	491a      	ldr	r1, [pc, #104]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d10:	f7fd f816 	bl	8000d40 <HAL_GetTick>
 8003d14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d18:	f7fd f812 	bl	8000d40 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e061      	b.n	8003df2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 020c 	and.w	r2, r3, #12
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d1eb      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_ClockConfig+0x25c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d214      	bcs.n	8003d78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4e:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <HAL_RCC_ClockConfig+0x25c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 0207 	bic.w	r2, r3, #7
 8003d56:	4906      	ldr	r1, [pc, #24]	; (8003d70 <HAL_RCC_ClockConfig+0x25c>)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5e:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <HAL_RCC_ClockConfig+0x25c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e040      	b.n	8003df2 <HAL_RCC_ClockConfig+0x2de>
 8003d70:	40022000 	.word	0x40022000
 8003d74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d84:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <HAL_RCC_ClockConfig+0x2e8>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	491a      	ldr	r1, [pc, #104]	; (8003dfc <HAL_RCC_ClockConfig+0x2e8>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003da2:	4b16      	ldr	r3, [pc, #88]	; (8003dfc <HAL_RCC_ClockConfig+0x2e8>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4912      	ldr	r1, [pc, #72]	; (8003dfc <HAL_RCC_ClockConfig+0x2e8>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003db6:	f000 f829 	bl	8003e0c <HAL_RCC_GetSysClockFreq>
 8003dba:	4601      	mov	r1, r0
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <HAL_RCC_ClockConfig+0x2e8>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc4:	22f0      	movs	r2, #240	; 0xf0
 8003dc6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	fa92 f2a2 	rbit	r2, r2
 8003dce:	60fa      	str	r2, [r7, #12]
  return result;
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	fab2 f282 	clz	r2, r2
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	40d3      	lsrs	r3, r2
 8003dda:	4a09      	ldr	r2, [pc, #36]	; (8003e00 <HAL_RCC_ClockConfig+0x2ec>)
 8003ddc:	5cd3      	ldrb	r3, [r2, r3]
 8003dde:	fa21 f303 	lsr.w	r3, r1, r3
 8003de2:	4a08      	ldr	r2, [pc, #32]	; (8003e04 <HAL_RCC_ClockConfig+0x2f0>)
 8003de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003de6:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <HAL_RCC_ClockConfig+0x2f4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fc ff64 	bl	8000cb8 <HAL_InitTick>
  
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3778      	adds	r7, #120	; 0x78
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	08005c6c 	.word	0x08005c6c
 8003e04:	20000000 	.word	0x20000000
 8003e08:	20000004 	.word	0x20000004

08003e0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b08b      	sub	sp, #44	; 0x2c
 8003e10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	2300      	movs	r3, #0
 8003e18:	61bb      	str	r3, [r7, #24]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e26:	4b29      	ldr	r3, [pc, #164]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d002      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x30>
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d003      	beq.n	8003e42 <HAL_RCC_GetSysClockFreq+0x36>
 8003e3a:	e03c      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e3c:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e3e:	623b      	str	r3, [r7, #32]
      break;
 8003e40:	e03c      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	fa92 f2a2 	rbit	r2, r2
 8003e54:	607a      	str	r2, [r7, #4]
  return result;
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	fab2 f282 	clz	r2, r2
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	40d3      	lsrs	r3, r2
 8003e60:	4a1c      	ldr	r2, [pc, #112]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e62:	5cd3      	ldrb	r3, [r2, r3]
 8003e64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e66:	4b19      	ldr	r3, [pc, #100]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	220f      	movs	r2, #15
 8003e70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	fa92 f2a2 	rbit	r2, r2
 8003e78:	60fa      	str	r2, [r7, #12]
  return result;
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	fab2 f282 	clz	r2, r2
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	40d3      	lsrs	r3, r2
 8003e84:	4a14      	ldr	r2, [pc, #80]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e86:	5cd3      	ldrb	r3, [r2, r3]
 8003e88:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e94:	4a0e      	ldr	r2, [pc, #56]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea4:	e004      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	4a0c      	ldr	r2, [pc, #48]	; (8003edc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003eaa:	fb02 f303 	mul.w	r3, r2, r3
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	623b      	str	r3, [r7, #32]
      break;
 8003eb4:	e002      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003eb8:	623b      	str	r3, [r7, #32]
      break;
 8003eba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	372c      	adds	r7, #44	; 0x2c
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	007a1200 	.word	0x007a1200
 8003ed4:	08005c84 	.word	0x08005c84
 8003ed8:	08005c94 	.word	0x08005c94
 8003edc:	003d0900 	.word	0x003d0900

08003ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee4:	4b03      	ldr	r3, [pc, #12]	; (8003ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20000000 	.word	0x20000000

08003ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003efe:	f7ff ffef 	bl	8003ee0 <HAL_RCC_GetHCLKFreq>
 8003f02:	4601      	mov	r1, r0
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f0c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	fa92 f2a2 	rbit	r2, r2
 8003f18:	603a      	str	r2, [r7, #0]
  return result;
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	fab2 f282 	clz	r2, r2
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	40d3      	lsrs	r3, r2
 8003f24:	4a04      	ldr	r2, [pc, #16]	; (8003f38 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f26:	5cd3      	ldrb	r3, [r2, r3]
 8003f28:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40021000 	.word	0x40021000
 8003f38:	08005c7c 	.word	0x08005c7c

08003f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f42:	f7ff ffcd 	bl	8003ee0 <HAL_RCC_GetHCLKFreq>
 8003f46:	4601      	mov	r1, r0
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f50:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	fa92 f2a2 	rbit	r2, r2
 8003f5c:	603a      	str	r2, [r7, #0]
  return result;
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	fab2 f282 	clz	r2, r2
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	40d3      	lsrs	r3, r2
 8003f68:	4a04      	ldr	r2, [pc, #16]	; (8003f7c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f6a:	5cd3      	ldrb	r3, [r2, r3]
 8003f6c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	08005c7c 	.word	0x08005c7c

08003f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b092      	sub	sp, #72	; 0x48
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f90:	2300      	movs	r3, #0
 8003f92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80cd 	beq.w	800413e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa4:	4b86      	ldr	r3, [pc, #536]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10e      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb0:	4b83      	ldr	r3, [pc, #524]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	4a82      	ldr	r2, [pc, #520]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fba:	61d3      	str	r3, [r2, #28]
 8003fbc:	4b80      	ldr	r3, [pc, #512]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fce:	4b7d      	ldr	r3, [pc, #500]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d118      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fda:	4b7a      	ldr	r3, [pc, #488]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a79      	ldr	r2, [pc, #484]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe6:	f7fc feab 	bl	8000d40 <HAL_GetTick>
 8003fea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fec:	e008      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fee:	f7fc fea7 	bl	8000d40 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b64      	cmp	r3, #100	; 0x64
 8003ffa:	d901      	bls.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e0db      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004000:	4b70      	ldr	r3, [pc, #448]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800400c:	4b6c      	ldr	r3, [pc, #432]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004014:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d07d      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004024:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004026:	429a      	cmp	r2, r3
 8004028:	d076      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800402a:	4b65      	ldr	r3, [pc, #404]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004038:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403c:	fa93 f3a3 	rbit	r3, r3
 8004040:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004044:	fab3 f383 	clz	r3, r3
 8004048:	b2db      	uxtb	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	4b5e      	ldr	r3, [pc, #376]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	461a      	mov	r2, r3
 8004054:	2301      	movs	r3, #1
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800405c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	fa93 f3a3 	rbit	r3, r3
 8004064:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004068:	fab3 f383 	clz	r3, r3
 800406c:	b2db      	uxtb	r3, r3
 800406e:	461a      	mov	r2, r3
 8004070:	4b55      	ldr	r3, [pc, #340]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	461a      	mov	r2, r3
 8004078:	2300      	movs	r3, #0
 800407a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800407c:	4a50      	ldr	r2, [pc, #320]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800407e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004080:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	d045      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fc fe58 	bl	8000d40 <HAL_GetTick>
 8004090:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004092:	e00a      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004094:	f7fc fe54 	bl	8000d40 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e086      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80040aa:	2302      	movs	r3, #2
 80040ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b0:	fa93 f3a3 	rbit	r3, r3
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
 80040b6:	2302      	movs	r3, #2
 80040b8:	623b      	str	r3, [r7, #32]
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	fa93 f3a3 	rbit	r3, r3
 80040c0:	61fb      	str	r3, [r7, #28]
  return result;
 80040c2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c4:	fab3 f383 	clz	r3, r3
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	f043 0302 	orr.w	r3, r3, #2
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d102      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80040d8:	4b39      	ldr	r3, [pc, #228]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	e007      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80040de:	2302      	movs	r3, #2
 80040e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	fa93 f3a3 	rbit	r3, r3
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	4b35      	ldr	r3, [pc, #212]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	2202      	movs	r2, #2
 80040f0:	613a      	str	r2, [r7, #16]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	fa92 f2a2 	rbit	r2, r2
 80040f8:	60fa      	str	r2, [r7, #12]
  return result;
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	fab2 f282 	clz	r2, r2
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	f002 021f 	and.w	r2, r2, #31
 800410c:	2101      	movs	r1, #1
 800410e:	fa01 f202 	lsl.w	r2, r1, r2
 8004112:	4013      	ands	r3, r2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0bd      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004118:	4b29      	ldr	r3, [pc, #164]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4926      	ldr	r1, [pc, #152]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004126:	4313      	orrs	r3, r2
 8004128:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800412a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800412e:	2b01      	cmp	r3, #1
 8004130:	d105      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004132:	4b23      	ldr	r3, [pc, #140]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	4a22      	ldr	r2, [pc, #136]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800413c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800414a:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	f023 0203 	bic.w	r2, r3, #3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	491a      	ldr	r1, [pc, #104]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004158:	4313      	orrs	r3, r2
 800415a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004168:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	f023 0210 	bic.w	r2, r3, #16
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4912      	ldr	r1, [pc, #72]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004176:	4313      	orrs	r3, r2
 8004178:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004186:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	490b      	ldr	r1, [pc, #44]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004194:	4313      	orrs	r3, r2
 8004196:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	4903      	ldr	r1, [pc, #12]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3748      	adds	r7, #72	; 0x48
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40007000 	.word	0x40007000
 80041c8:	10908100 	.word	0x10908100

080041cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e040      	b.n	8004260 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fc fcd6 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2224      	movs	r2, #36	; 0x24
 80041f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0201 	bic.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fae0 	bl	80047d0 <UART_SetConfig>
 8004210:	4603      	mov	r3, r0
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e022      	b.n	8004260 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fc0c 	bl	8004a40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004236:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689a      	ldr	r2, [r3, #8]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004246:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fc93 	bl	8004b84 <UART_CheckIdleState>
 800425e:	4603      	mov	r3, r0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08a      	sub	sp, #40	; 0x28
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	4613      	mov	r3, r2
 8004276:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800427c:	2b20      	cmp	r3, #32
 800427e:	f040 8082 	bne.w	8004386 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_UART_Transmit+0x26>
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e07a      	b.n	8004388 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_UART_Transmit+0x38>
 800429c:	2302      	movs	r3, #2
 800429e:	e073      	b.n	8004388 <HAL_UART_Transmit+0x120>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2221      	movs	r2, #33	; 0x21
 80042b4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042b6:	f7fc fd43 	bl	8000d40 <HAL_GetTick>
 80042ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	88fa      	ldrh	r2, [r7, #6]
 80042c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	88fa      	ldrh	r2, [r7, #6]
 80042c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d4:	d108      	bne.n	80042e8 <HAL_UART_Transmit+0x80>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d104      	bne.n	80042e8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	e003      	b.n	80042f0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80042f8:	e02d      	b.n	8004356 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2200      	movs	r2, #0
 8004302:	2180      	movs	r1, #128	; 0x80
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 fc86 	bl	8004c16 <UART_WaitOnFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e039      	b.n	8004388 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	881a      	ldrh	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004326:	b292      	uxth	r2, r2
 8004328:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	3302      	adds	r3, #2
 800432e:	61bb      	str	r3, [r7, #24]
 8004330:	e008      	b.n	8004344 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	781a      	ldrb	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	b292      	uxth	r2, r2
 800433c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3301      	adds	r3, #1
 8004342:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1cb      	bne.n	80042fa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2200      	movs	r2, #0
 800436a:	2140      	movs	r1, #64	; 0x40
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fc52 	bl	8004c16 <UART_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e005      	b.n	8004388 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	e000      	b.n	8004388 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004386:	2302      	movs	r3, #2
  }
}
 8004388:	4618      	mov	r0, r3
 800438a:	3720      	adds	r7, #32
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80043b6:	4013      	ands	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d113      	bne.n	80043e8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00e      	beq.n	80043e8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d009      	beq.n	80043e8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 81cd 	beq.w	8004778 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	4798      	blx	r3
      }
      return;
 80043e6:	e1c7      	b.n	8004778 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 80e3 	beq.w	80045b6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d105      	bne.n	8004406 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4ba5      	ldr	r3, [pc, #660]	; (8004694 <HAL_UART_IRQHandler+0x304>)
 80043fe:	4013      	ands	r3, r2
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80d8 	beq.w	80045b6 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d010      	beq.n	8004432 <HAL_UART_IRQHandler+0xa2>
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00b      	beq.n	8004432 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2201      	movs	r2, #1
 8004420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004428:	f043 0201 	orr.w	r2, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d010      	beq.n	800445e <HAL_UART_IRQHandler+0xce>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00b      	beq.n	800445e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2202      	movs	r2, #2
 800444c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004454:	f043 0204 	orr.w	r2, r3, #4
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d010      	beq.n	800448a <HAL_UART_IRQHandler+0xfa>
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2204      	movs	r2, #4
 8004478:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004480:	f043 0202 	orr.w	r2, r3, #2
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	d015      	beq.n	80044c0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d104      	bne.n	80044a8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00b      	beq.n	80044c0 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2208      	movs	r2, #8
 80044ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044b6:	f043 0208 	orr.w	r2, r3, #8
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d011      	beq.n	80044ee <HAL_UART_IRQHandler+0x15e>
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00c      	beq.n	80044ee <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044e4:	f043 0220 	orr.w	r2, r3, #32
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8141 	beq.w	800477c <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00c      	beq.n	800451e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004524:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004530:	2b40      	cmp	r3, #64	; 0x40
 8004532:	d004      	beq.n	800453e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800453a:	2b00      	cmp	r3, #0
 800453c:	d031      	beq.n	80045a2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fbe5 	bl	8004d0e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454e:	2b40      	cmp	r3, #64	; 0x40
 8004550:	d123      	bne.n	800459a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004560:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	2b00      	cmp	r3, #0
 8004568:	d013      	beq.n	8004592 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	4a4a      	ldr	r2, [pc, #296]	; (8004698 <HAL_UART_IRQHandler+0x308>)
 8004570:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe f922 	bl	80027c0 <HAL_DMA_Abort_IT>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d017      	beq.n	80045b2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800458c:	4610      	mov	r0, r2
 800458e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004590:	e00f      	b.n	80045b2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f906 	bl	80047a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004598:	e00b      	b.n	80045b2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f902 	bl	80047a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a0:	e007      	b.n	80045b2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f8fe 	bl	80047a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80045b0:	e0e4      	b.n	800477c <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b2:	bf00      	nop
    return;
 80045b4:	e0e2      	b.n	800477c <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	f040 80a7 	bne.w	800470e <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 80a1 	beq.w	800470e <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 809b 	beq.w	800470e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2210      	movs	r2, #16
 80045de:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	d156      	bne.n	800469c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80045f8:	893b      	ldrh	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80c0 	beq.w	8004780 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004606:	893a      	ldrh	r2, [r7, #8]
 8004608:	429a      	cmp	r2, r3
 800460a:	f080 80b9 	bcs.w	8004780 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	893a      	ldrh	r2, [r7, #8]
 8004612:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	2b20      	cmp	r3, #32
 800461e:	d02a      	beq.n	8004676 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800462e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0201 	bic.w	r2, r2, #1
 800463e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800464e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0210 	bic.w	r2, r2, #16
 800466a:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004670:	4618      	mov	r0, r3
 8004672:	f7fe f86c 	bl	800274e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004682:	b29b      	uxth	r3, r3
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	b29b      	uxth	r3, r3
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f894 	bl	80047b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004690:	e076      	b.n	8004780 <HAL_UART_IRQHandler+0x3f0>
 8004692:	bf00      	nop
 8004694:	04000120 	.word	0x04000120
 8004698:	08004d6d 	.word	0x08004d6d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d064      	beq.n	8004784 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 80046ba:	897b      	ldrh	r3, [r7, #10]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d061      	beq.n	8004784 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046ce:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0210 	bic.w	r2, r2, #16
 8004700:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004702:	897b      	ldrh	r3, [r7, #10]
 8004704:	4619      	mov	r1, r3
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f856 	bl	80047b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800470c:	e03a      	b.n	8004784 <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00d      	beq.n	8004734 <HAL_UART_IRQHandler+0x3a4>
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800472a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fb4c 	bl	8004dca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004732:	e02a      	b.n	800478a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00d      	beq.n	800475a <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01b      	beq.n	8004788 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	4798      	blx	r3
    }
    return;
 8004758:	e016      	b.n	8004788 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	d012      	beq.n	800478a <HAL_UART_IRQHandler+0x3fa>
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00d      	beq.n	800478a <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fb12 	bl	8004d98 <UART_EndTransmit_IT>
    return;
 8004774:	bf00      	nop
 8004776:	e008      	b.n	800478a <HAL_UART_IRQHandler+0x3fa>
      return;
 8004778:	bf00      	nop
 800477a:	e006      	b.n	800478a <HAL_UART_IRQHandler+0x3fa>
    return;
 800477c:	bf00      	nop
 800477e:	e004      	b.n	800478a <HAL_UART_IRQHandler+0x3fa>
      return;
 8004780:	bf00      	nop
 8004782:	e002      	b.n	800478a <HAL_UART_IRQHandler+0x3fa>
      return;
 8004784:	bf00      	nop
 8004786:	e000      	b.n	800478a <HAL_UART_IRQHandler+0x3fa>
    return;
 8004788:	bf00      	nop
  }

}
 800478a:	3720      	adds	r7, #32
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4b8b      	ldr	r3, [pc, #556]	; (8004a28 <UART_SetConfig+0x258>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6812      	ldr	r2, [r2, #0]
 8004802:	6979      	ldr	r1, [r7, #20]
 8004804:	430b      	orrs	r3, r1
 8004806:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	430a      	orrs	r2, r1
 8004840:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a79      	ldr	r2, [pc, #484]	; (8004a2c <UART_SetConfig+0x25c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d121      	bne.n	8004890 <UART_SetConfig+0xc0>
 800484c:	4b78      	ldr	r3, [pc, #480]	; (8004a30 <UART_SetConfig+0x260>)
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	2b03      	cmp	r3, #3
 8004856:	d817      	bhi.n	8004888 <UART_SetConfig+0xb8>
 8004858:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <UART_SetConfig+0x90>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004871 	.word	0x08004871
 8004864:	0800487d 	.word	0x0800487d
 8004868:	08004883 	.word	0x08004883
 800486c:	08004877 	.word	0x08004877
 8004870:	2300      	movs	r3, #0
 8004872:	77fb      	strb	r3, [r7, #31]
 8004874:	e01e      	b.n	80048b4 <UART_SetConfig+0xe4>
 8004876:	2302      	movs	r3, #2
 8004878:	77fb      	strb	r3, [r7, #31]
 800487a:	e01b      	b.n	80048b4 <UART_SetConfig+0xe4>
 800487c:	2304      	movs	r3, #4
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e018      	b.n	80048b4 <UART_SetConfig+0xe4>
 8004882:	2308      	movs	r3, #8
 8004884:	77fb      	strb	r3, [r7, #31]
 8004886:	e015      	b.n	80048b4 <UART_SetConfig+0xe4>
 8004888:	2310      	movs	r3, #16
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	bf00      	nop
 800488e:	e011      	b.n	80048b4 <UART_SetConfig+0xe4>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a67      	ldr	r2, [pc, #412]	; (8004a34 <UART_SetConfig+0x264>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d102      	bne.n	80048a0 <UART_SetConfig+0xd0>
 800489a:	2300      	movs	r3, #0
 800489c:	77fb      	strb	r3, [r7, #31]
 800489e:	e009      	b.n	80048b4 <UART_SetConfig+0xe4>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a64      	ldr	r2, [pc, #400]	; (8004a38 <UART_SetConfig+0x268>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d102      	bne.n	80048b0 <UART_SetConfig+0xe0>
 80048aa:	2300      	movs	r3, #0
 80048ac:	77fb      	strb	r3, [r7, #31]
 80048ae:	e001      	b.n	80048b4 <UART_SetConfig+0xe4>
 80048b0:	2310      	movs	r3, #16
 80048b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048bc:	d15c      	bne.n	8004978 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 80048be:	7ffb      	ldrb	r3, [r7, #31]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d828      	bhi.n	8004916 <UART_SetConfig+0x146>
 80048c4:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <UART_SetConfig+0xfc>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	080048f9 	.word	0x080048f9
 80048d4:	08004901 	.word	0x08004901
 80048d8:	08004917 	.word	0x08004917
 80048dc:	08004907 	.word	0x08004907
 80048e0:	08004917 	.word	0x08004917
 80048e4:	08004917 	.word	0x08004917
 80048e8:	08004917 	.word	0x08004917
 80048ec:	0800490f 	.word	0x0800490f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f0:	f7ff fb02 	bl	8003ef8 <HAL_RCC_GetPCLK1Freq>
 80048f4:	61b8      	str	r0, [r7, #24]
        break;
 80048f6:	e013      	b.n	8004920 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048f8:	f7ff fb20 	bl	8003f3c <HAL_RCC_GetPCLK2Freq>
 80048fc:	61b8      	str	r0, [r7, #24]
        break;
 80048fe:	e00f      	b.n	8004920 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004900:	4b4e      	ldr	r3, [pc, #312]	; (8004a3c <UART_SetConfig+0x26c>)
 8004902:	61bb      	str	r3, [r7, #24]
        break;
 8004904:	e00c      	b.n	8004920 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004906:	f7ff fa81 	bl	8003e0c <HAL_RCC_GetSysClockFreq>
 800490a:	61b8      	str	r0, [r7, #24]
        break;
 800490c:	e008      	b.n	8004920 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004912:	61bb      	str	r3, [r7, #24]
        break;
 8004914:	e004      	b.n	8004920 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	77bb      	strb	r3, [r7, #30]
        break;
 800491e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d074      	beq.n	8004a10 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	005a      	lsls	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	085b      	lsrs	r3, r3, #1
 8004930:	441a      	add	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	fbb2 f3f3 	udiv	r3, r2, r3
 800493a:	b29b      	uxth	r3, r3
 800493c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b0f      	cmp	r3, #15
 8004942:	d916      	bls.n	8004972 <UART_SetConfig+0x1a2>
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494a:	d212      	bcs.n	8004972 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	b29b      	uxth	r3, r3
 8004950:	f023 030f 	bic.w	r3, r3, #15
 8004954:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	b29b      	uxth	r3, r3
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	b29a      	uxth	r2, r3
 8004962:	89fb      	ldrh	r3, [r7, #14]
 8004964:	4313      	orrs	r3, r2
 8004966:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	89fa      	ldrh	r2, [r7, #14]
 800496e:	60da      	str	r2, [r3, #12]
 8004970:	e04e      	b.n	8004a10 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	77bb      	strb	r3, [r7, #30]
 8004976:	e04b      	b.n	8004a10 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004978:	7ffb      	ldrb	r3, [r7, #31]
 800497a:	2b08      	cmp	r3, #8
 800497c:	d827      	bhi.n	80049ce <UART_SetConfig+0x1fe>
 800497e:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <UART_SetConfig+0x1b4>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049b1 	.word	0x080049b1
 800498c:	080049b9 	.word	0x080049b9
 8004990:	080049cf 	.word	0x080049cf
 8004994:	080049bf 	.word	0x080049bf
 8004998:	080049cf 	.word	0x080049cf
 800499c:	080049cf 	.word	0x080049cf
 80049a0:	080049cf 	.word	0x080049cf
 80049a4:	080049c7 	.word	0x080049c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a8:	f7ff faa6 	bl	8003ef8 <HAL_RCC_GetPCLK1Freq>
 80049ac:	61b8      	str	r0, [r7, #24]
        break;
 80049ae:	e013      	b.n	80049d8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b0:	f7ff fac4 	bl	8003f3c <HAL_RCC_GetPCLK2Freq>
 80049b4:	61b8      	str	r0, [r7, #24]
        break;
 80049b6:	e00f      	b.n	80049d8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b8:	4b20      	ldr	r3, [pc, #128]	; (8004a3c <UART_SetConfig+0x26c>)
 80049ba:	61bb      	str	r3, [r7, #24]
        break;
 80049bc:	e00c      	b.n	80049d8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049be:	f7ff fa25 	bl	8003e0c <HAL_RCC_GetSysClockFreq>
 80049c2:	61b8      	str	r0, [r7, #24]
        break;
 80049c4:	e008      	b.n	80049d8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ca:	61bb      	str	r3, [r7, #24]
        break;
 80049cc:	e004      	b.n	80049d8 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	77bb      	strb	r3, [r7, #30]
        break;
 80049d6:	bf00      	nop
    }

    if (pclk != 0U)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d018      	beq.n	8004a10 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	085a      	lsrs	r2, r3, #1
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	441a      	add	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b0f      	cmp	r3, #15
 80049f8:	d908      	bls.n	8004a0c <UART_SetConfig+0x23c>
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a00:	d204      	bcs.n	8004a0c <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	60da      	str	r2, [r3, #12]
 8004a0a:	e001      	b.n	8004a10 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	efff69f3 	.word	0xefff69f3
 8004a2c:	40013800 	.word	0x40013800
 8004a30:	40021000 	.word	0x40021000
 8004a34:	40004400 	.word	0x40004400
 8004a38:	40004800 	.word	0x40004800
 8004a3c:	007a1200 	.word	0x007a1200

08004a40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01a      	beq.n	8004b56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b3e:	d10a      	bne.n	8004b56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	605a      	str	r2, [r3, #4]
  }
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b94:	f7fc f8d4 	bl	8000d40 <HAL_GetTick>
 8004b98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d10e      	bne.n	8004bc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f82d 	bl	8004c16 <UART_WaitOnFlagUntilTimeout>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e023      	b.n	8004c0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d10e      	bne.n	8004bf2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f817 	bl	8004c16 <UART_WaitOnFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e00d      	b.n	8004c0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	603b      	str	r3, [r7, #0]
 8004c22:	4613      	mov	r3, r2
 8004c24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c26:	e05e      	b.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2e:	d05a      	beq.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c30:	f7fc f886 	bl	8000d40 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d302      	bcc.n	8004c46 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d11b      	bne.n	8004c7e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c54:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0201 	bic.w	r2, r2, #1
 8004c64:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e043      	b.n	8004d06 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d02c      	beq.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c9a:	d124      	bne.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ca4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cb4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0201 	bic.w	r2, r2, #1
 8004cc4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e00f      	b.n	8004d06 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69da      	ldr	r2, [r3, #28]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	bf0c      	ite	eq
 8004cf6:	2301      	moveq	r3, #1
 8004cf8:	2300      	movne	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	79fb      	ldrb	r3, [r7, #7]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d091      	beq.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d24:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0201 	bic.w	r2, r2, #1
 8004d34:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d107      	bne.n	8004d4e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0210 	bic.w	r2, r2, #16
 8004d4c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2220      	movs	r2, #32
 8004d52:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f7ff fd0a 	bl	80047a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d90:	bf00      	nop
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dae:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2220      	movs	r2, #32
 8004db4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff fce7 	bl	8004790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
	...

08004de0 <__errno>:
 8004de0:	4b01      	ldr	r3, [pc, #4]	; (8004de8 <__errno+0x8>)
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	2000000c 	.word	0x2000000c

08004dec <__libc_init_array>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	4e0d      	ldr	r6, [pc, #52]	; (8004e24 <__libc_init_array+0x38>)
 8004df0:	4c0d      	ldr	r4, [pc, #52]	; (8004e28 <__libc_init_array+0x3c>)
 8004df2:	1ba4      	subs	r4, r4, r6
 8004df4:	10a4      	asrs	r4, r4, #2
 8004df6:	2500      	movs	r5, #0
 8004df8:	42a5      	cmp	r5, r4
 8004dfa:	d109      	bne.n	8004e10 <__libc_init_array+0x24>
 8004dfc:	4e0b      	ldr	r6, [pc, #44]	; (8004e2c <__libc_init_array+0x40>)
 8004dfe:	4c0c      	ldr	r4, [pc, #48]	; (8004e30 <__libc_init_array+0x44>)
 8004e00:	f000 ff04 	bl	8005c0c <_init>
 8004e04:	1ba4      	subs	r4, r4, r6
 8004e06:	10a4      	asrs	r4, r4, #2
 8004e08:	2500      	movs	r5, #0
 8004e0a:	42a5      	cmp	r5, r4
 8004e0c:	d105      	bne.n	8004e1a <__libc_init_array+0x2e>
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
 8004e10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e14:	4798      	blx	r3
 8004e16:	3501      	adds	r5, #1
 8004e18:	e7ee      	b.n	8004df8 <__libc_init_array+0xc>
 8004e1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e1e:	4798      	blx	r3
 8004e20:	3501      	adds	r5, #1
 8004e22:	e7f2      	b.n	8004e0a <__libc_init_array+0x1e>
 8004e24:	08005d3c 	.word	0x08005d3c
 8004e28:	08005d3c 	.word	0x08005d3c
 8004e2c:	08005d3c 	.word	0x08005d3c
 8004e30:	08005d40 	.word	0x08005d40

08004e34 <memset>:
 8004e34:	4402      	add	r2, r0
 8004e36:	4603      	mov	r3, r0
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d100      	bne.n	8004e3e <memset+0xa>
 8004e3c:	4770      	bx	lr
 8004e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e42:	e7f9      	b.n	8004e38 <memset+0x4>

08004e44 <iprintf>:
 8004e44:	b40f      	push	{r0, r1, r2, r3}
 8004e46:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <iprintf+0x2c>)
 8004e48:	b513      	push	{r0, r1, r4, lr}
 8004e4a:	681c      	ldr	r4, [r3, #0]
 8004e4c:	b124      	cbz	r4, 8004e58 <iprintf+0x14>
 8004e4e:	69a3      	ldr	r3, [r4, #24]
 8004e50:	b913      	cbnz	r3, 8004e58 <iprintf+0x14>
 8004e52:	4620      	mov	r0, r4
 8004e54:	f000 f84e 	bl	8004ef4 <__sinit>
 8004e58:	ab05      	add	r3, sp, #20
 8004e5a:	9a04      	ldr	r2, [sp, #16]
 8004e5c:	68a1      	ldr	r1, [r4, #8]
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	4620      	mov	r0, r4
 8004e62:	f000 f955 	bl	8005110 <_vfiprintf_r>
 8004e66:	b002      	add	sp, #8
 8004e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e6c:	b004      	add	sp, #16
 8004e6e:	4770      	bx	lr
 8004e70:	2000000c 	.word	0x2000000c

08004e74 <std>:
 8004e74:	2300      	movs	r3, #0
 8004e76:	b510      	push	{r4, lr}
 8004e78:	4604      	mov	r4, r0
 8004e7a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e7e:	6083      	str	r3, [r0, #8]
 8004e80:	8181      	strh	r1, [r0, #12]
 8004e82:	6643      	str	r3, [r0, #100]	; 0x64
 8004e84:	81c2      	strh	r2, [r0, #14]
 8004e86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e8a:	6183      	str	r3, [r0, #24]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	2208      	movs	r2, #8
 8004e90:	305c      	adds	r0, #92	; 0x5c
 8004e92:	f7ff ffcf 	bl	8004e34 <memset>
 8004e96:	4b05      	ldr	r3, [pc, #20]	; (8004eac <std+0x38>)
 8004e98:	6263      	str	r3, [r4, #36]	; 0x24
 8004e9a:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <std+0x3c>)
 8004e9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <std+0x40>)
 8004ea0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ea2:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <std+0x44>)
 8004ea4:	6224      	str	r4, [r4, #32]
 8004ea6:	6323      	str	r3, [r4, #48]	; 0x30
 8004ea8:	bd10      	pop	{r4, pc}
 8004eaa:	bf00      	nop
 8004eac:	0800566d 	.word	0x0800566d
 8004eb0:	0800568f 	.word	0x0800568f
 8004eb4:	080056c7 	.word	0x080056c7
 8004eb8:	080056eb 	.word	0x080056eb

08004ebc <_cleanup_r>:
 8004ebc:	4901      	ldr	r1, [pc, #4]	; (8004ec4 <_cleanup_r+0x8>)
 8004ebe:	f000 b885 	b.w	8004fcc <_fwalk_reent>
 8004ec2:	bf00      	nop
 8004ec4:	080059c5 	.word	0x080059c5

08004ec8 <__sfmoreglue>:
 8004ec8:	b570      	push	{r4, r5, r6, lr}
 8004eca:	1e4a      	subs	r2, r1, #1
 8004ecc:	2568      	movs	r5, #104	; 0x68
 8004ece:	4355      	muls	r5, r2
 8004ed0:	460e      	mov	r6, r1
 8004ed2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ed6:	f000 f897 	bl	8005008 <_malloc_r>
 8004eda:	4604      	mov	r4, r0
 8004edc:	b140      	cbz	r0, 8004ef0 <__sfmoreglue+0x28>
 8004ede:	2100      	movs	r1, #0
 8004ee0:	e9c0 1600 	strd	r1, r6, [r0]
 8004ee4:	300c      	adds	r0, #12
 8004ee6:	60a0      	str	r0, [r4, #8]
 8004ee8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004eec:	f7ff ffa2 	bl	8004e34 <memset>
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	bd70      	pop	{r4, r5, r6, pc}

08004ef4 <__sinit>:
 8004ef4:	6983      	ldr	r3, [r0, #24]
 8004ef6:	b510      	push	{r4, lr}
 8004ef8:	4604      	mov	r4, r0
 8004efa:	bb33      	cbnz	r3, 8004f4a <__sinit+0x56>
 8004efc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004f00:	6503      	str	r3, [r0, #80]	; 0x50
 8004f02:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <__sinit+0x58>)
 8004f04:	4a12      	ldr	r2, [pc, #72]	; (8004f50 <__sinit+0x5c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6282      	str	r2, [r0, #40]	; 0x28
 8004f0a:	4298      	cmp	r0, r3
 8004f0c:	bf04      	itt	eq
 8004f0e:	2301      	moveq	r3, #1
 8004f10:	6183      	streq	r3, [r0, #24]
 8004f12:	f000 f81f 	bl	8004f54 <__sfp>
 8004f16:	6060      	str	r0, [r4, #4]
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f000 f81b 	bl	8004f54 <__sfp>
 8004f1e:	60a0      	str	r0, [r4, #8]
 8004f20:	4620      	mov	r0, r4
 8004f22:	f000 f817 	bl	8004f54 <__sfp>
 8004f26:	2200      	movs	r2, #0
 8004f28:	60e0      	str	r0, [r4, #12]
 8004f2a:	2104      	movs	r1, #4
 8004f2c:	6860      	ldr	r0, [r4, #4]
 8004f2e:	f7ff ffa1 	bl	8004e74 <std>
 8004f32:	2201      	movs	r2, #1
 8004f34:	2109      	movs	r1, #9
 8004f36:	68a0      	ldr	r0, [r4, #8]
 8004f38:	f7ff ff9c 	bl	8004e74 <std>
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	2112      	movs	r1, #18
 8004f40:	68e0      	ldr	r0, [r4, #12]
 8004f42:	f7ff ff97 	bl	8004e74 <std>
 8004f46:	2301      	movs	r3, #1
 8004f48:	61a3      	str	r3, [r4, #24]
 8004f4a:	bd10      	pop	{r4, pc}
 8004f4c:	08005ca4 	.word	0x08005ca4
 8004f50:	08004ebd 	.word	0x08004ebd

08004f54 <__sfp>:
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <__sfp+0x70>)
 8004f58:	681e      	ldr	r6, [r3, #0]
 8004f5a:	69b3      	ldr	r3, [r6, #24]
 8004f5c:	4607      	mov	r7, r0
 8004f5e:	b913      	cbnz	r3, 8004f66 <__sfp+0x12>
 8004f60:	4630      	mov	r0, r6
 8004f62:	f7ff ffc7 	bl	8004ef4 <__sinit>
 8004f66:	3648      	adds	r6, #72	; 0x48
 8004f68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	d503      	bpl.n	8004f78 <__sfp+0x24>
 8004f70:	6833      	ldr	r3, [r6, #0]
 8004f72:	b133      	cbz	r3, 8004f82 <__sfp+0x2e>
 8004f74:	6836      	ldr	r6, [r6, #0]
 8004f76:	e7f7      	b.n	8004f68 <__sfp+0x14>
 8004f78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f7c:	b16d      	cbz	r5, 8004f9a <__sfp+0x46>
 8004f7e:	3468      	adds	r4, #104	; 0x68
 8004f80:	e7f4      	b.n	8004f6c <__sfp+0x18>
 8004f82:	2104      	movs	r1, #4
 8004f84:	4638      	mov	r0, r7
 8004f86:	f7ff ff9f 	bl	8004ec8 <__sfmoreglue>
 8004f8a:	6030      	str	r0, [r6, #0]
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d1f1      	bne.n	8004f74 <__sfp+0x20>
 8004f90:	230c      	movs	r3, #12
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	4604      	mov	r4, r0
 8004f96:	4620      	mov	r0, r4
 8004f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f9a:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <__sfp+0x74>)
 8004f9c:	6665      	str	r5, [r4, #100]	; 0x64
 8004f9e:	e9c4 5500 	strd	r5, r5, [r4]
 8004fa2:	60a5      	str	r5, [r4, #8]
 8004fa4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004fa8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004fac:	2208      	movs	r2, #8
 8004fae:	4629      	mov	r1, r5
 8004fb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fb4:	f7ff ff3e 	bl	8004e34 <memset>
 8004fb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fc0:	e7e9      	b.n	8004f96 <__sfp+0x42>
 8004fc2:	bf00      	nop
 8004fc4:	08005ca4 	.word	0x08005ca4
 8004fc8:	ffff0001 	.word	0xffff0001

08004fcc <_fwalk_reent>:
 8004fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fd0:	4680      	mov	r8, r0
 8004fd2:	4689      	mov	r9, r1
 8004fd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fd8:	2600      	movs	r6, #0
 8004fda:	b914      	cbnz	r4, 8004fe2 <_fwalk_reent+0x16>
 8004fdc:	4630      	mov	r0, r6
 8004fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fe2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004fe6:	3f01      	subs	r7, #1
 8004fe8:	d501      	bpl.n	8004fee <_fwalk_reent+0x22>
 8004fea:	6824      	ldr	r4, [r4, #0]
 8004fec:	e7f5      	b.n	8004fda <_fwalk_reent+0xe>
 8004fee:	89ab      	ldrh	r3, [r5, #12]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d907      	bls.n	8005004 <_fwalk_reent+0x38>
 8004ff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	d003      	beq.n	8005004 <_fwalk_reent+0x38>
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	4640      	mov	r0, r8
 8005000:	47c8      	blx	r9
 8005002:	4306      	orrs	r6, r0
 8005004:	3568      	adds	r5, #104	; 0x68
 8005006:	e7ee      	b.n	8004fe6 <_fwalk_reent+0x1a>

08005008 <_malloc_r>:
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	1ccd      	adds	r5, r1, #3
 800500c:	f025 0503 	bic.w	r5, r5, #3
 8005010:	3508      	adds	r5, #8
 8005012:	2d0c      	cmp	r5, #12
 8005014:	bf38      	it	cc
 8005016:	250c      	movcc	r5, #12
 8005018:	2d00      	cmp	r5, #0
 800501a:	4606      	mov	r6, r0
 800501c:	db01      	blt.n	8005022 <_malloc_r+0x1a>
 800501e:	42a9      	cmp	r1, r5
 8005020:	d903      	bls.n	800502a <_malloc_r+0x22>
 8005022:	230c      	movs	r3, #12
 8005024:	6033      	str	r3, [r6, #0]
 8005026:	2000      	movs	r0, #0
 8005028:	bd70      	pop	{r4, r5, r6, pc}
 800502a:	f000 fd6b 	bl	8005b04 <__malloc_lock>
 800502e:	4a21      	ldr	r2, [pc, #132]	; (80050b4 <_malloc_r+0xac>)
 8005030:	6814      	ldr	r4, [r2, #0]
 8005032:	4621      	mov	r1, r4
 8005034:	b991      	cbnz	r1, 800505c <_malloc_r+0x54>
 8005036:	4c20      	ldr	r4, [pc, #128]	; (80050b8 <_malloc_r+0xb0>)
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	b91b      	cbnz	r3, 8005044 <_malloc_r+0x3c>
 800503c:	4630      	mov	r0, r6
 800503e:	f000 fb05 	bl	800564c <_sbrk_r>
 8005042:	6020      	str	r0, [r4, #0]
 8005044:	4629      	mov	r1, r5
 8005046:	4630      	mov	r0, r6
 8005048:	f000 fb00 	bl	800564c <_sbrk_r>
 800504c:	1c43      	adds	r3, r0, #1
 800504e:	d124      	bne.n	800509a <_malloc_r+0x92>
 8005050:	230c      	movs	r3, #12
 8005052:	6033      	str	r3, [r6, #0]
 8005054:	4630      	mov	r0, r6
 8005056:	f000 fd56 	bl	8005b06 <__malloc_unlock>
 800505a:	e7e4      	b.n	8005026 <_malloc_r+0x1e>
 800505c:	680b      	ldr	r3, [r1, #0]
 800505e:	1b5b      	subs	r3, r3, r5
 8005060:	d418      	bmi.n	8005094 <_malloc_r+0x8c>
 8005062:	2b0b      	cmp	r3, #11
 8005064:	d90f      	bls.n	8005086 <_malloc_r+0x7e>
 8005066:	600b      	str	r3, [r1, #0]
 8005068:	50cd      	str	r5, [r1, r3]
 800506a:	18cc      	adds	r4, r1, r3
 800506c:	4630      	mov	r0, r6
 800506e:	f000 fd4a 	bl	8005b06 <__malloc_unlock>
 8005072:	f104 000b 	add.w	r0, r4, #11
 8005076:	1d23      	adds	r3, r4, #4
 8005078:	f020 0007 	bic.w	r0, r0, #7
 800507c:	1ac3      	subs	r3, r0, r3
 800507e:	d0d3      	beq.n	8005028 <_malloc_r+0x20>
 8005080:	425a      	negs	r2, r3
 8005082:	50e2      	str	r2, [r4, r3]
 8005084:	e7d0      	b.n	8005028 <_malloc_r+0x20>
 8005086:	428c      	cmp	r4, r1
 8005088:	684b      	ldr	r3, [r1, #4]
 800508a:	bf16      	itet	ne
 800508c:	6063      	strne	r3, [r4, #4]
 800508e:	6013      	streq	r3, [r2, #0]
 8005090:	460c      	movne	r4, r1
 8005092:	e7eb      	b.n	800506c <_malloc_r+0x64>
 8005094:	460c      	mov	r4, r1
 8005096:	6849      	ldr	r1, [r1, #4]
 8005098:	e7cc      	b.n	8005034 <_malloc_r+0x2c>
 800509a:	1cc4      	adds	r4, r0, #3
 800509c:	f024 0403 	bic.w	r4, r4, #3
 80050a0:	42a0      	cmp	r0, r4
 80050a2:	d005      	beq.n	80050b0 <_malloc_r+0xa8>
 80050a4:	1a21      	subs	r1, r4, r0
 80050a6:	4630      	mov	r0, r6
 80050a8:	f000 fad0 	bl	800564c <_sbrk_r>
 80050ac:	3001      	adds	r0, #1
 80050ae:	d0cf      	beq.n	8005050 <_malloc_r+0x48>
 80050b0:	6025      	str	r5, [r4, #0]
 80050b2:	e7db      	b.n	800506c <_malloc_r+0x64>
 80050b4:	20000094 	.word	0x20000094
 80050b8:	20000098 	.word	0x20000098

080050bc <__sfputc_r>:
 80050bc:	6893      	ldr	r3, [r2, #8]
 80050be:	3b01      	subs	r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	b410      	push	{r4}
 80050c4:	6093      	str	r3, [r2, #8]
 80050c6:	da08      	bge.n	80050da <__sfputc_r+0x1e>
 80050c8:	6994      	ldr	r4, [r2, #24]
 80050ca:	42a3      	cmp	r3, r4
 80050cc:	db01      	blt.n	80050d2 <__sfputc_r+0x16>
 80050ce:	290a      	cmp	r1, #10
 80050d0:	d103      	bne.n	80050da <__sfputc_r+0x1e>
 80050d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050d6:	f000 bb0d 	b.w	80056f4 <__swbuf_r>
 80050da:	6813      	ldr	r3, [r2, #0]
 80050dc:	1c58      	adds	r0, r3, #1
 80050de:	6010      	str	r0, [r2, #0]
 80050e0:	7019      	strb	r1, [r3, #0]
 80050e2:	4608      	mov	r0, r1
 80050e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <__sfputs_r>:
 80050ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ec:	4606      	mov	r6, r0
 80050ee:	460f      	mov	r7, r1
 80050f0:	4614      	mov	r4, r2
 80050f2:	18d5      	adds	r5, r2, r3
 80050f4:	42ac      	cmp	r4, r5
 80050f6:	d101      	bne.n	80050fc <__sfputs_r+0x12>
 80050f8:	2000      	movs	r0, #0
 80050fa:	e007      	b.n	800510c <__sfputs_r+0x22>
 80050fc:	463a      	mov	r2, r7
 80050fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005102:	4630      	mov	r0, r6
 8005104:	f7ff ffda 	bl	80050bc <__sfputc_r>
 8005108:	1c43      	adds	r3, r0, #1
 800510a:	d1f3      	bne.n	80050f4 <__sfputs_r+0xa>
 800510c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005110 <_vfiprintf_r>:
 8005110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005114:	460c      	mov	r4, r1
 8005116:	b09d      	sub	sp, #116	; 0x74
 8005118:	4617      	mov	r7, r2
 800511a:	461d      	mov	r5, r3
 800511c:	4606      	mov	r6, r0
 800511e:	b118      	cbz	r0, 8005128 <_vfiprintf_r+0x18>
 8005120:	6983      	ldr	r3, [r0, #24]
 8005122:	b90b      	cbnz	r3, 8005128 <_vfiprintf_r+0x18>
 8005124:	f7ff fee6 	bl	8004ef4 <__sinit>
 8005128:	4b7c      	ldr	r3, [pc, #496]	; (800531c <_vfiprintf_r+0x20c>)
 800512a:	429c      	cmp	r4, r3
 800512c:	d158      	bne.n	80051e0 <_vfiprintf_r+0xd0>
 800512e:	6874      	ldr	r4, [r6, #4]
 8005130:	89a3      	ldrh	r3, [r4, #12]
 8005132:	0718      	lsls	r0, r3, #28
 8005134:	d55e      	bpl.n	80051f4 <_vfiprintf_r+0xe4>
 8005136:	6923      	ldr	r3, [r4, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d05b      	beq.n	80051f4 <_vfiprintf_r+0xe4>
 800513c:	2300      	movs	r3, #0
 800513e:	9309      	str	r3, [sp, #36]	; 0x24
 8005140:	2320      	movs	r3, #32
 8005142:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005146:	2330      	movs	r3, #48	; 0x30
 8005148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800514c:	9503      	str	r5, [sp, #12]
 800514e:	f04f 0b01 	mov.w	fp, #1
 8005152:	46b8      	mov	r8, r7
 8005154:	4645      	mov	r5, r8
 8005156:	f815 3b01 	ldrb.w	r3, [r5], #1
 800515a:	b10b      	cbz	r3, 8005160 <_vfiprintf_r+0x50>
 800515c:	2b25      	cmp	r3, #37	; 0x25
 800515e:	d154      	bne.n	800520a <_vfiprintf_r+0xfa>
 8005160:	ebb8 0a07 	subs.w	sl, r8, r7
 8005164:	d00b      	beq.n	800517e <_vfiprintf_r+0x6e>
 8005166:	4653      	mov	r3, sl
 8005168:	463a      	mov	r2, r7
 800516a:	4621      	mov	r1, r4
 800516c:	4630      	mov	r0, r6
 800516e:	f7ff ffbc 	bl	80050ea <__sfputs_r>
 8005172:	3001      	adds	r0, #1
 8005174:	f000 80c2 	beq.w	80052fc <_vfiprintf_r+0x1ec>
 8005178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800517a:	4453      	add	r3, sl
 800517c:	9309      	str	r3, [sp, #36]	; 0x24
 800517e:	f898 3000 	ldrb.w	r3, [r8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 80ba 	beq.w	80052fc <_vfiprintf_r+0x1ec>
 8005188:	2300      	movs	r3, #0
 800518a:	f04f 32ff 	mov.w	r2, #4294967295
 800518e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005192:	9304      	str	r3, [sp, #16]
 8005194:	9307      	str	r3, [sp, #28]
 8005196:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800519a:	931a      	str	r3, [sp, #104]	; 0x68
 800519c:	46a8      	mov	r8, r5
 800519e:	2205      	movs	r2, #5
 80051a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80051a4:	485e      	ldr	r0, [pc, #376]	; (8005320 <_vfiprintf_r+0x210>)
 80051a6:	f7fb f813 	bl	80001d0 <memchr>
 80051aa:	9b04      	ldr	r3, [sp, #16]
 80051ac:	bb78      	cbnz	r0, 800520e <_vfiprintf_r+0xfe>
 80051ae:	06d9      	lsls	r1, r3, #27
 80051b0:	bf44      	itt	mi
 80051b2:	2220      	movmi	r2, #32
 80051b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051b8:	071a      	lsls	r2, r3, #28
 80051ba:	bf44      	itt	mi
 80051bc:	222b      	movmi	r2, #43	; 0x2b
 80051be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051c2:	782a      	ldrb	r2, [r5, #0]
 80051c4:	2a2a      	cmp	r2, #42	; 0x2a
 80051c6:	d02a      	beq.n	800521e <_vfiprintf_r+0x10e>
 80051c8:	9a07      	ldr	r2, [sp, #28]
 80051ca:	46a8      	mov	r8, r5
 80051cc:	2000      	movs	r0, #0
 80051ce:	250a      	movs	r5, #10
 80051d0:	4641      	mov	r1, r8
 80051d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051d6:	3b30      	subs	r3, #48	; 0x30
 80051d8:	2b09      	cmp	r3, #9
 80051da:	d969      	bls.n	80052b0 <_vfiprintf_r+0x1a0>
 80051dc:	b360      	cbz	r0, 8005238 <_vfiprintf_r+0x128>
 80051de:	e024      	b.n	800522a <_vfiprintf_r+0x11a>
 80051e0:	4b50      	ldr	r3, [pc, #320]	; (8005324 <_vfiprintf_r+0x214>)
 80051e2:	429c      	cmp	r4, r3
 80051e4:	d101      	bne.n	80051ea <_vfiprintf_r+0xda>
 80051e6:	68b4      	ldr	r4, [r6, #8]
 80051e8:	e7a2      	b.n	8005130 <_vfiprintf_r+0x20>
 80051ea:	4b4f      	ldr	r3, [pc, #316]	; (8005328 <_vfiprintf_r+0x218>)
 80051ec:	429c      	cmp	r4, r3
 80051ee:	bf08      	it	eq
 80051f0:	68f4      	ldreq	r4, [r6, #12]
 80051f2:	e79d      	b.n	8005130 <_vfiprintf_r+0x20>
 80051f4:	4621      	mov	r1, r4
 80051f6:	4630      	mov	r0, r6
 80051f8:	f000 fae0 	bl	80057bc <__swsetup_r>
 80051fc:	2800      	cmp	r0, #0
 80051fe:	d09d      	beq.n	800513c <_vfiprintf_r+0x2c>
 8005200:	f04f 30ff 	mov.w	r0, #4294967295
 8005204:	b01d      	add	sp, #116	; 0x74
 8005206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800520a:	46a8      	mov	r8, r5
 800520c:	e7a2      	b.n	8005154 <_vfiprintf_r+0x44>
 800520e:	4a44      	ldr	r2, [pc, #272]	; (8005320 <_vfiprintf_r+0x210>)
 8005210:	1a80      	subs	r0, r0, r2
 8005212:	fa0b f000 	lsl.w	r0, fp, r0
 8005216:	4318      	orrs	r0, r3
 8005218:	9004      	str	r0, [sp, #16]
 800521a:	4645      	mov	r5, r8
 800521c:	e7be      	b.n	800519c <_vfiprintf_r+0x8c>
 800521e:	9a03      	ldr	r2, [sp, #12]
 8005220:	1d11      	adds	r1, r2, #4
 8005222:	6812      	ldr	r2, [r2, #0]
 8005224:	9103      	str	r1, [sp, #12]
 8005226:	2a00      	cmp	r2, #0
 8005228:	db01      	blt.n	800522e <_vfiprintf_r+0x11e>
 800522a:	9207      	str	r2, [sp, #28]
 800522c:	e004      	b.n	8005238 <_vfiprintf_r+0x128>
 800522e:	4252      	negs	r2, r2
 8005230:	f043 0302 	orr.w	r3, r3, #2
 8005234:	9207      	str	r2, [sp, #28]
 8005236:	9304      	str	r3, [sp, #16]
 8005238:	f898 3000 	ldrb.w	r3, [r8]
 800523c:	2b2e      	cmp	r3, #46	; 0x2e
 800523e:	d10e      	bne.n	800525e <_vfiprintf_r+0x14e>
 8005240:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005244:	2b2a      	cmp	r3, #42	; 0x2a
 8005246:	d138      	bne.n	80052ba <_vfiprintf_r+0x1aa>
 8005248:	9b03      	ldr	r3, [sp, #12]
 800524a:	1d1a      	adds	r2, r3, #4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	9203      	str	r2, [sp, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	bfb8      	it	lt
 8005254:	f04f 33ff 	movlt.w	r3, #4294967295
 8005258:	f108 0802 	add.w	r8, r8, #2
 800525c:	9305      	str	r3, [sp, #20]
 800525e:	4d33      	ldr	r5, [pc, #204]	; (800532c <_vfiprintf_r+0x21c>)
 8005260:	f898 1000 	ldrb.w	r1, [r8]
 8005264:	2203      	movs	r2, #3
 8005266:	4628      	mov	r0, r5
 8005268:	f7fa ffb2 	bl	80001d0 <memchr>
 800526c:	b140      	cbz	r0, 8005280 <_vfiprintf_r+0x170>
 800526e:	2340      	movs	r3, #64	; 0x40
 8005270:	1b40      	subs	r0, r0, r5
 8005272:	fa03 f000 	lsl.w	r0, r3, r0
 8005276:	9b04      	ldr	r3, [sp, #16]
 8005278:	4303      	orrs	r3, r0
 800527a:	f108 0801 	add.w	r8, r8, #1
 800527e:	9304      	str	r3, [sp, #16]
 8005280:	f898 1000 	ldrb.w	r1, [r8]
 8005284:	482a      	ldr	r0, [pc, #168]	; (8005330 <_vfiprintf_r+0x220>)
 8005286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800528a:	2206      	movs	r2, #6
 800528c:	f108 0701 	add.w	r7, r8, #1
 8005290:	f7fa ff9e 	bl	80001d0 <memchr>
 8005294:	2800      	cmp	r0, #0
 8005296:	d037      	beq.n	8005308 <_vfiprintf_r+0x1f8>
 8005298:	4b26      	ldr	r3, [pc, #152]	; (8005334 <_vfiprintf_r+0x224>)
 800529a:	bb1b      	cbnz	r3, 80052e4 <_vfiprintf_r+0x1d4>
 800529c:	9b03      	ldr	r3, [sp, #12]
 800529e:	3307      	adds	r3, #7
 80052a0:	f023 0307 	bic.w	r3, r3, #7
 80052a4:	3308      	adds	r3, #8
 80052a6:	9303      	str	r3, [sp, #12]
 80052a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052aa:	444b      	add	r3, r9
 80052ac:	9309      	str	r3, [sp, #36]	; 0x24
 80052ae:	e750      	b.n	8005152 <_vfiprintf_r+0x42>
 80052b0:	fb05 3202 	mla	r2, r5, r2, r3
 80052b4:	2001      	movs	r0, #1
 80052b6:	4688      	mov	r8, r1
 80052b8:	e78a      	b.n	80051d0 <_vfiprintf_r+0xc0>
 80052ba:	2300      	movs	r3, #0
 80052bc:	f108 0801 	add.w	r8, r8, #1
 80052c0:	9305      	str	r3, [sp, #20]
 80052c2:	4619      	mov	r1, r3
 80052c4:	250a      	movs	r5, #10
 80052c6:	4640      	mov	r0, r8
 80052c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052cc:	3a30      	subs	r2, #48	; 0x30
 80052ce:	2a09      	cmp	r2, #9
 80052d0:	d903      	bls.n	80052da <_vfiprintf_r+0x1ca>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0c3      	beq.n	800525e <_vfiprintf_r+0x14e>
 80052d6:	9105      	str	r1, [sp, #20]
 80052d8:	e7c1      	b.n	800525e <_vfiprintf_r+0x14e>
 80052da:	fb05 2101 	mla	r1, r5, r1, r2
 80052de:	2301      	movs	r3, #1
 80052e0:	4680      	mov	r8, r0
 80052e2:	e7f0      	b.n	80052c6 <_vfiprintf_r+0x1b6>
 80052e4:	ab03      	add	r3, sp, #12
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	4622      	mov	r2, r4
 80052ea:	4b13      	ldr	r3, [pc, #76]	; (8005338 <_vfiprintf_r+0x228>)
 80052ec:	a904      	add	r1, sp, #16
 80052ee:	4630      	mov	r0, r6
 80052f0:	f3af 8000 	nop.w
 80052f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80052f8:	4681      	mov	r9, r0
 80052fa:	d1d5      	bne.n	80052a8 <_vfiprintf_r+0x198>
 80052fc:	89a3      	ldrh	r3, [r4, #12]
 80052fe:	065b      	lsls	r3, r3, #25
 8005300:	f53f af7e 	bmi.w	8005200 <_vfiprintf_r+0xf0>
 8005304:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005306:	e77d      	b.n	8005204 <_vfiprintf_r+0xf4>
 8005308:	ab03      	add	r3, sp, #12
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	4622      	mov	r2, r4
 800530e:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <_vfiprintf_r+0x228>)
 8005310:	a904      	add	r1, sp, #16
 8005312:	4630      	mov	r0, r6
 8005314:	f000 f888 	bl	8005428 <_printf_i>
 8005318:	e7ec      	b.n	80052f4 <_vfiprintf_r+0x1e4>
 800531a:	bf00      	nop
 800531c:	08005cc8 	.word	0x08005cc8
 8005320:	08005d08 	.word	0x08005d08
 8005324:	08005ce8 	.word	0x08005ce8
 8005328:	08005ca8 	.word	0x08005ca8
 800532c:	08005d0e 	.word	0x08005d0e
 8005330:	08005d12 	.word	0x08005d12
 8005334:	00000000 	.word	0x00000000
 8005338:	080050eb 	.word	0x080050eb

0800533c <_printf_common>:
 800533c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005340:	4691      	mov	r9, r2
 8005342:	461f      	mov	r7, r3
 8005344:	688a      	ldr	r2, [r1, #8]
 8005346:	690b      	ldr	r3, [r1, #16]
 8005348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800534c:	4293      	cmp	r3, r2
 800534e:	bfb8      	it	lt
 8005350:	4613      	movlt	r3, r2
 8005352:	f8c9 3000 	str.w	r3, [r9]
 8005356:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800535a:	4606      	mov	r6, r0
 800535c:	460c      	mov	r4, r1
 800535e:	b112      	cbz	r2, 8005366 <_printf_common+0x2a>
 8005360:	3301      	adds	r3, #1
 8005362:	f8c9 3000 	str.w	r3, [r9]
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	0699      	lsls	r1, r3, #26
 800536a:	bf42      	ittt	mi
 800536c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005370:	3302      	addmi	r3, #2
 8005372:	f8c9 3000 	strmi.w	r3, [r9]
 8005376:	6825      	ldr	r5, [r4, #0]
 8005378:	f015 0506 	ands.w	r5, r5, #6
 800537c:	d107      	bne.n	800538e <_printf_common+0x52>
 800537e:	f104 0a19 	add.w	sl, r4, #25
 8005382:	68e3      	ldr	r3, [r4, #12]
 8005384:	f8d9 2000 	ldr.w	r2, [r9]
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	42ab      	cmp	r3, r5
 800538c:	dc28      	bgt.n	80053e0 <_printf_common+0xa4>
 800538e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005392:	6822      	ldr	r2, [r4, #0]
 8005394:	3300      	adds	r3, #0
 8005396:	bf18      	it	ne
 8005398:	2301      	movne	r3, #1
 800539a:	0692      	lsls	r2, r2, #26
 800539c:	d42d      	bmi.n	80053fa <_printf_common+0xbe>
 800539e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053a2:	4639      	mov	r1, r7
 80053a4:	4630      	mov	r0, r6
 80053a6:	47c0      	blx	r8
 80053a8:	3001      	adds	r0, #1
 80053aa:	d020      	beq.n	80053ee <_printf_common+0xb2>
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	68e5      	ldr	r5, [r4, #12]
 80053b0:	f8d9 2000 	ldr.w	r2, [r9]
 80053b4:	f003 0306 	and.w	r3, r3, #6
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	bf08      	it	eq
 80053bc:	1aad      	subeq	r5, r5, r2
 80053be:	68a3      	ldr	r3, [r4, #8]
 80053c0:	6922      	ldr	r2, [r4, #16]
 80053c2:	bf0c      	ite	eq
 80053c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053c8:	2500      	movne	r5, #0
 80053ca:	4293      	cmp	r3, r2
 80053cc:	bfc4      	itt	gt
 80053ce:	1a9b      	subgt	r3, r3, r2
 80053d0:	18ed      	addgt	r5, r5, r3
 80053d2:	f04f 0900 	mov.w	r9, #0
 80053d6:	341a      	adds	r4, #26
 80053d8:	454d      	cmp	r5, r9
 80053da:	d11a      	bne.n	8005412 <_printf_common+0xd6>
 80053dc:	2000      	movs	r0, #0
 80053de:	e008      	b.n	80053f2 <_printf_common+0xb6>
 80053e0:	2301      	movs	r3, #1
 80053e2:	4652      	mov	r2, sl
 80053e4:	4639      	mov	r1, r7
 80053e6:	4630      	mov	r0, r6
 80053e8:	47c0      	blx	r8
 80053ea:	3001      	adds	r0, #1
 80053ec:	d103      	bne.n	80053f6 <_printf_common+0xba>
 80053ee:	f04f 30ff 	mov.w	r0, #4294967295
 80053f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f6:	3501      	adds	r5, #1
 80053f8:	e7c3      	b.n	8005382 <_printf_common+0x46>
 80053fa:	18e1      	adds	r1, r4, r3
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	2030      	movs	r0, #48	; 0x30
 8005400:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005404:	4422      	add	r2, r4
 8005406:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800540a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800540e:	3302      	adds	r3, #2
 8005410:	e7c5      	b.n	800539e <_printf_common+0x62>
 8005412:	2301      	movs	r3, #1
 8005414:	4622      	mov	r2, r4
 8005416:	4639      	mov	r1, r7
 8005418:	4630      	mov	r0, r6
 800541a:	47c0      	blx	r8
 800541c:	3001      	adds	r0, #1
 800541e:	d0e6      	beq.n	80053ee <_printf_common+0xb2>
 8005420:	f109 0901 	add.w	r9, r9, #1
 8005424:	e7d8      	b.n	80053d8 <_printf_common+0x9c>
	...

08005428 <_printf_i>:
 8005428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800542c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005430:	460c      	mov	r4, r1
 8005432:	7e09      	ldrb	r1, [r1, #24]
 8005434:	b085      	sub	sp, #20
 8005436:	296e      	cmp	r1, #110	; 0x6e
 8005438:	4617      	mov	r7, r2
 800543a:	4606      	mov	r6, r0
 800543c:	4698      	mov	r8, r3
 800543e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005440:	f000 80b3 	beq.w	80055aa <_printf_i+0x182>
 8005444:	d822      	bhi.n	800548c <_printf_i+0x64>
 8005446:	2963      	cmp	r1, #99	; 0x63
 8005448:	d036      	beq.n	80054b8 <_printf_i+0x90>
 800544a:	d80a      	bhi.n	8005462 <_printf_i+0x3a>
 800544c:	2900      	cmp	r1, #0
 800544e:	f000 80b9 	beq.w	80055c4 <_printf_i+0x19c>
 8005452:	2958      	cmp	r1, #88	; 0x58
 8005454:	f000 8083 	beq.w	800555e <_printf_i+0x136>
 8005458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800545c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005460:	e032      	b.n	80054c8 <_printf_i+0xa0>
 8005462:	2964      	cmp	r1, #100	; 0x64
 8005464:	d001      	beq.n	800546a <_printf_i+0x42>
 8005466:	2969      	cmp	r1, #105	; 0x69
 8005468:	d1f6      	bne.n	8005458 <_printf_i+0x30>
 800546a:	6820      	ldr	r0, [r4, #0]
 800546c:	6813      	ldr	r3, [r2, #0]
 800546e:	0605      	lsls	r5, r0, #24
 8005470:	f103 0104 	add.w	r1, r3, #4
 8005474:	d52a      	bpl.n	80054cc <_printf_i+0xa4>
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6011      	str	r1, [r2, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	da03      	bge.n	8005486 <_printf_i+0x5e>
 800547e:	222d      	movs	r2, #45	; 0x2d
 8005480:	425b      	negs	r3, r3
 8005482:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005486:	486f      	ldr	r0, [pc, #444]	; (8005644 <_printf_i+0x21c>)
 8005488:	220a      	movs	r2, #10
 800548a:	e039      	b.n	8005500 <_printf_i+0xd8>
 800548c:	2973      	cmp	r1, #115	; 0x73
 800548e:	f000 809d 	beq.w	80055cc <_printf_i+0x1a4>
 8005492:	d808      	bhi.n	80054a6 <_printf_i+0x7e>
 8005494:	296f      	cmp	r1, #111	; 0x6f
 8005496:	d020      	beq.n	80054da <_printf_i+0xb2>
 8005498:	2970      	cmp	r1, #112	; 0x70
 800549a:	d1dd      	bne.n	8005458 <_printf_i+0x30>
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	f043 0320 	orr.w	r3, r3, #32
 80054a2:	6023      	str	r3, [r4, #0]
 80054a4:	e003      	b.n	80054ae <_printf_i+0x86>
 80054a6:	2975      	cmp	r1, #117	; 0x75
 80054a8:	d017      	beq.n	80054da <_printf_i+0xb2>
 80054aa:	2978      	cmp	r1, #120	; 0x78
 80054ac:	d1d4      	bne.n	8005458 <_printf_i+0x30>
 80054ae:	2378      	movs	r3, #120	; 0x78
 80054b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054b4:	4864      	ldr	r0, [pc, #400]	; (8005648 <_printf_i+0x220>)
 80054b6:	e055      	b.n	8005564 <_printf_i+0x13c>
 80054b8:	6813      	ldr	r3, [r2, #0]
 80054ba:	1d19      	adds	r1, r3, #4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6011      	str	r1, [r2, #0]
 80054c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054c8:	2301      	movs	r3, #1
 80054ca:	e08c      	b.n	80055e6 <_printf_i+0x1be>
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6011      	str	r1, [r2, #0]
 80054d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054d4:	bf18      	it	ne
 80054d6:	b21b      	sxthne	r3, r3
 80054d8:	e7cf      	b.n	800547a <_printf_i+0x52>
 80054da:	6813      	ldr	r3, [r2, #0]
 80054dc:	6825      	ldr	r5, [r4, #0]
 80054de:	1d18      	adds	r0, r3, #4
 80054e0:	6010      	str	r0, [r2, #0]
 80054e2:	0628      	lsls	r0, r5, #24
 80054e4:	d501      	bpl.n	80054ea <_printf_i+0xc2>
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	e002      	b.n	80054f0 <_printf_i+0xc8>
 80054ea:	0668      	lsls	r0, r5, #25
 80054ec:	d5fb      	bpl.n	80054e6 <_printf_i+0xbe>
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	4854      	ldr	r0, [pc, #336]	; (8005644 <_printf_i+0x21c>)
 80054f2:	296f      	cmp	r1, #111	; 0x6f
 80054f4:	bf14      	ite	ne
 80054f6:	220a      	movne	r2, #10
 80054f8:	2208      	moveq	r2, #8
 80054fa:	2100      	movs	r1, #0
 80054fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005500:	6865      	ldr	r5, [r4, #4]
 8005502:	60a5      	str	r5, [r4, #8]
 8005504:	2d00      	cmp	r5, #0
 8005506:	f2c0 8095 	blt.w	8005634 <_printf_i+0x20c>
 800550a:	6821      	ldr	r1, [r4, #0]
 800550c:	f021 0104 	bic.w	r1, r1, #4
 8005510:	6021      	str	r1, [r4, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d13d      	bne.n	8005592 <_printf_i+0x16a>
 8005516:	2d00      	cmp	r5, #0
 8005518:	f040 808e 	bne.w	8005638 <_printf_i+0x210>
 800551c:	4665      	mov	r5, ip
 800551e:	2a08      	cmp	r2, #8
 8005520:	d10b      	bne.n	800553a <_printf_i+0x112>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	07db      	lsls	r3, r3, #31
 8005526:	d508      	bpl.n	800553a <_printf_i+0x112>
 8005528:	6923      	ldr	r3, [r4, #16]
 800552a:	6862      	ldr	r2, [r4, #4]
 800552c:	429a      	cmp	r2, r3
 800552e:	bfde      	ittt	le
 8005530:	2330      	movle	r3, #48	; 0x30
 8005532:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005536:	f105 35ff 	addle.w	r5, r5, #4294967295
 800553a:	ebac 0305 	sub.w	r3, ip, r5
 800553e:	6123      	str	r3, [r4, #16]
 8005540:	f8cd 8000 	str.w	r8, [sp]
 8005544:	463b      	mov	r3, r7
 8005546:	aa03      	add	r2, sp, #12
 8005548:	4621      	mov	r1, r4
 800554a:	4630      	mov	r0, r6
 800554c:	f7ff fef6 	bl	800533c <_printf_common>
 8005550:	3001      	adds	r0, #1
 8005552:	d14d      	bne.n	80055f0 <_printf_i+0x1c8>
 8005554:	f04f 30ff 	mov.w	r0, #4294967295
 8005558:	b005      	add	sp, #20
 800555a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800555e:	4839      	ldr	r0, [pc, #228]	; (8005644 <_printf_i+0x21c>)
 8005560:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005564:	6813      	ldr	r3, [r2, #0]
 8005566:	6821      	ldr	r1, [r4, #0]
 8005568:	1d1d      	adds	r5, r3, #4
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6015      	str	r5, [r2, #0]
 800556e:	060a      	lsls	r2, r1, #24
 8005570:	d50b      	bpl.n	800558a <_printf_i+0x162>
 8005572:	07ca      	lsls	r2, r1, #31
 8005574:	bf44      	itt	mi
 8005576:	f041 0120 	orrmi.w	r1, r1, #32
 800557a:	6021      	strmi	r1, [r4, #0]
 800557c:	b91b      	cbnz	r3, 8005586 <_printf_i+0x15e>
 800557e:	6822      	ldr	r2, [r4, #0]
 8005580:	f022 0220 	bic.w	r2, r2, #32
 8005584:	6022      	str	r2, [r4, #0]
 8005586:	2210      	movs	r2, #16
 8005588:	e7b7      	b.n	80054fa <_printf_i+0xd2>
 800558a:	064d      	lsls	r5, r1, #25
 800558c:	bf48      	it	mi
 800558e:	b29b      	uxthmi	r3, r3
 8005590:	e7ef      	b.n	8005572 <_printf_i+0x14a>
 8005592:	4665      	mov	r5, ip
 8005594:	fbb3 f1f2 	udiv	r1, r3, r2
 8005598:	fb02 3311 	mls	r3, r2, r1, r3
 800559c:	5cc3      	ldrb	r3, [r0, r3]
 800559e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80055a2:	460b      	mov	r3, r1
 80055a4:	2900      	cmp	r1, #0
 80055a6:	d1f5      	bne.n	8005594 <_printf_i+0x16c>
 80055a8:	e7b9      	b.n	800551e <_printf_i+0xf6>
 80055aa:	6813      	ldr	r3, [r2, #0]
 80055ac:	6825      	ldr	r5, [r4, #0]
 80055ae:	6961      	ldr	r1, [r4, #20]
 80055b0:	1d18      	adds	r0, r3, #4
 80055b2:	6010      	str	r0, [r2, #0]
 80055b4:	0628      	lsls	r0, r5, #24
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	d501      	bpl.n	80055be <_printf_i+0x196>
 80055ba:	6019      	str	r1, [r3, #0]
 80055bc:	e002      	b.n	80055c4 <_printf_i+0x19c>
 80055be:	066a      	lsls	r2, r5, #25
 80055c0:	d5fb      	bpl.n	80055ba <_printf_i+0x192>
 80055c2:	8019      	strh	r1, [r3, #0]
 80055c4:	2300      	movs	r3, #0
 80055c6:	6123      	str	r3, [r4, #16]
 80055c8:	4665      	mov	r5, ip
 80055ca:	e7b9      	b.n	8005540 <_printf_i+0x118>
 80055cc:	6813      	ldr	r3, [r2, #0]
 80055ce:	1d19      	adds	r1, r3, #4
 80055d0:	6011      	str	r1, [r2, #0]
 80055d2:	681d      	ldr	r5, [r3, #0]
 80055d4:	6862      	ldr	r2, [r4, #4]
 80055d6:	2100      	movs	r1, #0
 80055d8:	4628      	mov	r0, r5
 80055da:	f7fa fdf9 	bl	80001d0 <memchr>
 80055de:	b108      	cbz	r0, 80055e4 <_printf_i+0x1bc>
 80055e0:	1b40      	subs	r0, r0, r5
 80055e2:	6060      	str	r0, [r4, #4]
 80055e4:	6863      	ldr	r3, [r4, #4]
 80055e6:	6123      	str	r3, [r4, #16]
 80055e8:	2300      	movs	r3, #0
 80055ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ee:	e7a7      	b.n	8005540 <_printf_i+0x118>
 80055f0:	6923      	ldr	r3, [r4, #16]
 80055f2:	462a      	mov	r2, r5
 80055f4:	4639      	mov	r1, r7
 80055f6:	4630      	mov	r0, r6
 80055f8:	47c0      	blx	r8
 80055fa:	3001      	adds	r0, #1
 80055fc:	d0aa      	beq.n	8005554 <_printf_i+0x12c>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	079b      	lsls	r3, r3, #30
 8005602:	d413      	bmi.n	800562c <_printf_i+0x204>
 8005604:	68e0      	ldr	r0, [r4, #12]
 8005606:	9b03      	ldr	r3, [sp, #12]
 8005608:	4298      	cmp	r0, r3
 800560a:	bfb8      	it	lt
 800560c:	4618      	movlt	r0, r3
 800560e:	e7a3      	b.n	8005558 <_printf_i+0x130>
 8005610:	2301      	movs	r3, #1
 8005612:	464a      	mov	r2, r9
 8005614:	4639      	mov	r1, r7
 8005616:	4630      	mov	r0, r6
 8005618:	47c0      	blx	r8
 800561a:	3001      	adds	r0, #1
 800561c:	d09a      	beq.n	8005554 <_printf_i+0x12c>
 800561e:	3501      	adds	r5, #1
 8005620:	68e3      	ldr	r3, [r4, #12]
 8005622:	9a03      	ldr	r2, [sp, #12]
 8005624:	1a9b      	subs	r3, r3, r2
 8005626:	42ab      	cmp	r3, r5
 8005628:	dcf2      	bgt.n	8005610 <_printf_i+0x1e8>
 800562a:	e7eb      	b.n	8005604 <_printf_i+0x1dc>
 800562c:	2500      	movs	r5, #0
 800562e:	f104 0919 	add.w	r9, r4, #25
 8005632:	e7f5      	b.n	8005620 <_printf_i+0x1f8>
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1ac      	bne.n	8005592 <_printf_i+0x16a>
 8005638:	7803      	ldrb	r3, [r0, #0]
 800563a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800563e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005642:	e76c      	b.n	800551e <_printf_i+0xf6>
 8005644:	08005d19 	.word	0x08005d19
 8005648:	08005d2a 	.word	0x08005d2a

0800564c <_sbrk_r>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	4c06      	ldr	r4, [pc, #24]	; (8005668 <_sbrk_r+0x1c>)
 8005650:	2300      	movs	r3, #0
 8005652:	4605      	mov	r5, r0
 8005654:	4608      	mov	r0, r1
 8005656:	6023      	str	r3, [r4, #0]
 8005658:	f7fb fa2a 	bl	8000ab0 <_sbrk>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	d102      	bne.n	8005666 <_sbrk_r+0x1a>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	b103      	cbz	r3, 8005666 <_sbrk_r+0x1a>
 8005664:	602b      	str	r3, [r5, #0]
 8005666:	bd38      	pop	{r3, r4, r5, pc}
 8005668:	20000260 	.word	0x20000260

0800566c <__sread>:
 800566c:	b510      	push	{r4, lr}
 800566e:	460c      	mov	r4, r1
 8005670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005674:	f000 fa96 	bl	8005ba4 <_read_r>
 8005678:	2800      	cmp	r0, #0
 800567a:	bfab      	itete	ge
 800567c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800567e:	89a3      	ldrhlt	r3, [r4, #12]
 8005680:	181b      	addge	r3, r3, r0
 8005682:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005686:	bfac      	ite	ge
 8005688:	6563      	strge	r3, [r4, #84]	; 0x54
 800568a:	81a3      	strhlt	r3, [r4, #12]
 800568c:	bd10      	pop	{r4, pc}

0800568e <__swrite>:
 800568e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005692:	461f      	mov	r7, r3
 8005694:	898b      	ldrh	r3, [r1, #12]
 8005696:	05db      	lsls	r3, r3, #23
 8005698:	4605      	mov	r5, r0
 800569a:	460c      	mov	r4, r1
 800569c:	4616      	mov	r6, r2
 800569e:	d505      	bpl.n	80056ac <__swrite+0x1e>
 80056a0:	2302      	movs	r3, #2
 80056a2:	2200      	movs	r2, #0
 80056a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a8:	f000 f9b6 	bl	8005a18 <_lseek_r>
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056b6:	81a3      	strh	r3, [r4, #12]
 80056b8:	4632      	mov	r2, r6
 80056ba:	463b      	mov	r3, r7
 80056bc:	4628      	mov	r0, r5
 80056be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056c2:	f000 b869 	b.w	8005798 <_write_r>

080056c6 <__sseek>:
 80056c6:	b510      	push	{r4, lr}
 80056c8:	460c      	mov	r4, r1
 80056ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ce:	f000 f9a3 	bl	8005a18 <_lseek_r>
 80056d2:	1c43      	adds	r3, r0, #1
 80056d4:	89a3      	ldrh	r3, [r4, #12]
 80056d6:	bf15      	itete	ne
 80056d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80056da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056e2:	81a3      	strheq	r3, [r4, #12]
 80056e4:	bf18      	it	ne
 80056e6:	81a3      	strhne	r3, [r4, #12]
 80056e8:	bd10      	pop	{r4, pc}

080056ea <__sclose>:
 80056ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ee:	f000 b8d3 	b.w	8005898 <_close_r>
	...

080056f4 <__swbuf_r>:
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f6:	460e      	mov	r6, r1
 80056f8:	4614      	mov	r4, r2
 80056fa:	4605      	mov	r5, r0
 80056fc:	b118      	cbz	r0, 8005706 <__swbuf_r+0x12>
 80056fe:	6983      	ldr	r3, [r0, #24]
 8005700:	b90b      	cbnz	r3, 8005706 <__swbuf_r+0x12>
 8005702:	f7ff fbf7 	bl	8004ef4 <__sinit>
 8005706:	4b21      	ldr	r3, [pc, #132]	; (800578c <__swbuf_r+0x98>)
 8005708:	429c      	cmp	r4, r3
 800570a:	d12a      	bne.n	8005762 <__swbuf_r+0x6e>
 800570c:	686c      	ldr	r4, [r5, #4]
 800570e:	69a3      	ldr	r3, [r4, #24]
 8005710:	60a3      	str	r3, [r4, #8]
 8005712:	89a3      	ldrh	r3, [r4, #12]
 8005714:	071a      	lsls	r2, r3, #28
 8005716:	d52e      	bpl.n	8005776 <__swbuf_r+0x82>
 8005718:	6923      	ldr	r3, [r4, #16]
 800571a:	b363      	cbz	r3, 8005776 <__swbuf_r+0x82>
 800571c:	6923      	ldr	r3, [r4, #16]
 800571e:	6820      	ldr	r0, [r4, #0]
 8005720:	1ac0      	subs	r0, r0, r3
 8005722:	6963      	ldr	r3, [r4, #20]
 8005724:	b2f6      	uxtb	r6, r6
 8005726:	4283      	cmp	r3, r0
 8005728:	4637      	mov	r7, r6
 800572a:	dc04      	bgt.n	8005736 <__swbuf_r+0x42>
 800572c:	4621      	mov	r1, r4
 800572e:	4628      	mov	r0, r5
 8005730:	f000 f948 	bl	80059c4 <_fflush_r>
 8005734:	bb28      	cbnz	r0, 8005782 <__swbuf_r+0x8e>
 8005736:	68a3      	ldr	r3, [r4, #8]
 8005738:	3b01      	subs	r3, #1
 800573a:	60a3      	str	r3, [r4, #8]
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	6022      	str	r2, [r4, #0]
 8005742:	701e      	strb	r6, [r3, #0]
 8005744:	6963      	ldr	r3, [r4, #20]
 8005746:	3001      	adds	r0, #1
 8005748:	4283      	cmp	r3, r0
 800574a:	d004      	beq.n	8005756 <__swbuf_r+0x62>
 800574c:	89a3      	ldrh	r3, [r4, #12]
 800574e:	07db      	lsls	r3, r3, #31
 8005750:	d519      	bpl.n	8005786 <__swbuf_r+0x92>
 8005752:	2e0a      	cmp	r6, #10
 8005754:	d117      	bne.n	8005786 <__swbuf_r+0x92>
 8005756:	4621      	mov	r1, r4
 8005758:	4628      	mov	r0, r5
 800575a:	f000 f933 	bl	80059c4 <_fflush_r>
 800575e:	b190      	cbz	r0, 8005786 <__swbuf_r+0x92>
 8005760:	e00f      	b.n	8005782 <__swbuf_r+0x8e>
 8005762:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <__swbuf_r+0x9c>)
 8005764:	429c      	cmp	r4, r3
 8005766:	d101      	bne.n	800576c <__swbuf_r+0x78>
 8005768:	68ac      	ldr	r4, [r5, #8]
 800576a:	e7d0      	b.n	800570e <__swbuf_r+0x1a>
 800576c:	4b09      	ldr	r3, [pc, #36]	; (8005794 <__swbuf_r+0xa0>)
 800576e:	429c      	cmp	r4, r3
 8005770:	bf08      	it	eq
 8005772:	68ec      	ldreq	r4, [r5, #12]
 8005774:	e7cb      	b.n	800570e <__swbuf_r+0x1a>
 8005776:	4621      	mov	r1, r4
 8005778:	4628      	mov	r0, r5
 800577a:	f000 f81f 	bl	80057bc <__swsetup_r>
 800577e:	2800      	cmp	r0, #0
 8005780:	d0cc      	beq.n	800571c <__swbuf_r+0x28>
 8005782:	f04f 37ff 	mov.w	r7, #4294967295
 8005786:	4638      	mov	r0, r7
 8005788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800578a:	bf00      	nop
 800578c:	08005cc8 	.word	0x08005cc8
 8005790:	08005ce8 	.word	0x08005ce8
 8005794:	08005ca8 	.word	0x08005ca8

08005798 <_write_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4c07      	ldr	r4, [pc, #28]	; (80057b8 <_write_r+0x20>)
 800579c:	4605      	mov	r5, r0
 800579e:	4608      	mov	r0, r1
 80057a0:	4611      	mov	r1, r2
 80057a2:	2200      	movs	r2, #0
 80057a4:	6022      	str	r2, [r4, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f7fa ffcc 	bl	8000744 <_write>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d102      	bne.n	80057b6 <_write_r+0x1e>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	b103      	cbz	r3, 80057b6 <_write_r+0x1e>
 80057b4:	602b      	str	r3, [r5, #0]
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	20000260 	.word	0x20000260

080057bc <__swsetup_r>:
 80057bc:	4b32      	ldr	r3, [pc, #200]	; (8005888 <__swsetup_r+0xcc>)
 80057be:	b570      	push	{r4, r5, r6, lr}
 80057c0:	681d      	ldr	r5, [r3, #0]
 80057c2:	4606      	mov	r6, r0
 80057c4:	460c      	mov	r4, r1
 80057c6:	b125      	cbz	r5, 80057d2 <__swsetup_r+0x16>
 80057c8:	69ab      	ldr	r3, [r5, #24]
 80057ca:	b913      	cbnz	r3, 80057d2 <__swsetup_r+0x16>
 80057cc:	4628      	mov	r0, r5
 80057ce:	f7ff fb91 	bl	8004ef4 <__sinit>
 80057d2:	4b2e      	ldr	r3, [pc, #184]	; (800588c <__swsetup_r+0xd0>)
 80057d4:	429c      	cmp	r4, r3
 80057d6:	d10f      	bne.n	80057f8 <__swsetup_r+0x3c>
 80057d8:	686c      	ldr	r4, [r5, #4]
 80057da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057de:	b29a      	uxth	r2, r3
 80057e0:	0715      	lsls	r5, r2, #28
 80057e2:	d42c      	bmi.n	800583e <__swsetup_r+0x82>
 80057e4:	06d0      	lsls	r0, r2, #27
 80057e6:	d411      	bmi.n	800580c <__swsetup_r+0x50>
 80057e8:	2209      	movs	r2, #9
 80057ea:	6032      	str	r2, [r6, #0]
 80057ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f0:	81a3      	strh	r3, [r4, #12]
 80057f2:	f04f 30ff 	mov.w	r0, #4294967295
 80057f6:	e03e      	b.n	8005876 <__swsetup_r+0xba>
 80057f8:	4b25      	ldr	r3, [pc, #148]	; (8005890 <__swsetup_r+0xd4>)
 80057fa:	429c      	cmp	r4, r3
 80057fc:	d101      	bne.n	8005802 <__swsetup_r+0x46>
 80057fe:	68ac      	ldr	r4, [r5, #8]
 8005800:	e7eb      	b.n	80057da <__swsetup_r+0x1e>
 8005802:	4b24      	ldr	r3, [pc, #144]	; (8005894 <__swsetup_r+0xd8>)
 8005804:	429c      	cmp	r4, r3
 8005806:	bf08      	it	eq
 8005808:	68ec      	ldreq	r4, [r5, #12]
 800580a:	e7e6      	b.n	80057da <__swsetup_r+0x1e>
 800580c:	0751      	lsls	r1, r2, #29
 800580e:	d512      	bpl.n	8005836 <__swsetup_r+0x7a>
 8005810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005812:	b141      	cbz	r1, 8005826 <__swsetup_r+0x6a>
 8005814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005818:	4299      	cmp	r1, r3
 800581a:	d002      	beq.n	8005822 <__swsetup_r+0x66>
 800581c:	4630      	mov	r0, r6
 800581e:	f000 f973 	bl	8005b08 <_free_r>
 8005822:	2300      	movs	r3, #0
 8005824:	6363      	str	r3, [r4, #52]	; 0x34
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800582c:	81a3      	strh	r3, [r4, #12]
 800582e:	2300      	movs	r3, #0
 8005830:	6063      	str	r3, [r4, #4]
 8005832:	6923      	ldr	r3, [r4, #16]
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	89a3      	ldrh	r3, [r4, #12]
 8005838:	f043 0308 	orr.w	r3, r3, #8
 800583c:	81a3      	strh	r3, [r4, #12]
 800583e:	6923      	ldr	r3, [r4, #16]
 8005840:	b94b      	cbnz	r3, 8005856 <__swsetup_r+0x9a>
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800584c:	d003      	beq.n	8005856 <__swsetup_r+0x9a>
 800584e:	4621      	mov	r1, r4
 8005850:	4630      	mov	r0, r6
 8005852:	f000 f917 	bl	8005a84 <__smakebuf_r>
 8005856:	89a2      	ldrh	r2, [r4, #12]
 8005858:	f012 0301 	ands.w	r3, r2, #1
 800585c:	d00c      	beq.n	8005878 <__swsetup_r+0xbc>
 800585e:	2300      	movs	r3, #0
 8005860:	60a3      	str	r3, [r4, #8]
 8005862:	6963      	ldr	r3, [r4, #20]
 8005864:	425b      	negs	r3, r3
 8005866:	61a3      	str	r3, [r4, #24]
 8005868:	6923      	ldr	r3, [r4, #16]
 800586a:	b953      	cbnz	r3, 8005882 <__swsetup_r+0xc6>
 800586c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005870:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005874:	d1ba      	bne.n	80057ec <__swsetup_r+0x30>
 8005876:	bd70      	pop	{r4, r5, r6, pc}
 8005878:	0792      	lsls	r2, r2, #30
 800587a:	bf58      	it	pl
 800587c:	6963      	ldrpl	r3, [r4, #20]
 800587e:	60a3      	str	r3, [r4, #8]
 8005880:	e7f2      	b.n	8005868 <__swsetup_r+0xac>
 8005882:	2000      	movs	r0, #0
 8005884:	e7f7      	b.n	8005876 <__swsetup_r+0xba>
 8005886:	bf00      	nop
 8005888:	2000000c 	.word	0x2000000c
 800588c:	08005cc8 	.word	0x08005cc8
 8005890:	08005ce8 	.word	0x08005ce8
 8005894:	08005ca8 	.word	0x08005ca8

08005898 <_close_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	4c06      	ldr	r4, [pc, #24]	; (80058b4 <_close_r+0x1c>)
 800589c:	2300      	movs	r3, #0
 800589e:	4605      	mov	r5, r0
 80058a0:	4608      	mov	r0, r1
 80058a2:	6023      	str	r3, [r4, #0]
 80058a4:	f7fb f8cf 	bl	8000a46 <_close>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	d102      	bne.n	80058b2 <_close_r+0x1a>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	b103      	cbz	r3, 80058b2 <_close_r+0x1a>
 80058b0:	602b      	str	r3, [r5, #0]
 80058b2:	bd38      	pop	{r3, r4, r5, pc}
 80058b4:	20000260 	.word	0x20000260

080058b8 <__sflush_r>:
 80058b8:	898a      	ldrh	r2, [r1, #12]
 80058ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058be:	4605      	mov	r5, r0
 80058c0:	0710      	lsls	r0, r2, #28
 80058c2:	460c      	mov	r4, r1
 80058c4:	d458      	bmi.n	8005978 <__sflush_r+0xc0>
 80058c6:	684b      	ldr	r3, [r1, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	dc05      	bgt.n	80058d8 <__sflush_r+0x20>
 80058cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	dc02      	bgt.n	80058d8 <__sflush_r+0x20>
 80058d2:	2000      	movs	r0, #0
 80058d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058da:	2e00      	cmp	r6, #0
 80058dc:	d0f9      	beq.n	80058d2 <__sflush_r+0x1a>
 80058de:	2300      	movs	r3, #0
 80058e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058e4:	682f      	ldr	r7, [r5, #0]
 80058e6:	6a21      	ldr	r1, [r4, #32]
 80058e8:	602b      	str	r3, [r5, #0]
 80058ea:	d032      	beq.n	8005952 <__sflush_r+0x9a>
 80058ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058ee:	89a3      	ldrh	r3, [r4, #12]
 80058f0:	075a      	lsls	r2, r3, #29
 80058f2:	d505      	bpl.n	8005900 <__sflush_r+0x48>
 80058f4:	6863      	ldr	r3, [r4, #4]
 80058f6:	1ac0      	subs	r0, r0, r3
 80058f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058fa:	b10b      	cbz	r3, 8005900 <__sflush_r+0x48>
 80058fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058fe:	1ac0      	subs	r0, r0, r3
 8005900:	2300      	movs	r3, #0
 8005902:	4602      	mov	r2, r0
 8005904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005906:	6a21      	ldr	r1, [r4, #32]
 8005908:	4628      	mov	r0, r5
 800590a:	47b0      	blx	r6
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	d106      	bne.n	8005920 <__sflush_r+0x68>
 8005912:	6829      	ldr	r1, [r5, #0]
 8005914:	291d      	cmp	r1, #29
 8005916:	d848      	bhi.n	80059aa <__sflush_r+0xf2>
 8005918:	4a29      	ldr	r2, [pc, #164]	; (80059c0 <__sflush_r+0x108>)
 800591a:	40ca      	lsrs	r2, r1
 800591c:	07d6      	lsls	r6, r2, #31
 800591e:	d544      	bpl.n	80059aa <__sflush_r+0xf2>
 8005920:	2200      	movs	r2, #0
 8005922:	6062      	str	r2, [r4, #4]
 8005924:	04d9      	lsls	r1, r3, #19
 8005926:	6922      	ldr	r2, [r4, #16]
 8005928:	6022      	str	r2, [r4, #0]
 800592a:	d504      	bpl.n	8005936 <__sflush_r+0x7e>
 800592c:	1c42      	adds	r2, r0, #1
 800592e:	d101      	bne.n	8005934 <__sflush_r+0x7c>
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	b903      	cbnz	r3, 8005936 <__sflush_r+0x7e>
 8005934:	6560      	str	r0, [r4, #84]	; 0x54
 8005936:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005938:	602f      	str	r7, [r5, #0]
 800593a:	2900      	cmp	r1, #0
 800593c:	d0c9      	beq.n	80058d2 <__sflush_r+0x1a>
 800593e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005942:	4299      	cmp	r1, r3
 8005944:	d002      	beq.n	800594c <__sflush_r+0x94>
 8005946:	4628      	mov	r0, r5
 8005948:	f000 f8de 	bl	8005b08 <_free_r>
 800594c:	2000      	movs	r0, #0
 800594e:	6360      	str	r0, [r4, #52]	; 0x34
 8005950:	e7c0      	b.n	80058d4 <__sflush_r+0x1c>
 8005952:	2301      	movs	r3, #1
 8005954:	4628      	mov	r0, r5
 8005956:	47b0      	blx	r6
 8005958:	1c41      	adds	r1, r0, #1
 800595a:	d1c8      	bne.n	80058ee <__sflush_r+0x36>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0c5      	beq.n	80058ee <__sflush_r+0x36>
 8005962:	2b1d      	cmp	r3, #29
 8005964:	d001      	beq.n	800596a <__sflush_r+0xb2>
 8005966:	2b16      	cmp	r3, #22
 8005968:	d101      	bne.n	800596e <__sflush_r+0xb6>
 800596a:	602f      	str	r7, [r5, #0]
 800596c:	e7b1      	b.n	80058d2 <__sflush_r+0x1a>
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	e7ad      	b.n	80058d4 <__sflush_r+0x1c>
 8005978:	690f      	ldr	r7, [r1, #16]
 800597a:	2f00      	cmp	r7, #0
 800597c:	d0a9      	beq.n	80058d2 <__sflush_r+0x1a>
 800597e:	0793      	lsls	r3, r2, #30
 8005980:	680e      	ldr	r6, [r1, #0]
 8005982:	bf08      	it	eq
 8005984:	694b      	ldreq	r3, [r1, #20]
 8005986:	600f      	str	r7, [r1, #0]
 8005988:	bf18      	it	ne
 800598a:	2300      	movne	r3, #0
 800598c:	eba6 0807 	sub.w	r8, r6, r7
 8005990:	608b      	str	r3, [r1, #8]
 8005992:	f1b8 0f00 	cmp.w	r8, #0
 8005996:	dd9c      	ble.n	80058d2 <__sflush_r+0x1a>
 8005998:	4643      	mov	r3, r8
 800599a:	463a      	mov	r2, r7
 800599c:	6a21      	ldr	r1, [r4, #32]
 800599e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059a0:	4628      	mov	r0, r5
 80059a2:	47b0      	blx	r6
 80059a4:	2800      	cmp	r0, #0
 80059a6:	dc06      	bgt.n	80059b6 <__sflush_r+0xfe>
 80059a8:	89a3      	ldrh	r3, [r4, #12]
 80059aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ae:	81a3      	strh	r3, [r4, #12]
 80059b0:	f04f 30ff 	mov.w	r0, #4294967295
 80059b4:	e78e      	b.n	80058d4 <__sflush_r+0x1c>
 80059b6:	4407      	add	r7, r0
 80059b8:	eba8 0800 	sub.w	r8, r8, r0
 80059bc:	e7e9      	b.n	8005992 <__sflush_r+0xda>
 80059be:	bf00      	nop
 80059c0:	20400001 	.word	0x20400001

080059c4 <_fflush_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	690b      	ldr	r3, [r1, #16]
 80059c8:	4605      	mov	r5, r0
 80059ca:	460c      	mov	r4, r1
 80059cc:	b1db      	cbz	r3, 8005a06 <_fflush_r+0x42>
 80059ce:	b118      	cbz	r0, 80059d8 <_fflush_r+0x14>
 80059d0:	6983      	ldr	r3, [r0, #24]
 80059d2:	b90b      	cbnz	r3, 80059d8 <_fflush_r+0x14>
 80059d4:	f7ff fa8e 	bl	8004ef4 <__sinit>
 80059d8:	4b0c      	ldr	r3, [pc, #48]	; (8005a0c <_fflush_r+0x48>)
 80059da:	429c      	cmp	r4, r3
 80059dc:	d109      	bne.n	80059f2 <_fflush_r+0x2e>
 80059de:	686c      	ldr	r4, [r5, #4]
 80059e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059e4:	b17b      	cbz	r3, 8005a06 <_fflush_r+0x42>
 80059e6:	4621      	mov	r1, r4
 80059e8:	4628      	mov	r0, r5
 80059ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059ee:	f7ff bf63 	b.w	80058b8 <__sflush_r>
 80059f2:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <_fflush_r+0x4c>)
 80059f4:	429c      	cmp	r4, r3
 80059f6:	d101      	bne.n	80059fc <_fflush_r+0x38>
 80059f8:	68ac      	ldr	r4, [r5, #8]
 80059fa:	e7f1      	b.n	80059e0 <_fflush_r+0x1c>
 80059fc:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <_fflush_r+0x50>)
 80059fe:	429c      	cmp	r4, r3
 8005a00:	bf08      	it	eq
 8005a02:	68ec      	ldreq	r4, [r5, #12]
 8005a04:	e7ec      	b.n	80059e0 <_fflush_r+0x1c>
 8005a06:	2000      	movs	r0, #0
 8005a08:	bd38      	pop	{r3, r4, r5, pc}
 8005a0a:	bf00      	nop
 8005a0c:	08005cc8 	.word	0x08005cc8
 8005a10:	08005ce8 	.word	0x08005ce8
 8005a14:	08005ca8 	.word	0x08005ca8

08005a18 <_lseek_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4c07      	ldr	r4, [pc, #28]	; (8005a38 <_lseek_r+0x20>)
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	4608      	mov	r0, r1
 8005a20:	4611      	mov	r1, r2
 8005a22:	2200      	movs	r2, #0
 8005a24:	6022      	str	r2, [r4, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f7fb f834 	bl	8000a94 <_lseek>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d102      	bne.n	8005a36 <_lseek_r+0x1e>
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	b103      	cbz	r3, 8005a36 <_lseek_r+0x1e>
 8005a34:	602b      	str	r3, [r5, #0]
 8005a36:	bd38      	pop	{r3, r4, r5, pc}
 8005a38:	20000260 	.word	0x20000260

08005a3c <__swhatbuf_r>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	460e      	mov	r6, r1
 8005a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a44:	2900      	cmp	r1, #0
 8005a46:	b096      	sub	sp, #88	; 0x58
 8005a48:	4614      	mov	r4, r2
 8005a4a:	461d      	mov	r5, r3
 8005a4c:	da07      	bge.n	8005a5e <__swhatbuf_r+0x22>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	602b      	str	r3, [r5, #0]
 8005a52:	89b3      	ldrh	r3, [r6, #12]
 8005a54:	061a      	lsls	r2, r3, #24
 8005a56:	d410      	bmi.n	8005a7a <__swhatbuf_r+0x3e>
 8005a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a5c:	e00e      	b.n	8005a7c <__swhatbuf_r+0x40>
 8005a5e:	466a      	mov	r2, sp
 8005a60:	f000 f8b2 	bl	8005bc8 <_fstat_r>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	dbf2      	blt.n	8005a4e <__swhatbuf_r+0x12>
 8005a68:	9a01      	ldr	r2, [sp, #4]
 8005a6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a72:	425a      	negs	r2, r3
 8005a74:	415a      	adcs	r2, r3
 8005a76:	602a      	str	r2, [r5, #0]
 8005a78:	e7ee      	b.n	8005a58 <__swhatbuf_r+0x1c>
 8005a7a:	2340      	movs	r3, #64	; 0x40
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	6023      	str	r3, [r4, #0]
 8005a80:	b016      	add	sp, #88	; 0x58
 8005a82:	bd70      	pop	{r4, r5, r6, pc}

08005a84 <__smakebuf_r>:
 8005a84:	898b      	ldrh	r3, [r1, #12]
 8005a86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a88:	079d      	lsls	r5, r3, #30
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	460c      	mov	r4, r1
 8005a8e:	d507      	bpl.n	8005aa0 <__smakebuf_r+0x1c>
 8005a90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a94:	6023      	str	r3, [r4, #0]
 8005a96:	6123      	str	r3, [r4, #16]
 8005a98:	2301      	movs	r3, #1
 8005a9a:	6163      	str	r3, [r4, #20]
 8005a9c:	b002      	add	sp, #8
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}
 8005aa0:	ab01      	add	r3, sp, #4
 8005aa2:	466a      	mov	r2, sp
 8005aa4:	f7ff ffca 	bl	8005a3c <__swhatbuf_r>
 8005aa8:	9900      	ldr	r1, [sp, #0]
 8005aaa:	4605      	mov	r5, r0
 8005aac:	4630      	mov	r0, r6
 8005aae:	f7ff faab 	bl	8005008 <_malloc_r>
 8005ab2:	b948      	cbnz	r0, 8005ac8 <__smakebuf_r+0x44>
 8005ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ab8:	059a      	lsls	r2, r3, #22
 8005aba:	d4ef      	bmi.n	8005a9c <__smakebuf_r+0x18>
 8005abc:	f023 0303 	bic.w	r3, r3, #3
 8005ac0:	f043 0302 	orr.w	r3, r3, #2
 8005ac4:	81a3      	strh	r3, [r4, #12]
 8005ac6:	e7e3      	b.n	8005a90 <__smakebuf_r+0xc>
 8005ac8:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <__smakebuf_r+0x7c>)
 8005aca:	62b3      	str	r3, [r6, #40]	; 0x28
 8005acc:	89a3      	ldrh	r3, [r4, #12]
 8005ace:	6020      	str	r0, [r4, #0]
 8005ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad4:	81a3      	strh	r3, [r4, #12]
 8005ad6:	9b00      	ldr	r3, [sp, #0]
 8005ad8:	6163      	str	r3, [r4, #20]
 8005ada:	9b01      	ldr	r3, [sp, #4]
 8005adc:	6120      	str	r0, [r4, #16]
 8005ade:	b15b      	cbz	r3, 8005af8 <__smakebuf_r+0x74>
 8005ae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	f000 f881 	bl	8005bec <_isatty_r>
 8005aea:	b128      	cbz	r0, 8005af8 <__smakebuf_r+0x74>
 8005aec:	89a3      	ldrh	r3, [r4, #12]
 8005aee:	f023 0303 	bic.w	r3, r3, #3
 8005af2:	f043 0301 	orr.w	r3, r3, #1
 8005af6:	81a3      	strh	r3, [r4, #12]
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	431d      	orrs	r5, r3
 8005afc:	81a5      	strh	r5, [r4, #12]
 8005afe:	e7cd      	b.n	8005a9c <__smakebuf_r+0x18>
 8005b00:	08004ebd 	.word	0x08004ebd

08005b04 <__malloc_lock>:
 8005b04:	4770      	bx	lr

08005b06 <__malloc_unlock>:
 8005b06:	4770      	bx	lr

08005b08 <_free_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4605      	mov	r5, r0
 8005b0c:	2900      	cmp	r1, #0
 8005b0e:	d045      	beq.n	8005b9c <_free_r+0x94>
 8005b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b14:	1f0c      	subs	r4, r1, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bfb8      	it	lt
 8005b1a:	18e4      	addlt	r4, r4, r3
 8005b1c:	f7ff fff2 	bl	8005b04 <__malloc_lock>
 8005b20:	4a1f      	ldr	r2, [pc, #124]	; (8005ba0 <_free_r+0x98>)
 8005b22:	6813      	ldr	r3, [r2, #0]
 8005b24:	4610      	mov	r0, r2
 8005b26:	b933      	cbnz	r3, 8005b36 <_free_r+0x2e>
 8005b28:	6063      	str	r3, [r4, #4]
 8005b2a:	6014      	str	r4, [r2, #0]
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b32:	f7ff bfe8 	b.w	8005b06 <__malloc_unlock>
 8005b36:	42a3      	cmp	r3, r4
 8005b38:	d90c      	bls.n	8005b54 <_free_r+0x4c>
 8005b3a:	6821      	ldr	r1, [r4, #0]
 8005b3c:	1862      	adds	r2, r4, r1
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	bf04      	itt	eq
 8005b42:	681a      	ldreq	r2, [r3, #0]
 8005b44:	685b      	ldreq	r3, [r3, #4]
 8005b46:	6063      	str	r3, [r4, #4]
 8005b48:	bf04      	itt	eq
 8005b4a:	1852      	addeq	r2, r2, r1
 8005b4c:	6022      	streq	r2, [r4, #0]
 8005b4e:	6004      	str	r4, [r0, #0]
 8005b50:	e7ec      	b.n	8005b2c <_free_r+0x24>
 8005b52:	4613      	mov	r3, r2
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	b10a      	cbz	r2, 8005b5c <_free_r+0x54>
 8005b58:	42a2      	cmp	r2, r4
 8005b5a:	d9fa      	bls.n	8005b52 <_free_r+0x4a>
 8005b5c:	6819      	ldr	r1, [r3, #0]
 8005b5e:	1858      	adds	r0, r3, r1
 8005b60:	42a0      	cmp	r0, r4
 8005b62:	d10b      	bne.n	8005b7c <_free_r+0x74>
 8005b64:	6820      	ldr	r0, [r4, #0]
 8005b66:	4401      	add	r1, r0
 8005b68:	1858      	adds	r0, r3, r1
 8005b6a:	4282      	cmp	r2, r0
 8005b6c:	6019      	str	r1, [r3, #0]
 8005b6e:	d1dd      	bne.n	8005b2c <_free_r+0x24>
 8005b70:	6810      	ldr	r0, [r2, #0]
 8005b72:	6852      	ldr	r2, [r2, #4]
 8005b74:	605a      	str	r2, [r3, #4]
 8005b76:	4401      	add	r1, r0
 8005b78:	6019      	str	r1, [r3, #0]
 8005b7a:	e7d7      	b.n	8005b2c <_free_r+0x24>
 8005b7c:	d902      	bls.n	8005b84 <_free_r+0x7c>
 8005b7e:	230c      	movs	r3, #12
 8005b80:	602b      	str	r3, [r5, #0]
 8005b82:	e7d3      	b.n	8005b2c <_free_r+0x24>
 8005b84:	6820      	ldr	r0, [r4, #0]
 8005b86:	1821      	adds	r1, r4, r0
 8005b88:	428a      	cmp	r2, r1
 8005b8a:	bf04      	itt	eq
 8005b8c:	6811      	ldreq	r1, [r2, #0]
 8005b8e:	6852      	ldreq	r2, [r2, #4]
 8005b90:	6062      	str	r2, [r4, #4]
 8005b92:	bf04      	itt	eq
 8005b94:	1809      	addeq	r1, r1, r0
 8005b96:	6021      	streq	r1, [r4, #0]
 8005b98:	605c      	str	r4, [r3, #4]
 8005b9a:	e7c7      	b.n	8005b2c <_free_r+0x24>
 8005b9c:	bd38      	pop	{r3, r4, r5, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000094 	.word	0x20000094

08005ba4 <_read_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4c07      	ldr	r4, [pc, #28]	; (8005bc4 <_read_r+0x20>)
 8005ba8:	4605      	mov	r5, r0
 8005baa:	4608      	mov	r0, r1
 8005bac:	4611      	mov	r1, r2
 8005bae:	2200      	movs	r2, #0
 8005bb0:	6022      	str	r2, [r4, #0]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f7fa ff2a 	bl	8000a0c <_read>
 8005bb8:	1c43      	adds	r3, r0, #1
 8005bba:	d102      	bne.n	8005bc2 <_read_r+0x1e>
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	b103      	cbz	r3, 8005bc2 <_read_r+0x1e>
 8005bc0:	602b      	str	r3, [r5, #0]
 8005bc2:	bd38      	pop	{r3, r4, r5, pc}
 8005bc4:	20000260 	.word	0x20000260

08005bc8 <_fstat_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	4c07      	ldr	r4, [pc, #28]	; (8005be8 <_fstat_r+0x20>)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	4605      	mov	r5, r0
 8005bd0:	4608      	mov	r0, r1
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	f7fa ff42 	bl	8000a5e <_fstat>
 8005bda:	1c43      	adds	r3, r0, #1
 8005bdc:	d102      	bne.n	8005be4 <_fstat_r+0x1c>
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	b103      	cbz	r3, 8005be4 <_fstat_r+0x1c>
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	bd38      	pop	{r3, r4, r5, pc}
 8005be6:	bf00      	nop
 8005be8:	20000260 	.word	0x20000260

08005bec <_isatty_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	4c06      	ldr	r4, [pc, #24]	; (8005c08 <_isatty_r+0x1c>)
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	4605      	mov	r5, r0
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	6023      	str	r3, [r4, #0]
 8005bf8:	f7fa ff41 	bl	8000a7e <_isatty>
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	d102      	bne.n	8005c06 <_isatty_r+0x1a>
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	b103      	cbz	r3, 8005c06 <_isatty_r+0x1a>
 8005c04:	602b      	str	r3, [r5, #0]
 8005c06:	bd38      	pop	{r3, r4, r5, pc}
 8005c08:	20000260 	.word	0x20000260

08005c0c <_init>:
 8005c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0e:	bf00      	nop
 8005c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c12:	bc08      	pop	{r3}
 8005c14:	469e      	mov	lr, r3
 8005c16:	4770      	bx	lr

08005c18 <_fini>:
 8005c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1a:	bf00      	nop
 8005c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1e:	bc08      	pop	{r3}
 8005c20:	469e      	mov	lr, r3
 8005c22:	4770      	bx	lr
