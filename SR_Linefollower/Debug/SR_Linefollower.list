
SR_Linefollower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c5c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08007de8  08007de8  00017de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008058  08008058  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008058  08008058  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008058  08008058  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008058  08008058  00018058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800805c  0800805c  0001805c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001dc  0800823c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  0800823c  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119ab  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000267d  00000000  00000000  00031bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  00034238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e48  00000000  00000000  000351d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cdaa  00000000  00000000  00036020  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f2b0  00000000  00000000  00052dca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aa561  00000000  00000000  0006207a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010c5db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004824  00000000  00000000  0010c658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007dcc 	.word	0x08007dcc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	08007dcc 	.word	0x08007dcc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
 8000b20:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b22:	4b3c      	ldr	r3, [pc, #240]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000b24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b2a:	4b3a      	ldr	r3, [pc, #232]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000b30:	4b38      	ldr	r3, [pc, #224]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000b32:	2210      	movs	r2, #16
 8000b34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b36:	4b37      	ldr	r3, [pc, #220]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b3c:	4b35      	ldr	r3, [pc, #212]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b42:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b4a:	4b32      	ldr	r3, [pc, #200]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b50:	4b30      	ldr	r3, [pc, #192]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b56:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000b5c:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000b5e:	2203      	movs	r2, #3
 8000b60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b62:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b70:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b76:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b7c:	4825      	ldr	r0, [pc, #148]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000b7e:	f001 f84b 	bl	8001c18 <HAL_ADC_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000b88:	f000 fc82 	bl	8001490 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	481f      	ldr	r0, [pc, #124]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000b98:	f002 f94a 	bl	8002e30 <HAL_ADCEx_MultiModeConfigChannel>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000ba2:	f000 fc75 	bl	8001490 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4814      	ldr	r0, [pc, #80]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000bc4:	f001 fe72 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000bce:	f000 fc5f 	bl	8001490 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480d      	ldr	r0, [pc, #52]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000be0:	f001 fe64 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000bea:	f000 fc51 	bl	8001490 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <MX_ADC1_Init+0x114>)
 8000bfc:	f001 fe56 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000c06:	f000 fc43 	bl	8001490 <Error_Handler>
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000258 	.word	0x20000258

08000c18 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1e:	463b      	mov	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
 8000c2c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c2e:	4b3d      	ldr	r3, [pc, #244]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000c30:	4a3d      	ldr	r2, [pc, #244]	; (8000d28 <MX_ADC2_Init+0x110>)
 8000c32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c34:	4b3b      	ldr	r3, [pc, #236]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000c3a:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000c3c:	2210      	movs	r2, #16
 8000c3e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c40:	4b38      	ldr	r3, [pc, #224]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c46:	4b37      	ldr	r3, [pc, #220]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c4c:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c54:	4b33      	ldr	r3, [pc, #204]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c5a:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c60:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000c66:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000c68:	2204      	movs	r2, #4
 8000c6a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000c6c:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c74:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000c76:	2204      	movs	r2, #4
 8000c78:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c80:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c86:	4827      	ldr	r0, [pc, #156]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000c88:	f000 ffc6 	bl	8001c18 <HAL_ADC_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000c92:	f000 fbfd 	bl	8001490 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	481c      	ldr	r0, [pc, #112]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000cb4:	f001 fdfa 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000cbe:	f000 fbe7 	bl	8001490 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cca:	463b      	mov	r3, r7
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4815      	ldr	r0, [pc, #84]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000cd0:	f001 fdec 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8000cda:	f000 fbd9 	bl	8001490 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480e      	ldr	r0, [pc, #56]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000cec:	f001 fdde 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 8000cf6:	f000 fbcb 	bl	8001490 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d06:	463b      	mov	r3, r7
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <MX_ADC2_Init+0x10c>)
 8000d0c:	f001 fdce 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_ADC2_Init+0x102>
  {
    Error_Handler();
 8000d16:	f000 fbbb 	bl	8001490 <Error_Handler>
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000208 	.word	0x20000208
 8000d28:	50000100 	.word	0x50000100

08000d2c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08c      	sub	sp, #48	; 0x30
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d4c:	d15c      	bne.n	8000e08 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d4e:	4b61      	ldr	r3, [pc, #388]	; (8000ed4 <HAL_ADC_MspInit+0x1a8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	4a5f      	ldr	r2, [pc, #380]	; (8000ed4 <HAL_ADC_MspInit+0x1a8>)
 8000d56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d58:	4b5e      	ldr	r3, [pc, #376]	; (8000ed4 <HAL_ADC_MspInit+0x1a8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d10b      	bne.n	8000d78 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d60:	4b5d      	ldr	r3, [pc, #372]	; (8000ed8 <HAL_ADC_MspInit+0x1ac>)
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	4a5c      	ldr	r2, [pc, #368]	; (8000ed8 <HAL_ADC_MspInit+0x1ac>)
 8000d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	6153      	str	r3, [r2, #20]
 8000d6c:	4b5a      	ldr	r3, [pc, #360]	; (8000ed8 <HAL_ADC_MspInit+0x1ac>)
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d74:	61bb      	str	r3, [r7, #24]
 8000d76:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b57      	ldr	r3, [pc, #348]	; (8000ed8 <HAL_ADC_MspInit+0x1ac>)
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	4a56      	ldr	r2, [pc, #344]	; (8000ed8 <HAL_ADC_MspInit+0x1ac>)
 8000d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d82:	6153      	str	r3, [r2, #20]
 8000d84:	4b54      	ldr	r3, [pc, #336]	; (8000ed8 <HAL_ADC_MspInit+0x1ac>)
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CZ_1_Pin|CZ_2_Pin|CZ_3_Pin;
 8000d90:	230b      	movs	r3, #11
 8000d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d94:	2303      	movs	r3, #3
 8000d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da6:	f002 fd13 	bl	80037d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000daa:	4b4c      	ldr	r3, [pc, #304]	; (8000edc <HAL_ADC_MspInit+0x1b0>)
 8000dac:	4a4c      	ldr	r2, [pc, #304]	; (8000ee0 <HAL_ADC_MspInit+0x1b4>)
 8000dae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000db0:	4b4a      	ldr	r3, [pc, #296]	; (8000edc <HAL_ADC_MspInit+0x1b0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db6:	4b49      	ldr	r3, [pc, #292]	; (8000edc <HAL_ADC_MspInit+0x1b0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dbc:	4b47      	ldr	r3, [pc, #284]	; (8000edc <HAL_ADC_MspInit+0x1b0>)
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dc2:	4b46      	ldr	r3, [pc, #280]	; (8000edc <HAL_ADC_MspInit+0x1b0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc8:	4b44      	ldr	r3, [pc, #272]	; (8000edc <HAL_ADC_MspInit+0x1b0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dce:	4b43      	ldr	r3, [pc, #268]	; (8000edc <HAL_ADC_MspInit+0x1b0>)
 8000dd0:	2220      	movs	r2, #32
 8000dd2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dd4:	4b41      	ldr	r3, [pc, #260]	; (8000edc <HAL_ADC_MspInit+0x1b0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dda:	4840      	ldr	r0, [pc, #256]	; (8000edc <HAL_ADC_MspInit+0x1b0>)
 8000ddc:	f002 fb23 	bl	8003426 <HAL_DMA_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000de6:	f000 fb53 	bl	8001490 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a3b      	ldr	r2, [pc, #236]	; (8000edc <HAL_ADC_MspInit+0x1b0>)
 8000dee:	639a      	str	r2, [r3, #56]	; 0x38
 8000df0:	4a3a      	ldr	r2, [pc, #232]	; (8000edc <HAL_ADC_MspInit+0x1b0>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2012      	movs	r0, #18
 8000dfc:	f002 fadd 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e00:	2012      	movs	r0, #18
 8000e02:	f002 faf6 	bl	80033f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000e06:	e060      	b.n	8000eca <HAL_ADC_MspInit+0x19e>
  else if(adcHandle->Instance==ADC2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a35      	ldr	r2, [pc, #212]	; (8000ee4 <HAL_ADC_MspInit+0x1b8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d15b      	bne.n	8000eca <HAL_ADC_MspInit+0x19e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e12:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <HAL_ADC_MspInit+0x1a8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	3301      	adds	r3, #1
 8000e18:	4a2e      	ldr	r2, [pc, #184]	; (8000ed4 <HAL_ADC_MspInit+0x1a8>)
 8000e1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <HAL_ADC_MspInit+0x1a8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d10b      	bne.n	8000e3c <HAL_ADC_MspInit+0x110>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e24:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <HAL_ADC_MspInit+0x1ac>)
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	4a2b      	ldr	r2, [pc, #172]	; (8000ed8 <HAL_ADC_MspInit+0x1ac>)
 8000e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	6153      	str	r3, [r2, #20]
 8000e30:	4b29      	ldr	r3, [pc, #164]	; (8000ed8 <HAL_ADC_MspInit+0x1ac>)
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <HAL_ADC_MspInit+0x1ac>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	4a25      	ldr	r2, [pc, #148]	; (8000ed8 <HAL_ADC_MspInit+0x1ac>)
 8000e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e46:	6153      	str	r3, [r2, #20]
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <HAL_ADC_MspInit+0x1ac>)
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CZ_4_Pin|CZ_5_Pin|CZ_6_Pin|BATT_Pin;
 8000e54:	23f0      	movs	r3, #240	; 0xf0
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6a:	f002 fcb1 	bl	80037d0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <HAL_ADC_MspInit+0x1bc>)
 8000e70:	4a1e      	ldr	r2, [pc, #120]	; (8000eec <HAL_ADC_MspInit+0x1c0>)
 8000e72:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <HAL_ADC_MspInit+0x1bc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <HAL_ADC_MspInit+0x1bc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HAL_ADC_MspInit+0x1bc>)
 8000e82:	2280      	movs	r2, #128	; 0x80
 8000e84:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <HAL_ADC_MspInit+0x1bc>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <HAL_ADC_MspInit+0x1bc>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_ADC_MspInit+0x1bc>)
 8000e94:	2220      	movs	r2, #32
 8000e96:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <HAL_ADC_MspInit+0x1bc>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000e9e:	4812      	ldr	r0, [pc, #72]	; (8000ee8 <HAL_ADC_MspInit+0x1bc>)
 8000ea0:	f002 fac1 	bl	8003426 <HAL_DMA_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_ADC_MspInit+0x182>
      Error_Handler();
 8000eaa:	f000 faf1 	bl	8001490 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_ADC_MspInit+0x1bc>)
 8000eb2:	639a      	str	r2, [r3, #56]	; 0x38
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <HAL_ADC_MspInit+0x1bc>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2012      	movs	r0, #18
 8000ec0:	f002 fa7b 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ec4:	2012      	movs	r0, #18
 8000ec6:	f002 fa94 	bl	80033f2 <HAL_NVIC_EnableIRQ>
}
 8000eca:	bf00      	nop
 8000ecc:	3730      	adds	r7, #48	; 0x30
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200001f8 	.word	0x200001f8
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	200002a8 	.word	0x200002a8
 8000ee0:	40020008 	.word	0x40020008
 8000ee4:	50000100 	.word	0x50000100
 8000ee8:	200002ec 	.word	0x200002ec
 8000eec:	4002001c 	.word	0x4002001c

08000ef0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_DMA_Init+0x48>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <MX_DMA_Init+0x48>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6153      	str	r3, [r2, #20]
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_DMA_Init+0x48>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	200b      	movs	r0, #11
 8000f14:	f002 fa51 	bl	80033ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f18:	200b      	movs	r0, #11
 8000f1a:	f002 fa6a 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	200c      	movs	r0, #12
 8000f24:	f002 fa49 	bl	80033ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f28:	200c      	movs	r0, #12
 8000f2a:	f002 fa62 	bl	80033f2 <HAL_NVIC_EnableIRQ>

}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000

08000f3c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f52:	4b3b      	ldr	r3, [pc, #236]	; (8001040 <MX_GPIO_Init+0x104>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	4a3a      	ldr	r2, [pc, #232]	; (8001040 <MX_GPIO_Init+0x104>)
 8000f58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f5c:	6153      	str	r3, [r2, #20]
 8000f5e:	4b38      	ldr	r3, [pc, #224]	; (8001040 <MX_GPIO_Init+0x104>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b35      	ldr	r3, [pc, #212]	; (8001040 <MX_GPIO_Init+0x104>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	4a34      	ldr	r2, [pc, #208]	; (8001040 <MX_GPIO_Init+0x104>)
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f74:	6153      	str	r3, [r2, #20]
 8000f76:	4b32      	ldr	r3, [pc, #200]	; (8001040 <MX_GPIO_Init+0x104>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <MX_GPIO_Init+0x104>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	4a2e      	ldr	r2, [pc, #184]	; (8001040 <MX_GPIO_Init+0x104>)
 8000f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8c:	6153      	str	r3, [r2, #20]
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <MX_GPIO_Init+0x104>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIR1_M2_Pin|DIR2_M2_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	4829      	ldr	r0, [pc, #164]	; (8001044 <MX_GPIO_Init+0x108>)
 8000fa0:	f002 fd88 	bl	8003ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_M1_GPIO_Port, DIR1_M1_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2102      	movs	r1, #2
 8000fa8:	4827      	ldr	r0, [pc, #156]	; (8001048 <MX_GPIO_Init+0x10c>)
 8000faa:	f002 fd83 	bl	8003ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR2_M1_Pin|CS1_Pin|STBY_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f002 fd7c 	bl	8003ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = DIR1_M2_Pin|DIR2_M2_Pin;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	481c      	ldr	r0, [pc, #112]	; (8001044 <MX_GPIO_Init+0x108>)
 8000fd4:	f002 fbfc 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR1_M1_Pin;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIR1_M1_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4619      	mov	r1, r3
 8000fee:	4816      	ldr	r0, [pc, #88]	; (8001048 <MX_GPIO_Init+0x10c>)
 8000ff0:	f002 fbee 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DIR2_M1_Pin|CS1_Pin|STBY_Pin;
 8000ff4:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000ff8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4619      	mov	r1, r3
 800100c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001010:	f002 fbde 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001014:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001018:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001026:	2307      	movs	r3, #7
 8001028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f002 fbcc 	bl	80037d0 <HAL_GPIO_Init>

}
 8001038:	bf00      	nop
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000
 8001044:	48001400 	.word	0x48001400
 8001048:	48000400 	.word	0x48000400

0800104c <resetDIR1_M1>:
// Funkcje ustawiające kierunek ruchu pierwszego silnika

void setDIR1_M1(){
	HAL_GPIO_WritePin(DIR1_M1_GPIO_Port, DIR1_M1_Pin, SET);
}
void resetDIR1_M1(){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_M1_GPIO_Port, DIR1_M1_Pin, RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2102      	movs	r1, #2
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <resetDIR1_M1+0x14>)
 8001056:	f002 fd2d 	bl	8003ab4 <HAL_GPIO_WritePin>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	48000400 	.word	0x48000400

08001064 <setDIR2_M1>:
void setDIR2_M1(){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR2_M1_GPIO_Port, DIR2_M1_Pin , SET);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f002 fd1f 	bl	8003ab4 <HAL_GPIO_WritePin>
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}

0800107a <setM1_Forward>:
void resetDIR2_M1(){
	HAL_GPIO_WritePin(DIR2_M1_GPIO_Port, DIR2_M1_Pin, RESET);
}

void setM1_Forward(){
 800107a:	b580      	push	{r7, lr}
 800107c:	af00      	add	r7, sp, #0
	resetDIR1_M1();
 800107e:	f7ff ffe5 	bl	800104c <resetDIR1_M1>
	setDIR2_M1();
 8001082:	f7ff ffef 	bl	8001064 <setDIR2_M1>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <resetDIR1_M2>:
// Funkcje ustawiające kierunek ruchu drugiego silnika

void setDIR1_M2(){
	HAL_GPIO_WritePin(DIR1_M2_GPIO_Port, DIR1_M2_Pin, SET);
}
void resetDIR1_M2(){
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_M2_GPIO_Port,DIR1_M2_Pin, RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2101      	movs	r1, #1
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <resetDIR1_M2+0x14>)
 8001096:	f002 fd0d 	bl	8003ab4 <HAL_GPIO_WritePin>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	48001400 	.word	0x48001400

080010a4 <setDIR2_M2>:
void setDIR2_M2(){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR2_M2_GPIO_Port, DIR2_M2_Pin, SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2102      	movs	r1, #2
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <setDIR2_M2+0x14>)
 80010ae:	f002 fd01 	bl	8003ab4 <HAL_GPIO_WritePin>
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	48001400 	.word	0x48001400

080010bc <setM2_Forward>:
void resetDIR2_M2(){
	HAL_GPIO_WritePin(DIR2_M2_GPIO_Port, DIR2_M2_Pin, RESET);
}

void setM2_Forward(){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	resetDIR1_M2();
 80010c0:	f7ff ffe4 	bl	800108c <resetDIR1_M2>
	setDIR2_M2();
 80010c4:	f7ff ffee 	bl	80010a4 <setDIR2_M2>
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}

080010cc <setPWM_Motor1>:
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// Funkcje ustawiające wypełnienie PWM'ów obu silników

void setPWM_Motor1( int wypelnienie ){
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, wypelnienie);
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <setPWM_Motor1+0x1c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	200003b4 	.word	0x200003b4

080010ec <setPWM_Motor2>:

void setPWM_Motor2(int wypelnienie){
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, wypelnienie);
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <setPWM_Motor2+0x1c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	20000400 	.word	0x20000400

0800110c <setSTBY>:

//////////////////////////////////////////////////////////////////////////////

void setSTBY(){
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, SET);
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f002 fccb 	bl	8003ab4 <HAL_GPIO_WritePin>
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001124:	b5b0      	push	{r4, r5, r7, lr}
 8001126:	b09a      	sub	sp, #104	; 0x68
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112a:	f000 fcc5 	bl	8001ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112e:	f000 f957 	bl	80013e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001132:	f7ff ff03 	bl	8000f3c <MX_GPIO_Init>
  MX_DMA_Init();
 8001136:	f7ff fedb 	bl	8000ef0 <MX_DMA_Init>
  MX_ADC1_Init();
 800113a:	f7ff fce1 	bl	8000b00 <MX_ADC1_Init>
  MX_SPI1_Init();
 800113e:	f000 f9af 	bl	80014a0 <MX_SPI1_Init>
  MX_ADC2_Init();
 8001142:	f7ff fd69 	bl	8000c18 <MX_ADC2_Init>
  MX_TIM3_Init();
 8001146:	f000 fb0f 	bl	8001768 <MX_TIM3_Init>
  MX_TIM16_Init();
 800114a:	f000 fb67 	bl	800181c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  //HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800114e:	2108      	movs	r1, #8
 8001150:	489b      	ldr	r0, [pc, #620]	; (80013c0 <main+0x29c>)
 8001152:	f004 f94d 	bl	80053f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001156:	2100      	movs	r1, #0
 8001158:	489a      	ldr	r0, [pc, #616]	; (80013c4 <main+0x2a0>)
 800115a:	f004 f949 	bl	80053f0 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc1);
 800115e:	489a      	ldr	r0, [pc, #616]	; (80013c8 <main+0x2a4>)
 8001160:	f000 ffa2 	bl	80020a8 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 8001164:	4899      	ldr	r0, [pc, #612]	; (80013cc <main+0x2a8>)
 8001166:	f000 ff9f 	bl	80020a8 <HAL_ADC_Start_IT>
  HAL_ADC_Start(&hadc1);
 800116a:	4897      	ldr	r0, [pc, #604]	; (80013c8 <main+0x2a4>)
 800116c:	f000 fee6 	bl	8001f3c <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc1, adc1, CONV_NUM);
 8001170:	2203      	movs	r2, #3
 8001172:	4997      	ldr	r1, [pc, #604]	; (80013d0 <main+0x2ac>)
 8001174:	4894      	ldr	r0, [pc, #592]	; (80013c8 <main+0x2a4>)
 8001176:	f001 f877 	bl	8002268 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, adc2, CONV_NUM);
 800117a:	2203      	movs	r2, #3
 800117c:	4995      	ldr	r1, [pc, #596]	; (80013d4 <main+0x2b0>)
 800117e:	4893      	ldr	r0, [pc, #588]	; (80013cc <main+0x2a8>)
 8001180:	f001 f872 	bl	8002268 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setSTBY();
 8001184:	f7ff ffc2 	bl	800110c <setSTBY>


  /*******************************/

  setM1_Forward();
 8001188:	f7ff ff77 	bl	800107a <setM1_Forward>
  setM2_Forward();
 800118c:	f7ff ff96 	bl	80010bc <setM2_Forward>

  int prev_error=0;
 8001190:	2300      	movs	r3, #0
 8001192:	667b      	str	r3, [r7, #100]	; 0x64
  int error=0;
 8001194:	2300      	movs	r3, #0
 8001196:	663b      	str	r3, [r7, #96]	; 0x60
  int ilosc_wykryc=0;
 8001198:	2300      	movs	r3, #0
 800119a:	65fb      	str	r3, [r7, #92]	; 0x5c
  int waga[] = { -5 , -3 , -1 , 1 , 3 , 5 };
 800119c:	4b8e      	ldr	r3, [pc, #568]	; (80013d8 <main+0x2b4>)
 800119e:	463c      	mov	r4, r7
 80011a0:	461d      	mov	r5, r3
 80011a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011aa:	e884 0003 	stmia.w	r4, {r0, r1}

  int Kp = 2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	657b      	str	r3, [r7, #84]	; 0x54
  int Kd = 1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	653b      	str	r3, [r7, #80]	; 0x50
  uint8_t Test3;
  uint8_t Test4;
  uint8_t Test5;
  uint8_t Test6;

  int rozniczka=0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  int regulacja=0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	64bb      	str	r3, [r7, #72]	; 0x48
  int setpoint_M1 = 22;
 80011be:	2316      	movs	r3, #22
 80011c0:	647b      	str	r3, [r7, #68]	; 0x44
  int setpoint_M2 = 15;
 80011c2:	230f      	movs	r3, #15
 80011c4:	643b      	str	r3, [r7, #64]	; 0x40

  int prog = 150;
 80011c6:	2396      	movs	r3, #150	; 0x96
 80011c8:	63fb      	str	r3, [r7, #60]	; 0x3c

  int er=0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	63bb      	str	r3, [r7, #56]	; 0x38

  while (1)
  {
	  //  Czujnik 1
	  if(adc1[0] > prog)
 80011ce:	4b80      	ldr	r3, [pc, #512]	; (80013d0 <main+0x2ac>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011d8:	4293      	cmp	r3, r2
 80011da:	da03      	bge.n	80011e4 <main+0xc0>
		  Czujniki[0]=1;
 80011dc:	4b7f      	ldr	r3, [pc, #508]	; (80013dc <main+0x2b8>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
 80011e2:	e002      	b.n	80011ea <main+0xc6>
	  else
		  Czujniki[0]=0;
 80011e4:	4b7d      	ldr	r3, [pc, #500]	; (80013dc <main+0x2b8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]

	  //  Czujnik 2
	  if(adc1[1] > prog)
 80011ea:	4b79      	ldr	r3, [pc, #484]	; (80013d0 <main+0x2ac>)
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011f4:	4293      	cmp	r3, r2
 80011f6:	da03      	bge.n	8001200 <main+0xdc>
		  Czujniki[1]=1;
 80011f8:	4b78      	ldr	r3, [pc, #480]	; (80013dc <main+0x2b8>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	705a      	strb	r2, [r3, #1]
 80011fe:	e002      	b.n	8001206 <main+0xe2>
	  else
		  Czujniki[1]=0;
 8001200:	4b76      	ldr	r3, [pc, #472]	; (80013dc <main+0x2b8>)
 8001202:	2200      	movs	r2, #0
 8001204:	705a      	strb	r2, [r3, #1]

	  //  Czujnik 3
	  if(adc1[2] > prog)
 8001206:	4b72      	ldr	r3, [pc, #456]	; (80013d0 <main+0x2ac>)
 8001208:	789b      	ldrb	r3, [r3, #2]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001210:	4293      	cmp	r3, r2
 8001212:	da03      	bge.n	800121c <main+0xf8>
		  Czujniki[2]=1;
 8001214:	4b71      	ldr	r3, [pc, #452]	; (80013dc <main+0x2b8>)
 8001216:	2201      	movs	r2, #1
 8001218:	709a      	strb	r2, [r3, #2]
 800121a:	e002      	b.n	8001222 <main+0xfe>
	  else
		  Czujniki[2]=0;
 800121c:	4b6f      	ldr	r3, [pc, #444]	; (80013dc <main+0x2b8>)
 800121e:	2200      	movs	r2, #0
 8001220:	709a      	strb	r2, [r3, #2]

	  //  Czujnik 4
	  if(adc2[0] > prog)
 8001222:	4b6c      	ldr	r3, [pc, #432]	; (80013d4 <main+0x2b0>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	461a      	mov	r2, r3
 800122a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800122c:	4293      	cmp	r3, r2
 800122e:	da03      	bge.n	8001238 <main+0x114>
		  Czujniki[3]=1;
 8001230:	4b6a      	ldr	r3, [pc, #424]	; (80013dc <main+0x2b8>)
 8001232:	2201      	movs	r2, #1
 8001234:	70da      	strb	r2, [r3, #3]
 8001236:	e002      	b.n	800123e <main+0x11a>
	  else
		  Czujniki[3]=0;
 8001238:	4b68      	ldr	r3, [pc, #416]	; (80013dc <main+0x2b8>)
 800123a:	2200      	movs	r2, #0
 800123c:	70da      	strb	r2, [r3, #3]

	  //  Czujnik 5
	  if(adc2[1] > prog)
 800123e:	4b65      	ldr	r3, [pc, #404]	; (80013d4 <main+0x2b0>)
 8001240:	785b      	ldrb	r3, [r3, #1]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001248:	4293      	cmp	r3, r2
 800124a:	da03      	bge.n	8001254 <main+0x130>
		  Czujniki[4]=1;
 800124c:	4b63      	ldr	r3, [pc, #396]	; (80013dc <main+0x2b8>)
 800124e:	2201      	movs	r2, #1
 8001250:	711a      	strb	r2, [r3, #4]
 8001252:	e002      	b.n	800125a <main+0x136>
	  else
		  Czujniki[4]=0;
 8001254:	4b61      	ldr	r3, [pc, #388]	; (80013dc <main+0x2b8>)
 8001256:	2200      	movs	r2, #0
 8001258:	711a      	strb	r2, [r3, #4]

	  //  Czujnik 6
	  if(adc2[2] > prog)
 800125a:	4b5e      	ldr	r3, [pc, #376]	; (80013d4 <main+0x2b0>)
 800125c:	789b      	ldrb	r3, [r3, #2]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001264:	4293      	cmp	r3, r2
 8001266:	da03      	bge.n	8001270 <main+0x14c>
		  Czujniki[5]=1;
 8001268:	4b5c      	ldr	r3, [pc, #368]	; (80013dc <main+0x2b8>)
 800126a:	2201      	movs	r2, #1
 800126c:	715a      	strb	r2, [r3, #5]
 800126e:	e002      	b.n	8001276 <main+0x152>
	  else
		  Czujniki[5]=0;
 8001270:	4b5a      	ldr	r3, [pc, #360]	; (80013dc <main+0x2b8>)
 8001272:	2200      	movs	r2, #0
 8001274:	715a      	strb	r2, [r3, #5]

	  //HAL_Delay(30);

	  Test1 = adc1[0];
 8001276:	4b56      	ldr	r3, [pc, #344]	; (80013d0 <main+0x2ac>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  Test2 = adc1[1];
 800127e:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <main+0x2ac>)
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	  Test3 = adc1[2];
 8001286:	4b52      	ldr	r3, [pc, #328]	; (80013d0 <main+0x2ac>)
 8001288:	789b      	ldrb	r3, [r3, #2]
 800128a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	  Test4 = adc2[0];
 800128e:	4b51      	ldr	r3, [pc, #324]	; (80013d4 <main+0x2b0>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	  Test5 = adc2[1];
 8001296:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <main+0x2b0>)
 8001298:	785b      	ldrb	r3, [r3, #1]
 800129a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	  Test6 = adc2[2];
 800129e:	4b4d      	ldr	r3, [pc, #308]	; (80013d4 <main+0x2b0>)
 80012a0:	789b      	ldrb	r3, [r3, #2]
 80012a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32


	  test1 = Czujniki[0];
 80012a6:	4b4d      	ldr	r3, [pc, #308]	; (80013dc <main+0x2b8>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	  test2 = Czujniki[1];
 80012ae:	4b4b      	ldr	r3, [pc, #300]	; (80013dc <main+0x2b8>)
 80012b0:	785b      	ldrb	r3, [r3, #1]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
	  test3 = Czujniki[2];
 80012b6:	4b49      	ldr	r3, [pc, #292]	; (80013dc <main+0x2b8>)
 80012b8:	789b      	ldrb	r3, [r3, #2]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
	  test4 = Czujniki[3];
 80012be:	4b47      	ldr	r3, [pc, #284]	; (80013dc <main+0x2b8>)
 80012c0:	78db      	ldrb	r3, [r3, #3]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	623b      	str	r3, [r7, #32]
	  test5 = Czujniki[4];
 80012c6:	4b45      	ldr	r3, [pc, #276]	; (80013dc <main+0x2b8>)
 80012c8:	791b      	ldrb	r3, [r3, #4]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	61fb      	str	r3, [r7, #28]
	  test6 = Czujniki[5];
 80012ce:	4b43      	ldr	r3, [pc, #268]	; (80013dc <main+0x2b8>)
 80012d0:	795b      	ldrb	r3, [r3, #5]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	61bb      	str	r3, [r7, #24]


	  for(int n=0; n<6 ; n++ ){
 80012d6:	2300      	movs	r3, #0
 80012d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80012da:	e025      	b.n	8001328 <main+0x204>
		  er = Czujniki[5]*waga[5];
 80012dc:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <main+0x2b8>)
 80012de:	795b      	ldrb	r3, [r3, #5]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fb03 f302 	mul.w	r3, r3, r2
 80012ea:	63bb      	str	r3, [r7, #56]	; 0x38
		  error += Czujniki[n]*waga[n];
 80012ec:	4a3b      	ldr	r2, [pc, #236]	; (80013dc <main+0x2b8>)
 80012ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012f0:	4413      	add	r3, r2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	461a      	mov	r2, r3
 80012f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001300:	440b      	add	r3, r1
 8001302:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8001306:	fb03 f302 	mul.w	r3, r3, r2
 800130a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800130c:	4413      	add	r3, r2
 800130e:	663b      	str	r3, [r7, #96]	; 0x60
		  ilosc_wykryc += Czujniki[n];
 8001310:	4a32      	ldr	r2, [pc, #200]	; (80013dc <main+0x2b8>)
 8001312:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001314:	4413      	add	r3, r2
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800131e:	4413      	add	r3, r2
 8001320:	65fb      	str	r3, [r7, #92]	; 0x5c
	  for(int n=0; n<6 ; n++ ){
 8001322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001324:	3301      	adds	r3, #1
 8001326:	65bb      	str	r3, [r7, #88]	; 0x58
 8001328:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800132a:	2b05      	cmp	r3, #5
 800132c:	ddd6      	ble.n	80012dc <main+0x1b8>
	  }

	  if(ilosc_wykryc != 0 ){
 800132e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001330:	2b00      	cmp	r3, #0
 8001332:	d007      	beq.n	8001344 <main+0x220>
		  error /= ilosc_wykryc;
 8001334:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001338:	fb92 f3f3 	sdiv	r3, r2, r3
 800133c:	663b      	str	r3, [r7, #96]	; 0x60
		  prev_error = error;
 800133e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001340:	667b      	str	r3, [r7, #100]	; 0x64
 8001342:	e00f      	b.n	8001364 <main+0x240>
	  }
	  else{
		  if(prev_error < -3)
 8001344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001346:	f113 0f03 	cmn.w	r3, #3
 800134a:	da03      	bge.n	8001354 <main+0x230>
			  error = -6;
 800134c:	f06f 0305 	mvn.w	r3, #5
 8001350:	663b      	str	r3, [r7, #96]	; 0x60
 8001352:	e007      	b.n	8001364 <main+0x240>
		  else if(prev_error > 3)
 8001354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001356:	2b03      	cmp	r3, #3
 8001358:	dd02      	ble.n	8001360 <main+0x23c>
			  error= 6;
 800135a:	2306      	movs	r3, #6
 800135c:	663b      	str	r3, [r7, #96]	; 0x60
 800135e:	e001      	b.n	8001364 <main+0x240>
		  else
			  error=0;
 8001360:	2300      	movs	r3, #0
 8001362:	663b      	str	r3, [r7, #96]	; 0x60
	  }

	  rozniczka = error - prev_error;
 8001364:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  prev_error = error;
 800136c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800136e:	667b      	str	r3, [r7, #100]	; 0x64
	  regulacja = Kp*error + Kd*rozniczka;
 8001370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001372:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001374:	fb02 f203 	mul.w	r2, r2, r3
 8001378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800137a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800137c:	fb01 f303 	mul.w	r3, r1, r3
 8001380:	4413      	add	r3, r2
 8001382:	64bb      	str	r3, [r7, #72]	; 0x48

	  setPWM_Motor1( setpoint_M1 - regulacja );
 8001384:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe9e 	bl	80010cc <setPWM_Motor1>
	  setPWM_Motor2( setpoint_M2 + regulacja );
 8001390:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001394:	4413      	add	r3, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fea8 	bl	80010ec <setPWM_Motor2>

	  ilosc_wykryc=0;
 800139c:	2300      	movs	r3, #0
 800139e:	65fb      	str	r3, [r7, #92]	; 0x5c
	  error=0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	663b      	str	r3, [r7, #96]	; 0x60

	  HAL_ADC_Start_DMA(&hadc1, adc1, CONV_NUM);
 80013a4:	2203      	movs	r2, #3
 80013a6:	490a      	ldr	r1, [pc, #40]	; (80013d0 <main+0x2ac>)
 80013a8:	4807      	ldr	r0, [pc, #28]	; (80013c8 <main+0x2a4>)
 80013aa:	f000 ff5d 	bl	8002268 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc2, adc2, CONV_NUM);
 80013ae:	2203      	movs	r2, #3
 80013b0:	4908      	ldr	r1, [pc, #32]	; (80013d4 <main+0x2b0>)
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <main+0x2a8>)
 80013b4:	f000 ff58 	bl	8002268 <HAL_ADC_Start_DMA>
	  HAL_Delay(20);
 80013b8:	2014      	movs	r0, #20
 80013ba:	f000 fbe3 	bl	8001b84 <HAL_Delay>
	  if(adc1[0] > prog)
 80013be:	e706      	b.n	80011ce <main+0xaa>
 80013c0:	200003b4 	.word	0x200003b4
 80013c4:	20000400 	.word	0x20000400
 80013c8:	20000258 	.word	0x20000258
 80013cc:	20000208 	.word	0x20000208
 80013d0:	20000340 	.word	0x20000340
 80013d4:	20000348 	.word	0x20000348
 80013d8:	08007de8 	.word	0x08007de8
 80013dc:	20000338 	.word	0x20000338

080013e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b096      	sub	sp, #88	; 0x58
 80013e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013ea:	2228      	movs	r2, #40	; 0x28
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f004 ffbe 	bl	8006370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001414:	2302      	movs	r3, #2
 8001416:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001418:	2301      	movs	r3, #1
 800141a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800141c:	2310      	movs	r3, #16
 800141e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001420:	2302      	movs	r3, #2
 8001422:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001424:	2300      	movs	r3, #0
 8001426:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001428:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800142c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001432:	4618      	mov	r0, r3
 8001434:	f002 fb56 	bl	8003ae4 <HAL_RCC_OscConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800143e:	f000 f827 	bl	8001490 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001442:	230f      	movs	r3, #15
 8001444:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001446:	2302      	movs	r3, #2
 8001448:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f003 fa49 	bl	80048f4 <HAL_RCC_ClockConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001468:	f000 f812 	bl	8001490 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001474:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	4618      	mov	r0, r3
 800147a:	f003 fc21 	bl	8004cc0 <HAL_RCCEx_PeriphCLKConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001484:	f000 f804 	bl	8001490 <Error_Handler>
  }
}
 8001488:	bf00      	nop
 800148a:	3758      	adds	r7, #88	; 0x58
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <MX_SPI1_Init+0x74>)
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <MX_SPI1_Init+0x78>)
 80014a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_SPI1_Init+0x74>)
 80014ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <MX_SPI1_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <MX_SPI1_Init+0x74>)
 80014ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_SPI1_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <MX_SPI1_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_SPI1_Init+0x74>)
 80014ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_SPI1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_SPI1_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_SPI1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_SPI1_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_SPI1_Init+0x74>)
 80014ee:	2207      	movs	r2, #7
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_SPI1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_SPI1_Init+0x74>)
 80014fa:	2208      	movs	r2, #8
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_SPI1_Init+0x74>)
 8001500:	f003 fd04 	bl	8004f0c <HAL_SPI_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800150a:	f7ff ffc1 	bl	8001490 <Error_Handler>
  }

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000350 	.word	0x20000350
 8001518:	40013000 	.word	0x40013000

0800151c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <HAL_SPI_MspInit+0x8c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d12f      	bne.n	800159e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_SPI_MspInit+0x90>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	4a1a      	ldr	r2, [pc, #104]	; (80015ac <HAL_SPI_MspInit+0x90>)
 8001544:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001548:	6193      	str	r3, [r2, #24]
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <HAL_SPI_MspInit+0x90>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_SPI_MspInit+0x90>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	4a14      	ldr	r2, [pc, #80]	; (80015ac <HAL_SPI_MspInit+0x90>)
 800155c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001560:	6153      	str	r3, [r2, #20]
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_SPI_MspInit+0x90>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800156e:	2338      	movs	r3, #56	; 0x38
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800157e:	2305      	movs	r3, #5
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4809      	ldr	r0, [pc, #36]	; (80015b0 <HAL_SPI_MspInit+0x94>)
 800158a:	f002 f921 	bl	80037d0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	2023      	movs	r0, #35	; 0x23
 8001594:	f001 ff11 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001598:	2023      	movs	r0, #35	; 0x23
 800159a:	f001 ff2a 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	; 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40013000 	.word	0x40013000
 80015ac:	40021000 	.word	0x40021000
 80015b0:	48000400 	.word	0x48000400

080015b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_MspInit+0x44>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <HAL_MspInit+0x44>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6193      	str	r3, [r2, #24]
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <HAL_MspInit+0x44>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_MspInit+0x44>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_MspInit+0x44>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	61d3      	str	r3, [r2, #28]
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_MspInit+0x44>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <MemManage_Handler+0x4>

08001616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <UsageFault_Handler+0x4>

08001622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001650:	f000 fa78 	bl	8001b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <DMA1_Channel1_IRQHandler+0x10>)
 800165e:	f001 ffc6 	bl	80035ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200002a8 	.word	0x200002a8

0800166c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <DMA1_Channel2_IRQHandler+0x10>)
 8001672:	f001 ffbc 	bl	80035ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200002ec 	.word	0x200002ec

08001680 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001684:	4803      	ldr	r0, [pc, #12]	; (8001694 <ADC1_2_IRQHandler+0x14>)
 8001686:	f000 fec9 	bl	800241c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800168a:	4803      	ldr	r0, [pc, #12]	; (8001698 <ADC1_2_IRQHandler+0x18>)
 800168c:	f000 fec6 	bl	800241c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000258 	.word	0x20000258
 8001698:	20000208 	.word	0x20000208

0800169c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <TIM1_UP_TIM16_IRQHandler+0x10>)
 80016a2:	f003 ff91 	bl	80055c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000400 	.word	0x20000400

080016b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <TIM3_IRQHandler+0x10>)
 80016b6:	f003 ff87 	bl	80055c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200003b4 	.word	0x200003b4

080016c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <SPI1_IRQHandler+0x10>)
 80016ca:	f003 fcc3 	bl	8005054 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000350 	.word	0x20000350

080016d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <_sbrk+0x5c>)
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <_sbrk+0x60>)
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <_sbrk+0x64>)
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <_sbrk+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	429a      	cmp	r2, r3
 8001706:	d207      	bcs.n	8001718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001708:	f004 fe08 	bl	800631c <__errno>
 800170c:	4602      	mov	r2, r0
 800170e:	230c      	movs	r3, #12
 8001710:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	e009      	b.n	800172c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <_sbrk+0x64>)
 8001728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20003000 	.word	0x20003000
 8001738:	00000400 	.word	0x00000400
 800173c:	200001fc 	.word	0x200001fc
 8001740:	20000458 	.word	0x20000458

08001744 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <SystemInit+0x20>)
 800174a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <SystemInit+0x20>)
 8001750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800177a:	463b      	mov	r3, r7
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
 8001788:	615a      	str	r2, [r3, #20]
 800178a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <MX_TIM3_Init+0xac>)
 800178e:	4a22      	ldr	r2, [pc, #136]	; (8001818 <MX_TIM3_Init+0xb0>)
 8001790:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1599;
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <MX_TIM3_Init+0xac>)
 8001794:	f240 623f 	movw	r2, #1599	; 0x63f
 8001798:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179a:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <MX_TIM3_Init+0xac>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80017a0:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <MX_TIM3_Init+0xac>)
 80017a2:	2263      	movs	r2, #99	; 0x63
 80017a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <MX_TIM3_Init+0xac>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <MX_TIM3_Init+0xac>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017b2:	4818      	ldr	r0, [pc, #96]	; (8001814 <MX_TIM3_Init+0xac>)
 80017b4:	f003 fdc4 	bl	8005340 <HAL_TIM_PWM_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80017be:	f7ff fe67 	bl	8001490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	4619      	mov	r1, r3
 80017d0:	4810      	ldr	r0, [pc, #64]	; (8001814 <MX_TIM3_Init+0xac>)
 80017d2:	f004 fc9f 	bl	8006114 <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80017dc:	f7ff fe58 	bl	8001490 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e0:	2360      	movs	r3, #96	; 0x60
 80017e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017f0:	463b      	mov	r3, r7
 80017f2:	2208      	movs	r2, #8
 80017f4:	4619      	mov	r1, r3
 80017f6:	4807      	ldr	r0, [pc, #28]	; (8001814 <MX_TIM3_Init+0xac>)
 80017f8:	f004 f806 	bl	8005808 <HAL_TIM_PWM_ConfigChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001802:	f7ff fe45 	bl	8001490 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001806:	4803      	ldr	r0, [pc, #12]	; (8001814 <MX_TIM3_Init+0xac>)
 8001808:	f000 f8ce 	bl	80019a8 <HAL_TIM_MspPostInit>

}
 800180c:	bf00      	nop
 800180e:	3728      	adds	r7, #40	; 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200003b4 	.word	0x200003b4
 8001818:	40000400 	.word	0x40000400

0800181c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b092      	sub	sp, #72	; 0x48
 8001820:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
 8001832:	615a      	str	r2, [r3, #20]
 8001834:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001836:	463b      	mov	r3, r7
 8001838:	222c      	movs	r2, #44	; 0x2c
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f004 fd97 	bl	8006370 <memset>

  htim16.Instance = TIM16;
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <MX_TIM16_Init+0xec>)
 8001844:	4a31      	ldr	r2, [pc, #196]	; (800190c <MX_TIM16_Init+0xf0>)
 8001846:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1599;
 8001848:	4b2f      	ldr	r3, [pc, #188]	; (8001908 <MX_TIM16_Init+0xec>)
 800184a:	f240 623f 	movw	r2, #1599	; 0x63f
 800184e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001850:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <MX_TIM16_Init+0xec>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 8001856:	4b2c      	ldr	r3, [pc, #176]	; (8001908 <MX_TIM16_Init+0xec>)
 8001858:	2263      	movs	r2, #99	; 0x63
 800185a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <MX_TIM16_Init+0xec>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001862:	4b29      	ldr	r3, [pc, #164]	; (8001908 <MX_TIM16_Init+0xec>)
 8001864:	2200      	movs	r2, #0
 8001866:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <MX_TIM16_Init+0xec>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800186e:	4826      	ldr	r0, [pc, #152]	; (8001908 <MX_TIM16_Init+0xec>)
 8001870:	f003 fd0f 	bl	8005292 <HAL_TIM_Base_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800187a:	f7ff fe09 	bl	8001490 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800187e:	4822      	ldr	r0, [pc, #136]	; (8001908 <MX_TIM16_Init+0xec>)
 8001880:	f003 fd5e 	bl	8005340 <HAL_TIM_PWM_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800188a:	f7ff fe01 	bl	8001490 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800188e:	2360      	movs	r3, #96	; 0x60
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001896:	2300      	movs	r3, #0
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800189a:	2300      	movs	r3, #0
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ae:	2200      	movs	r2, #0
 80018b0:	4619      	mov	r1, r3
 80018b2:	4815      	ldr	r0, [pc, #84]	; (8001908 <MX_TIM16_Init+0xec>)
 80018b4:	f003 ffa8 	bl	8005808 <HAL_TIM_PWM_ConfigChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80018be:	f7ff fde7 	bl	8001490 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80018e4:	463b      	mov	r3, r7
 80018e6:	4619      	mov	r1, r3
 80018e8:	4807      	ldr	r0, [pc, #28]	; (8001908 <MX_TIM16_Init+0xec>)
 80018ea:	f004 fc81 	bl	80061f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80018f4:	f7ff fdcc 	bl	8001490 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim16);
 80018f8:	4803      	ldr	r0, [pc, #12]	; (8001908 <MX_TIM16_Init+0xec>)
 80018fa:	f000 f855 	bl	80019a8 <HAL_TIM_MspPostInit>

}
 80018fe:	bf00      	nop
 8001900:	3748      	adds	r7, #72	; 0x48
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000400 	.word	0x20000400
 800190c:	40014400 	.word	0x40014400

08001910 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <HAL_TIM_PWM_MspInit+0x44>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d113      	bne.n	800194a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_TIM_PWM_MspInit+0x48>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <HAL_TIM_PWM_MspInit+0x48>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_TIM_PWM_MspInit+0x48>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	201d      	movs	r0, #29
 8001940:	f001 fd3b 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001944:	201d      	movs	r0, #29
 8001946:	f001 fd54 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40000400 	.word	0x40000400
 8001958:	40021000 	.word	0x40021000

0800195c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <HAL_TIM_Base_MspInit+0x44>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d113      	bne.n	8001996 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800196e:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <HAL_TIM_Base_MspInit+0x48>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	4a0c      	ldr	r2, [pc, #48]	; (80019a4 <HAL_TIM_Base_MspInit+0x48>)
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	6193      	str	r3, [r2, #24]
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_TIM_Base_MspInit+0x48>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	2019      	movs	r0, #25
 800198c:	f001 fd15 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001990:	2019      	movs	r0, #25
 8001992:	f001 fd2e 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40014400 	.word	0x40014400
 80019a4:	40021000 	.word	0x40021000

080019a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	; 0x28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a23      	ldr	r2, [pc, #140]	; (8001a54 <HAL_TIM_MspPostInit+0xac>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d11c      	bne.n	8001a04 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_TIM_MspPostInit+0xb0>)
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	4a22      	ldr	r2, [pc, #136]	; (8001a58 <HAL_TIM_MspPostInit+0xb0>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6153      	str	r3, [r2, #20]
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_TIM_MspPostInit+0xb0>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = PWM_M1_Pin;
 80019e2:	2301      	movs	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019f2:	2302      	movs	r3, #2
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_M1_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4817      	ldr	r0, [pc, #92]	; (8001a5c <HAL_TIM_MspPostInit+0xb4>)
 80019fe:	f001 fee7 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001a02:	e022      	b.n	8001a4a <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM16)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <HAL_TIM_MspPostInit+0xb8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d11d      	bne.n	8001a4a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_TIM_MspPostInit+0xb0>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	4a11      	ldr	r2, [pc, #68]	; (8001a58 <HAL_TIM_MspPostInit+0xb0>)
 8001a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a18:	6153      	str	r3, [r2, #20]
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <HAL_TIM_MspPostInit+0xb0>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_M2_Pin;
 8001a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_M2_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a46:	f001 fec3 	bl	80037d0 <HAL_GPIO_Init>
}
 8001a4a:	bf00      	nop
 8001a4c:	3728      	adds	r7, #40	; 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40000400 	.word	0x40000400
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	48000400 	.word	0x48000400
 8001a60:	40014400 	.word	0x40014400

08001a64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a9c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a68:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a6a:	490e      	ldr	r1, [pc, #56]	; (8001aa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a6c:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <LoopForever+0xe>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a70:	e002      	b.n	8001a78 <LoopCopyDataInit>

08001a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a76:	3304      	adds	r3, #4

08001a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a7c:	d3f9      	bcc.n	8001a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a80:	4c0b      	ldr	r4, [pc, #44]	; (8001ab0 <LoopForever+0x16>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a84:	e001      	b.n	8001a8a <LoopFillZerobss>

08001a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a88:	3204      	adds	r2, #4

08001a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a8c:	d3fb      	bcc.n	8001a86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a8e:	f7ff fe59 	bl	8001744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a92:	f004 fc49 	bl	8006328 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a96:	f7ff fb45 	bl	8001124 <main>

08001a9a <LoopForever>:

LoopForever:
    b LoopForever
 8001a9a:	e7fe      	b.n	8001a9a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a9c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001aa8:	08008060 	.word	0x08008060
  ldr r2, =_sbss
 8001aac:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ab0:	20000454 	.word	0x20000454

08001ab4 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <CAN_RX0_IRQHandler>
	...

08001ab8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_Init+0x28>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <HAL_Init+0x28>)
 8001ac2:	f043 0310 	orr.w	r3, r3, #16
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f001 fc6b 	bl	80033a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f000 f808 	bl	8001ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad4:	f7ff fd6e 	bl	80015b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40022000 	.word	0x40022000

08001ae4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_InitTick+0x54>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x58>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f001 fc83 	bl	800340e <HAL_SYSTICK_Config>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00e      	b.n	8001b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d80a      	bhi.n	8001b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f001 fc4b 	bl	80033ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b24:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <HAL_InitTick+0x5c>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	20000004 	.word	0x20000004

08001b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_IncTick+0x20>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x24>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_IncTick+0x24>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000008 	.word	0x20000008
 8001b68:	2000044c 	.word	0x2000044c

08001b6c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_GetTick+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	2000044c 	.word	0x2000044c

08001b84 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff ffee 	bl	8001b6c <HAL_GetTick>
 8001b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d005      	beq.n	8001baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_Delay+0x40>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001baa:	bf00      	nop
 8001bac:	f7ff ffde 	bl	8001b6c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d8f7      	bhi.n	8001bac <HAL_Delay+0x28>
  {
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000008 	.word	0x20000008

08001bc8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b09a      	sub	sp, #104	; 0x68
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e172      	b.n	8001f1e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d176      	bne.n	8001d38 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d152      	bne.n	8001cf8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff f85d 	bl	8000d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d13b      	bne.n	8001cf8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f001 fa5f 	bl	8003144 <ADC_Disable>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d12f      	bne.n	8001cf8 <HAL_ADC_Init+0xe0>
 8001c98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d12b      	bne.n	8001cf8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ca8:	f023 0302 	bic.w	r3, r3, #2
 8001cac:	f043 0202 	orr.w	r2, r3, #2
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cc2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cd2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd4:	4b94      	ldr	r3, [pc, #592]	; (8001f28 <HAL_ADC_Init+0x310>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a94      	ldr	r2, [pc, #592]	; (8001f2c <HAL_ADC_Init+0x314>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	0c9a      	lsrs	r2, r3, #18
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cea:	e002      	b.n	8001cf2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f9      	bne.n	8001cec <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d14:	d110      	bne.n	8001d38 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f023 0312 	bic.w	r3, r3, #18
 8001d1e:	f043 0210 	orr.w	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f040 80df 	bne.w	8001f04 <HAL_ADC_Init+0x2ec>
 8001d46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 80da 	bne.w	8001f04 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f040 80d2 	bne.w	8001f04 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d68:	f043 0202 	orr.w	r2, r3, #2
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d70:	4b6f      	ldr	r3, [pc, #444]	; (8001f30 <HAL_ADC_Init+0x318>)
 8001d72:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d7c:	d102      	bne.n	8001d84 <HAL_ADC_Init+0x16c>
 8001d7e:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <HAL_ADC_Init+0x31c>)
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	e002      	b.n	8001d8a <HAL_ADC_Init+0x172>
 8001d84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d88:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d108      	bne.n	8001daa <HAL_ADC_Init+0x192>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_Init+0x192>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_ADC_Init+0x194>
 8001daa:	2300      	movs	r3, #0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d11c      	bne.n	8001dea <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001db0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d010      	beq.n	8001dd8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d107      	bne.n	8001dd2 <HAL_ADC_Init+0x1ba>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_Init+0x1ba>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_ADC_Init+0x1bc>
 8001dd2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d108      	bne.n	8001dea <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	431a      	orrs	r2, r3
 8001de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7e5b      	ldrb	r3, [r3, #25]
 8001dee:	035b      	lsls	r3, r3, #13
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001df4:	2a01      	cmp	r2, #1
 8001df6:	d002      	beq.n	8001dfe <HAL_ADC_Init+0x1e6>
 8001df8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dfc:	e000      	b.n	8001e00 <HAL_ADC_Init+0x1e8>
 8001dfe:	2200      	movs	r2, #0
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e10:	4313      	orrs	r3, r2
 8001e12:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d11b      	bne.n	8001e56 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7e5b      	ldrb	r3, [r3, #25]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	045a      	lsls	r2, r3, #17
 8001e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e30:	4313      	orrs	r3, r2
 8001e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e36:	663b      	str	r3, [r7, #96]	; 0x60
 8001e38:	e00d      	b.n	8001e56 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001e42:	f043 0220 	orr.w	r2, r3, #32
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d007      	beq.n	8001e6e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	4313      	orrs	r3, r2
 8001e68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d114      	bne.n	8001ea6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e8a:	f023 0302 	bic.w	r3, r3, #2
 8001e8e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7e1b      	ldrb	r3, [r3, #24]
 8001e94:	039a      	lsls	r2, r3, #14
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <HAL_ADC_Init+0x320>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001eb6:	430b      	orrs	r3, r1
 8001eb8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d10c      	bne.n	8001edc <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	f023 010f 	bic.w	r1, r3, #15
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	1e5a      	subs	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eda:	e007      	b.n	8001eec <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 020f 	bic.w	r2, r2, #15
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f023 0303 	bic.w	r3, r3, #3
 8001efa:	f043 0201 	orr.w	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
 8001f02:	e00a      	b.n	8001f1a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f023 0312 	bic.w	r3, r3, #18
 8001f0c:	f043 0210 	orr.w	r2, r3, #16
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001f14:	2301      	movs	r3, #1
 8001f16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001f1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3768      	adds	r7, #104	; 0x68
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	431bde83 	.word	0x431bde83
 8001f30:	50000300 	.word	0x50000300
 8001f34:	50000100 	.word	0x50000100
 8001f38:	fff0c007 	.word	0xfff0c007

08001f3c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f040 809c 	bne.w	8002090 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_Start+0x2a>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e097      	b.n	8002096 <HAL_ADC_Start+0x15a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f001 f88a 	bl	8003088 <ADC_Enable>
 8001f74:	4603      	mov	r3, r0
 8001f76:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f040 8083 	bne.w	8002086 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f94:	4b42      	ldr	r3, [pc, #264]	; (80020a0 <HAL_ADC_Start+0x164>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d004      	beq.n	8001faa <HAL_ADC_Start+0x6e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa8:	d115      	bne.n	8001fd6 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d027      	beq.n	8002014 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fcc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001fd4:	e01e      	b.n	8002014 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fea:	d004      	beq.n	8001ff6 <HAL_ADC_Start+0xba>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a2c      	ldr	r2, [pc, #176]	; (80020a4 <HAL_ADC_Start+0x168>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d10e      	bne.n	8002014 <HAL_ADC_Start+0xd8>
 8001ff6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800200c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800201c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002020:	d106      	bne.n	8002030 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f023 0206 	bic.w	r2, r3, #6
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	645a      	str	r2, [r3, #68]	; 0x44
 800202e:	e002      	b.n	8002036 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	221c      	movs	r2, #28
 8002044:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_ADC_Start+0x164>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	2b00      	cmp	r3, #0
 8002050:	d010      	beq.n	8002074 <HAL_ADC_Start+0x138>
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_ADC_Start+0x164>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	2b05      	cmp	r3, #5
 800205c:	d00a      	beq.n	8002074 <HAL_ADC_Start+0x138>
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_ADC_Start+0x164>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	2b09      	cmp	r3, #9
 8002068:	d004      	beq.n	8002074 <HAL_ADC_Start+0x138>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002072:	d10f      	bne.n	8002094 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0204 	orr.w	r2, r2, #4
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	e006      	b.n	8002094 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800208e:	e001      	b.n	8002094 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002090:	2302      	movs	r3, #2
 8002092:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002094:	7bfb      	ldrb	r3, [r7, #15]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	50000300 	.word	0x50000300
 80020a4:	50000100 	.word	0x50000100

080020a8 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f040 80c6 	bne.w	8002250 <HAL_ADC_Start_IT+0x1a8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_ADC_Start_IT+0x2a>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e0c1      	b.n	8002256 <HAL_ADC_Start_IT+0x1ae>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 ffd4 	bl	8003088 <ADC_Enable>
 80020e0:	4603      	mov	r3, r0
 80020e2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 80ad 	bne.w	8002246 <HAL_ADC_Start_IT+0x19e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002100:	4b57      	ldr	r3, [pc, #348]	; (8002260 <HAL_ADC_Start_IT+0x1b8>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <HAL_ADC_Start_IT+0x6e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002114:	d115      	bne.n	8002142 <HAL_ADC_Start_IT+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d027      	beq.n	8002180 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002138:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002140:	e01e      	b.n	8002180 <HAL_ADC_Start_IT+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002156:	d004      	beq.n	8002162 <HAL_ADC_Start_IT+0xba>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a41      	ldr	r2, [pc, #260]	; (8002264 <HAL_ADC_Start_IT+0x1bc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d10e      	bne.n	8002180 <HAL_ADC_Start_IT+0xd8>
 8002162:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002178:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800218c:	d106      	bne.n	800219c <HAL_ADC_Start_IT+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f023 0206 	bic.w	r2, r3, #6
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	645a      	str	r2, [r3, #68]	; 0x44
 800219a:	e002      	b.n	80021a2 <HAL_ADC_Start_IT+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	221c      	movs	r2, #28
 80021b0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d110      	bne.n	80021dc <HAL_ADC_Start_IT+0x134>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0204 	bic.w	r2, r2, #4
 80021c8:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0208 	orr.w	r2, r2, #8
 80021d8:	605a      	str	r2, [r3, #4]
          break;
 80021da:	e008      	b.n	80021ee <HAL_ADC_Start_IT+0x146>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 020c 	orr.w	r2, r2, #12
 80021ea:	605a      	str	r2, [r3, #4]
          break;
 80021ec:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d107      	bne.n	8002206 <HAL_ADC_Start_IT+0x15e>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0210 	bic.w	r2, r2, #16
 8002204:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002206:	4b16      	ldr	r3, [pc, #88]	; (8002260 <HAL_ADC_Start_IT+0x1b8>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 031f 	and.w	r3, r3, #31
 800220e:	2b00      	cmp	r3, #0
 8002210:	d010      	beq.n	8002234 <HAL_ADC_Start_IT+0x18c>
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <HAL_ADC_Start_IT+0x1b8>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	2b05      	cmp	r3, #5
 800221c:	d00a      	beq.n	8002234 <HAL_ADC_Start_IT+0x18c>
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <HAL_ADC_Start_IT+0x1b8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	2b09      	cmp	r3, #9
 8002228:	d004      	beq.n	8002234 <HAL_ADC_Start_IT+0x18c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002232:	d10f      	bne.n	8002254 <HAL_ADC_Start_IT+0x1ac>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0204 	orr.w	r2, r2, #4
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	e006      	b.n	8002254 <HAL_ADC_Start_IT+0x1ac>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800224e:	e001      	b.n	8002254 <HAL_ADC_Start_IT+0x1ac>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002250:	2302      	movs	r3, #2
 8002252:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	50000300 	.word	0x50000300
 8002264:	50000100 	.word	0x50000100

08002268 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 80b9 	bne.w	80023fa <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_ADC_Start_DMA+0x2e>
 8002292:	2302      	movs	r3, #2
 8002294:	e0b4      	b.n	8002400 <HAL_ADC_Start_DMA+0x198>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800229e:	4b5a      	ldr	r3, [pc, #360]	; (8002408 <HAL_ADC_Start_DMA+0x1a0>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f040 80a0 	bne.w	80023ec <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 feeb 	bl	8003088 <ADC_Enable>
 80022b2:	4603      	mov	r3, r0
 80022b4:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80022b6:	7dfb      	ldrb	r3, [r7, #23]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f040 8092 	bne.w	80023e2 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022c6:	f023 0301 	bic.w	r3, r3, #1
 80022ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022d2:	4b4d      	ldr	r3, [pc, #308]	; (8002408 <HAL_ADC_Start_DMA+0x1a0>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d004      	beq.n	80022e8 <HAL_ADC_Start_DMA+0x80>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e6:	d115      	bne.n	8002314 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d027      	beq.n	8002352 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800230a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002312:	e01e      	b.n	8002352 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002328:	d004      	beq.n	8002334 <HAL_ADC_Start_DMA+0xcc>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a37      	ldr	r2, [pc, #220]	; (800240c <HAL_ADC_Start_DMA+0x1a4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d10e      	bne.n	8002352 <HAL_ADC_Start_DMA+0xea>
 8002334:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800234a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235e:	d106      	bne.n	800236e <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	f023 0206 	bic.w	r2, r3, #6
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	645a      	str	r2, [r3, #68]	; 0x44
 800236c:	e002      	b.n	8002374 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002380:	4a23      	ldr	r2, [pc, #140]	; (8002410 <HAL_ADC_Start_DMA+0x1a8>)
 8002382:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002388:	4a22      	ldr	r2, [pc, #136]	; (8002414 <HAL_ADC_Start_DMA+0x1ac>)
 800238a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	4a21      	ldr	r2, [pc, #132]	; (8002418 <HAL_ADC_Start_DMA+0x1b0>)
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	221c      	movs	r2, #28
 800239a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0210 	orr.w	r2, r2, #16
 80023aa:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3340      	adds	r3, #64	; 0x40
 80023c6:	4619      	mov	r1, r3
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f001 f872 	bl	80034b4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0204 	orr.w	r2, r2, #4
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	e00d      	b.n	80023fe <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80023ea:	e008      	b.n	80023fe <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80023f8:	e001      	b.n	80023fe <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
 80023fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	50000300 	.word	0x50000300
 800240c:	50000100 	.word	0x50000100
 8002410:	08002fbd 	.word	0x08002fbd
 8002414:	08003037 	.word	0x08003037
 8002418:	08003053 	.word	0x08003053

0800241c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b04      	cmp	r3, #4
 800243c:	d106      	bne.n	800244c <HAL_ADC_IRQHandler+0x30>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b04      	cmp	r3, #4
 800244a:	d00d      	beq.n	8002468 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002456:	2b08      	cmp	r3, #8
 8002458:	d17a      	bne.n	8002550 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b08      	cmp	r3, #8
 8002466:	d173      	bne.n	8002550 <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002480:	4b88      	ldr	r3, [pc, #544]	; (80026a4 <HAL_ADC_IRQHandler+0x288>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	2b00      	cmp	r3, #0
 800248a:	d010      	beq.n	80024ae <HAL_ADC_IRQHandler+0x92>
 800248c:	4b85      	ldr	r3, [pc, #532]	; (80026a4 <HAL_ADC_IRQHandler+0x288>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	2b05      	cmp	r3, #5
 8002496:	d00a      	beq.n	80024ae <HAL_ADC_IRQHandler+0x92>
 8002498:	4b82      	ldr	r3, [pc, #520]	; (80026a4 <HAL_ADC_IRQHandler+0x288>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	2b09      	cmp	r3, #9
 80024a2:	d004      	beq.n	80024ae <HAL_ADC_IRQHandler+0x92>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ac:	d104      	bne.n	80024b8 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	e003      	b.n	80024c0 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80024b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d139      	bne.n	8002542 <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d134      	bne.n	8002542 <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d12d      	bne.n	8002542 <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d11a      	bne.n	800252a <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 020c 	bic.w	r2, r2, #12
 8002502:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d112      	bne.n	8002542 <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	f043 0201 	orr.w	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	641a      	str	r2, [r3, #64]	; 0x40
 8002528:	e00b      	b.n	8002542 <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f043 0210 	orr.w	r2, r3, #16
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f043 0201 	orr.w	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff fb40 	bl	8001bc8 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	220c      	movs	r2, #12
 800254e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b20      	cmp	r3, #32
 800255c:	d106      	bne.n	800256c <HAL_ADC_IRQHandler+0x150>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b20      	cmp	r3, #32
 800256a:	d00f      	beq.n	800258c <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002576:	2b40      	cmp	r3, #64	; 0x40
 8002578:	f040 80a9 	bne.w	80026ce <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b40      	cmp	r3, #64	; 0x40
 8002588:	f040 80a1 	bne.w	80026ce <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002598:	4b42      	ldr	r3, [pc, #264]	; (80026a4 <HAL_ADC_IRQHandler+0x288>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d010      	beq.n	80025c6 <HAL_ADC_IRQHandler+0x1aa>
 80025a4:	4b3f      	ldr	r3, [pc, #252]	; (80026a4 <HAL_ADC_IRQHandler+0x288>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	2b05      	cmp	r3, #5
 80025ae:	d00a      	beq.n	80025c6 <HAL_ADC_IRQHandler+0x1aa>
 80025b0:	4b3c      	ldr	r3, [pc, #240]	; (80026a4 <HAL_ADC_IRQHandler+0x288>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	d004      	beq.n	80025c6 <HAL_ADC_IRQHandler+0x1aa>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025c4:	d104      	bne.n	80025d0 <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	e003      	b.n	80025d8 <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80025d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d16c      	bne.n	80026c0 <HAL_ADC_IRQHandler+0x2a4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00b      	beq.n	8002608 <HAL_ADC_IRQHandler+0x1ec>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d160      	bne.n	80026c0 <HAL_ADC_IRQHandler+0x2a4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002604:	2b00      	cmp	r3, #0
 8002606:	d15b      	bne.n	80026c0 <HAL_ADC_IRQHandler+0x2a4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002612:	2b40      	cmp	r3, #64	; 0x40
 8002614:	d154      	bne.n	80026c0 <HAL_ADC_IRQHandler+0x2a4>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002616:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <HAL_ADC_IRQHandler+0x288>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	2b00      	cmp	r3, #0
 8002620:	d010      	beq.n	8002644 <HAL_ADC_IRQHandler+0x228>
 8002622:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <HAL_ADC_IRQHandler+0x288>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	2b06      	cmp	r3, #6
 800262c:	d00a      	beq.n	8002644 <HAL_ADC_IRQHandler+0x228>
 800262e:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_ADC_IRQHandler+0x288>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	2b07      	cmp	r3, #7
 8002638:	d004      	beq.n	8002644 <HAL_ADC_IRQHandler+0x228>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002642:	d104      	bne.n	800264e <HAL_ADC_IRQHandler+0x232>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	e003      	b.n	8002656 <HAL_ADC_IRQHandler+0x23a>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800264e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d12f      	bne.n	80026c0 <HAL_ADC_IRQHandler+0x2a4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d11c      	bne.n	80026a8 <HAL_ADC_IRQHandler+0x28c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800267c:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d114      	bne.n	80026c0 <HAL_ADC_IRQHandler+0x2a4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40
 80026a2:	e00d      	b.n	80026c0 <HAL_ADC_IRQHandler+0x2a4>
 80026a4:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f043 0210 	orr.w	r2, r3, #16
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f8cb 	bl	800285c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2260      	movs	r2, #96	; 0x60
 80026cc:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d8:	2b80      	cmp	r3, #128	; 0x80
 80026da:	d113      	bne.n	8002704 <HAL_ADC_IRQHandler+0x2e8>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e6:	2b80      	cmp	r3, #128	; 0x80
 80026e8:	d10c      	bne.n	8002704 <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff fa7a 	bl	8001bf0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2280      	movs	r2, #128	; 0x80
 8002702:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002712:	d115      	bne.n	8002740 <HAL_ADC_IRQHandler+0x324>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002722:	d10d      	bne.n	8002740 <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f8a7 	bl	8002884 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800273e:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800274a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800274e:	d115      	bne.n	800277c <HAL_ADC_IRQHandler+0x360>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800275a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800275e:	d10d      	bne.n	800277c <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f893 	bl	8002898 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800277a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	2b10      	cmp	r3, #16
 8002788:	d13d      	bne.n	8002806 <HAL_ADC_IRQHandler+0x3ea>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b10      	cmp	r3, #16
 8002796:	d136      	bne.n	8002806 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279c:	2b01      	cmp	r3, #1
 800279e:	d102      	bne.n	80027a6 <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 80027a0:	2301      	movs	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	e019      	b.n	80027da <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027a6:	4b2c      	ldr	r3, [pc, #176]	; (8002858 <HAL_ADC_IRQHandler+0x43c>)
 80027a8:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d10a      	bne.n	80027da <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80027c4:	2301      	movs	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	e007      	b.n	80027da <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80027d6:	2301      	movs	r3, #1
 80027d8:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d10e      	bne.n	80027fe <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	f043 0202 	orr.w	r2, r3, #2
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff fa03 	bl	8001c04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2210      	movs	r2, #16
 8002804:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002814:	d11b      	bne.n	800284e <HAL_ADC_IRQHandler+0x432>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002824:	d113      	bne.n	800284e <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f043 0208 	orr.w	r2, r3, #8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002846:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f811 	bl	8002870 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800284e:	bf00      	nop
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	50000300 	.word	0x50000300

0800285c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b09b      	sub	sp, #108	; 0x6c
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x22>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e2a5      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x56e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f040 8289 	bne.w	8002df8 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d81c      	bhi.n	8002928 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	461a      	mov	r2, r3
 8002902:	231f      	movs	r3, #31
 8002904:	4093      	lsls	r3, r2
 8002906:	43db      	mvns	r3, r3
 8002908:	4019      	ands	r1, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fa00 f203 	lsl.w	r2, r0, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
 8002926:	e063      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b09      	cmp	r3, #9
 800292e:	d81e      	bhi.n	800296e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	4413      	add	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	3b1e      	subs	r3, #30
 8002944:	221f      	movs	r2, #31
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	4019      	ands	r1, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	3b1e      	subs	r3, #30
 8002960:	fa00 f203 	lsl.w	r2, r0, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	635a      	str	r2, [r3, #52]	; 0x34
 800296c:	e040      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b0e      	cmp	r3, #14
 8002974:	d81e      	bhi.n	80029b4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	3b3c      	subs	r3, #60	; 0x3c
 800298a:	221f      	movs	r2, #31
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	4019      	ands	r1, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	3b3c      	subs	r3, #60	; 0x3c
 80029a6:	fa00 f203 	lsl.w	r2, r0, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38
 80029b2:	e01d      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	3b5a      	subs	r3, #90	; 0x5a
 80029c8:	221f      	movs	r2, #31
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	4019      	ands	r1, r3
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	3b5a      	subs	r3, #90	; 0x5a
 80029e4:	fa00 f203 	lsl.w	r2, r0, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f040 80e5 	bne.w	8002bca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b09      	cmp	r3, #9
 8002a06:	d91c      	bls.n	8002a42 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6999      	ldr	r1, [r3, #24]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	3b1e      	subs	r3, #30
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	4019      	ands	r1, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6898      	ldr	r0, [r3, #8]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	3b1e      	subs	r3, #30
 8002a34:	fa00 f203 	lsl.w	r2, r0, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	619a      	str	r2, [r3, #24]
 8002a40:	e019      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6959      	ldr	r1, [r3, #20]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	2207      	movs	r2, #7
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	4019      	ands	r1, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6898      	ldr	r0, [r3, #8]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	08db      	lsrs	r3, r3, #3
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d84f      	bhi.n	8002b38 <HAL_ADC_ConfigChannel+0x28c>
 8002a98:	a201      	add	r2, pc, #4	; (adr r2, 8002aa0 <HAL_ADC_ConfigChannel+0x1f4>)
 8002a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9e:	bf00      	nop
 8002aa0:	08002ab1 	.word	0x08002ab1
 8002aa4:	08002ad3 	.word	0x08002ad3
 8002aa8:	08002af5 	.word	0x08002af5
 8002aac:	08002b17 	.word	0x08002b17
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ab6:	4b9e      	ldr	r3, [pc, #632]	; (8002d30 <HAL_ADC_ConfigChannel+0x484>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	0691      	lsls	r1, r2, #26
 8002ac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ace:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ad0:	e07e      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ad8:	4b95      	ldr	r3, [pc, #596]	; (8002d30 <HAL_ADC_ConfigChannel+0x484>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	0691      	lsls	r1, r2, #26
 8002ae2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002af0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002af2:	e06d      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002afa:	4b8d      	ldr	r3, [pc, #564]	; (8002d30 <HAL_ADC_ConfigChannel+0x484>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	0691      	lsls	r1, r2, #26
 8002b04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b06:	430a      	orrs	r2, r1
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b12:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b14:	e05c      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b1c:	4b84      	ldr	r3, [pc, #528]	; (8002d30 <HAL_ADC_ConfigChannel+0x484>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	0691      	lsls	r1, r2, #26
 8002b26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b34:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b36:	e04b      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	069b      	lsls	r3, r3, #26
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d107      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b5a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	069b      	lsls	r3, r3, #26
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d107      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b7e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	069b      	lsls	r3, r3, #26
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d107      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ba2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002baa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	069b      	lsls	r3, r3, #26
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d10a      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bc6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002bc8:	e001      	b.n	8002bce <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002bca:	bf00      	nop
 8002bcc:	e000      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002bce:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d108      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x344>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x344>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x346>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 810b 	bne.w	8002e0e <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d00f      	beq.n	8002c20 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43da      	mvns	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	400a      	ands	r2, r1
 8002c1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002c1e:	e049      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b09      	cmp	r3, #9
 8002c40:	d91c      	bls.n	8002c7c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6999      	ldr	r1, [r3, #24]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	3b1b      	subs	r3, #27
 8002c54:	2207      	movs	r2, #7
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	4019      	ands	r1, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6898      	ldr	r0, [r3, #8]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3b1b      	subs	r3, #27
 8002c6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	619a      	str	r2, [r3, #24]
 8002c7a:	e01b      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6959      	ldr	r1, [r3, #20]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	2207      	movs	r2, #7
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	4019      	ands	r1, r3
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6898      	ldr	r0, [r3, #8]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cb4:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <HAL_ADC_ConfigChannel+0x488>)
 8002cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b10      	cmp	r3, #16
 8002cbe:	d105      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d015      	beq.n	8002cf8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002cd0:	2b11      	cmp	r3, #17
 8002cd2:	d105      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002cd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00b      	beq.n	8002cf8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ce4:	2b12      	cmp	r3, #18
 8002ce6:	f040 8092 	bne.w	8002e0e <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 808b 	bne.w	8002e0e <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d00:	d102      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x45c>
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <HAL_ADC_ConfigChannel+0x48c>)
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	e002      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x462>
 8002d08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d0c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d10f      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x490>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d108      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x490>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e007      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x492>
 8002d2e:	bf00      	nop
 8002d30:	83fff000 	.word	0x83fff000
 8002d34:	50000300 	.word	0x50000300
 8002d38:	50000100 	.word	0x50000100
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d150      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d42:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d010      	beq.n	8002d6a <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d107      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x4b8>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x4b8>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x4ba>
 8002d64:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d13c      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b10      	cmp	r3, #16
 8002d70:	d11d      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x502>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d7a:	d118      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d86:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d88:	4b27      	ldr	r3, [pc, #156]	; (8002e28 <HAL_ADC_ConfigChannel+0x57c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a27      	ldr	r2, [pc, #156]	; (8002e2c <HAL_ADC_ConfigChannel+0x580>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	0c9a      	lsrs	r2, r3, #18
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d9e:	e002      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f9      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002dac:	e02e      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b11      	cmp	r3, #17
 8002db4:	d10b      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x522>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dbe:	d106      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dca:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002dcc:	e01e      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b12      	cmp	r3, #18
 8002dd4:	d11a      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002de2:	e013      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002df6:	e00a      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f043 0220 	orr.w	r2, r3, #32
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002e0a:	e000      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e0c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	376c      	adds	r7, #108	; 0x6c
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	431bde83 	.word	0x431bde83

08002e30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b099      	sub	sp, #100	; 0x64
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e48:	d102      	bne.n	8002e50 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002e4a:	4b5a      	ldr	r3, [pc, #360]	; (8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	e002      	b.n	8002e56 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002e50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e54:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0a2      	b.n	8002fa6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e09b      	b.n	8002fa6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d17f      	bne.n	8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d179      	bne.n	8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e90:	4b49      	ldr	r3, [pc, #292]	; (8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002e92:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d040      	beq.n	8002f1e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	6859      	ldr	r1, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002eae:	035b      	lsls	r3, r3, #13
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d108      	bne.n	8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d15c      	bne.n	8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d107      	bne.n	8002efa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002efa:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d14b      	bne.n	8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002f00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f08:	f023 030f 	bic.w	r3, r3, #15
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	6811      	ldr	r1, [r2, #0]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	6892      	ldr	r2, [r2, #8]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	431a      	orrs	r2, r3
 8002f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f1a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f1c:	e03c      	b.n	8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f28:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d108      	bne.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d123      	bne.n	8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d107      	bne.n	8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002f6c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d112      	bne.n	8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f7a:	f023 030f 	bic.w	r3, r3, #15
 8002f7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f80:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f82:	e009      	b.n	8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	f043 0220 	orr.w	r2, r3, #32
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002f96:	e000      	b.n	8002f9a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f98:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002fa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3764      	adds	r7, #100	; 0x64
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	50000100 	.word	0x50000100
 8002fb8:	50000300 	.word	0x50000300

08002fbc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d126      	bne.n	8003024 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d115      	bne.n	800301c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d111      	bne.n	800301c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	f043 0201 	orr.w	r2, r3, #1
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f7fe fdd3 	bl	8001bc8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003022:	e004      	b.n	800302e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
}
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7fe fdc9 	bl	8001bdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	f043 0204 	orr.w	r2, r3, #4
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f7fe fdc3 	bl	8001c04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800307e:	bf00      	nop
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d108      	bne.n	80030b4 <ADC_Enable+0x2c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <ADC_Enable+0x2c>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <ADC_Enable+0x2e>
 80030b4:	2300      	movs	r3, #0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d13c      	bne.n	8003134 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	4b1f      	ldr	r3, [pc, #124]	; (8003140 <ADC_Enable+0xb8>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00d      	beq.n	80030e4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f043 0210 	orr.w	r2, r3, #16
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d8:	f043 0201 	orr.w	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e028      	b.n	8003136 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80030f4:	f7fe fd3a 	bl	8001b6c <HAL_GetTick>
 80030f8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030fa:	e014      	b.n	8003126 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030fc:	f7fe fd36 	bl	8001b6c <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d90d      	bls.n	8003126 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f043 0210 	orr.w	r2, r3, #16
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	f043 0201 	orr.w	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e007      	b.n	8003136 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b01      	cmp	r3, #1
 8003132:	d1e3      	bne.n	80030fc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	8000003f 	.word	0x8000003f

08003144 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d108      	bne.n	8003170 <ADC_Disable+0x2c>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <ADC_Disable+0x2c>
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <ADC_Disable+0x2e>
 8003170:	2300      	movs	r3, #0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d040      	beq.n	80031f8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 030d 	and.w	r3, r3, #13
 8003180:	2b01      	cmp	r3, #1
 8003182:	d10f      	bne.n	80031a4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0202 	orr.w	r2, r2, #2
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2203      	movs	r2, #3
 800319a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800319c:	f7fe fce6 	bl	8001b6c <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031a2:	e022      	b.n	80031ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f043 0210 	orr.w	r2, r3, #16
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b4:	f043 0201 	orr.w	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e01c      	b.n	80031fa <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031c0:	f7fe fcd4 	bl	8001b6c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d90d      	bls.n	80031ea <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f043 0210 	orr.w	r2, r3, #16
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	f043 0201 	orr.w	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e007      	b.n	80031fa <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d0e3      	beq.n	80031c0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800322c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003236:	4a04      	ldr	r2, [pc, #16]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	60d3      	str	r3, [r2, #12]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <__NVIC_GetPriorityGrouping+0x18>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 0307 	and.w	r3, r3, #7
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db0b      	blt.n	8003292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	4907      	ldr	r1, [pc, #28]	; (80032a0 <__NVIC_EnableIRQ+0x38>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2001      	movs	r0, #1
 800328a:	fa00 f202 	lsl.w	r2, r0, r2
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000e100 	.word	0xe000e100

080032a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	6039      	str	r1, [r7, #0]
 80032ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	db0a      	blt.n	80032ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	490c      	ldr	r1, [pc, #48]	; (80032f0 <__NVIC_SetPriority+0x4c>)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	440b      	add	r3, r1
 80032c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032cc:	e00a      	b.n	80032e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4908      	ldr	r1, [pc, #32]	; (80032f4 <__NVIC_SetPriority+0x50>)
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	3b04      	subs	r3, #4
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	440b      	add	r3, r1
 80032e2:	761a      	strb	r2, [r3, #24]
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000e100 	.word	0xe000e100
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f1c3 0307 	rsb	r3, r3, #7
 8003312:	2b04      	cmp	r3, #4
 8003314:	bf28      	it	cs
 8003316:	2304      	movcs	r3, #4
 8003318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3304      	adds	r3, #4
 800331e:	2b06      	cmp	r3, #6
 8003320:	d902      	bls.n	8003328 <NVIC_EncodePriority+0x30>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3b03      	subs	r3, #3
 8003326:	e000      	b.n	800332a <NVIC_EncodePriority+0x32>
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	f04f 32ff 	mov.w	r2, #4294967295
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43da      	mvns	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	401a      	ands	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003340:	f04f 31ff 	mov.w	r1, #4294967295
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	43d9      	mvns	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	4313      	orrs	r3, r2
         );
}
 8003352:	4618      	mov	r0, r3
 8003354:	3724      	adds	r7, #36	; 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003370:	d301      	bcc.n	8003376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003372:	2301      	movs	r3, #1
 8003374:	e00f      	b.n	8003396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <SysTick_Config+0x40>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800337e:	210f      	movs	r1, #15
 8003380:	f04f 30ff 	mov.w	r0, #4294967295
 8003384:	f7ff ff8e 	bl	80032a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <SysTick_Config+0x40>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <SysTick_Config+0x40>)
 8003390:	2207      	movs	r2, #7
 8003392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	e000e010 	.word	0xe000e010

080033a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff29 	bl	8003204 <__NVIC_SetPriorityGrouping>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b086      	sub	sp, #24
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033cc:	f7ff ff3e 	bl	800324c <__NVIC_GetPriorityGrouping>
 80033d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	6978      	ldr	r0, [r7, #20]
 80033d8:	f7ff ff8e 	bl	80032f8 <NVIC_EncodePriority>
 80033dc:	4602      	mov	r2, r0
 80033de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff5d 	bl	80032a4 <__NVIC_SetPriority>
}
 80033ea:	bf00      	nop
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff31 	bl	8003268 <__NVIC_EnableIRQ>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ffa2 	bl	8003360 <SysTick_Config>
 800341c:	4603      	mov	r3, r0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e037      	b.n	80034ac <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003452:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003456:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003460:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800346c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003478:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f97e 	bl	8003790 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}  
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_DMA_Start_IT+0x20>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e04a      	b.n	800356a <HAL_DMA_Start_IT+0xb6>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d13a      	bne.n	800355c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2202      	movs	r2, #2
 80034ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f912 	bl	8003734 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 020e 	orr.w	r2, r2, #14
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e00f      	b.n	800354a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 020a 	orr.w	r2, r2, #10
 8003538:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0204 	bic.w	r2, r2, #4
 8003548:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0201 	orr.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	e005      	b.n	8003568 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003564:	2302      	movs	r3, #2
 8003566:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003568:	7dfb      	ldrb	r3, [r7, #23]
} 
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003584:	2b02      	cmp	r3, #2
 8003586:	d005      	beq.n	8003594 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2204      	movs	r2, #4
 800358c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	73fb      	strb	r3, [r7, #15]
 8003592:	e027      	b.n	80035e4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 020e 	bic.w	r2, r2, #14
 80035a2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0201 	bic.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035bc:	2101      	movs	r1, #1
 80035be:	fa01 f202 	lsl.w	r2, r1, r2
 80035c2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	4798      	blx	r3
    } 
  }
  return status;
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	2204      	movs	r2, #4
 800360c:	409a      	lsls	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d024      	beq.n	8003660 <HAL_DMA_IRQHandler+0x72>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d01f      	beq.n	8003660 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0320 	and.w	r3, r3, #32
 800362a:	2b00      	cmp	r3, #0
 800362c:	d107      	bne.n	800363e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0204 	bic.w	r2, r2, #4
 800363c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003646:	2104      	movs	r1, #4
 8003648:	fa01 f202 	lsl.w	r2, r1, r2
 800364c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d06a      	beq.n	800372c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800365e:	e065      	b.n	800372c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	2202      	movs	r2, #2
 8003666:	409a      	lsls	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d02c      	beq.n	80036ca <HAL_DMA_IRQHandler+0xdc>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d027      	beq.n	80036ca <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 020a 	bic.w	r2, r2, #10
 8003696:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a8:	2102      	movs	r1, #2
 80036aa:	fa01 f202 	lsl.w	r2, r1, r2
 80036ae:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d035      	beq.n	800372c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80036c8:	e030      	b.n	800372c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	2208      	movs	r2, #8
 80036d0:	409a      	lsls	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d028      	beq.n	800372c <HAL_DMA_IRQHandler+0x13e>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d023      	beq.n	800372c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 020e 	bic.w	r2, r2, #14
 80036f2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fc:	2101      	movs	r1, #1
 80036fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003702:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	2b00      	cmp	r3, #0
 8003720:	d004      	beq.n	800372c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	4798      	blx	r3
    }
  }
}  
 800372a:	e7ff      	b.n	800372c <HAL_DMA_IRQHandler+0x13e>
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374a:	2101      	movs	r1, #1
 800374c:	fa01 f202 	lsl.w	r2, r1, r2
 8003750:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b10      	cmp	r3, #16
 8003760:	d108      	bne.n	8003774 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003772:	e007      	b.n	8003784 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <DMA_CalcBaseAndBitshift+0x34>)
 80037a0:	4413      	add	r3, r2
 80037a2:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <DMA_CalcBaseAndBitshift+0x38>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	009a      	lsls	r2, r3, #2
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a06      	ldr	r2, [pc, #24]	; (80037cc <DMA_CalcBaseAndBitshift+0x3c>)
 80037b4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	bffdfff8 	.word	0xbffdfff8
 80037c8:	cccccccd 	.word	0xcccccccd
 80037cc:	40020000 	.word	0x40020000

080037d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037de:	e14e      	b.n	8003a7e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	2101      	movs	r1, #1
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ec:	4013      	ands	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8140 	beq.w	8003a78 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d00b      	beq.n	8003818 <HAL_GPIO_Init+0x48>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d007      	beq.n	8003818 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800380c:	2b11      	cmp	r3, #17
 800380e:	d003      	beq.n	8003818 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b12      	cmp	r3, #18
 8003816:	d130      	bne.n	800387a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800384e:	2201      	movs	r2, #1
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43db      	mvns	r3, r3
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f003 0201 	and.w	r2, r3, #1
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	2203      	movs	r2, #3
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4013      	ands	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_Init+0xea>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b12      	cmp	r3, #18
 80038b8:	d123      	bne.n	8003902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	08da      	lsrs	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3208      	adds	r2, #8
 80038c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	220f      	movs	r2, #15
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	08da      	lsrs	r2, r3, #3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3208      	adds	r2, #8
 80038fc:	6939      	ldr	r1, [r7, #16]
 80038fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	2203      	movs	r2, #3
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4013      	ands	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 0203 	and.w	r2, r3, #3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 809a 	beq.w	8003a78 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003944:	4b55      	ldr	r3, [pc, #340]	; (8003a9c <HAL_GPIO_Init+0x2cc>)
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	4a54      	ldr	r2, [pc, #336]	; (8003a9c <HAL_GPIO_Init+0x2cc>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	6193      	str	r3, [r2, #24]
 8003950:	4b52      	ldr	r3, [pc, #328]	; (8003a9c <HAL_GPIO_Init+0x2cc>)
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800395c:	4a50      	ldr	r2, [pc, #320]	; (8003aa0 <HAL_GPIO_Init+0x2d0>)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	089b      	lsrs	r3, r3, #2
 8003962:	3302      	adds	r3, #2
 8003964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	220f      	movs	r2, #15
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003986:	d013      	beq.n	80039b0 <HAL_GPIO_Init+0x1e0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a46      	ldr	r2, [pc, #280]	; (8003aa4 <HAL_GPIO_Init+0x2d4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00d      	beq.n	80039ac <HAL_GPIO_Init+0x1dc>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a45      	ldr	r2, [pc, #276]	; (8003aa8 <HAL_GPIO_Init+0x2d8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d007      	beq.n	80039a8 <HAL_GPIO_Init+0x1d8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a44      	ldr	r2, [pc, #272]	; (8003aac <HAL_GPIO_Init+0x2dc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d101      	bne.n	80039a4 <HAL_GPIO_Init+0x1d4>
 80039a0:	2303      	movs	r3, #3
 80039a2:	e006      	b.n	80039b2 <HAL_GPIO_Init+0x1e2>
 80039a4:	2305      	movs	r3, #5
 80039a6:	e004      	b.n	80039b2 <HAL_GPIO_Init+0x1e2>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e002      	b.n	80039b2 <HAL_GPIO_Init+0x1e2>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <HAL_GPIO_Init+0x1e2>
 80039b0:	2300      	movs	r3, #0
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	f002 0203 	and.w	r2, r2, #3
 80039b8:	0092      	lsls	r2, r2, #2
 80039ba:	4093      	lsls	r3, r2
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039c2:	4937      	ldr	r1, [pc, #220]	; (8003aa0 <HAL_GPIO_Init+0x2d0>)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	089b      	lsrs	r3, r3, #2
 80039c8:	3302      	adds	r3, #2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039d0:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <HAL_GPIO_Init+0x2e0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	43db      	mvns	r3, r3
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4013      	ands	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039f4:	4a2e      	ldr	r2, [pc, #184]	; (8003ab0 <HAL_GPIO_Init+0x2e0>)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039fa:	4b2d      	ldr	r3, [pc, #180]	; (8003ab0 <HAL_GPIO_Init+0x2e0>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	43db      	mvns	r3, r3
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4013      	ands	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a1e:	4a24      	ldr	r2, [pc, #144]	; (8003ab0 <HAL_GPIO_Init+0x2e0>)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a24:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <HAL_GPIO_Init+0x2e0>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a48:	4a19      	ldr	r2, [pc, #100]	; (8003ab0 <HAL_GPIO_Init+0x2e0>)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a4e:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <HAL_GPIO_Init+0x2e0>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a72:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <HAL_GPIO_Init+0x2e0>)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	fa22 f303 	lsr.w	r3, r2, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f47f aea9 	bne.w	80037e0 <HAL_GPIO_Init+0x10>
  }
}
 8003a8e:	bf00      	nop
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	48000400 	.word	0x48000400
 8003aa8:	48000800 	.word	0x48000800
 8003aac:	48000c00 	.word	0x48000c00
 8003ab0:	40010400 	.word	0x40010400

08003ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	807b      	strh	r3, [r7, #2]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ac4:	787b      	ldrb	r3, [r7, #1]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aca:	887a      	ldrh	r2, [r7, #2]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ad0:	e002      	b.n	8003ad8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ad2:	887a      	ldrh	r2, [r7, #2]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	1d3b      	adds	r3, r7, #4
 8003aee:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003af0:	1d3b      	adds	r3, r7, #4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	f000 bef4 	b.w	80048e6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003afe:	1d3b      	adds	r3, r7, #4
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 816a 	beq.w	8003de2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b0e:	4bb3      	ldr	r3, [pc, #716]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d00c      	beq.n	8003b34 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b1a:	4bb0      	ldr	r3, [pc, #704]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d159      	bne.n	8003bda <HAL_RCC_OscConfig+0xf6>
 8003b26:	4bad      	ldr	r3, [pc, #692]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b32:	d152      	bne.n	8003bda <HAL_RCC_OscConfig+0xf6>
 8003b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b38:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003b40:	fa93 f3a3 	rbit	r3, r3
 8003b44:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b48:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4c:	fab3 f383 	clz	r3, r3
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d102      	bne.n	8003b66 <HAL_RCC_OscConfig+0x82>
 8003b60:	4b9e      	ldr	r3, [pc, #632]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	e015      	b.n	8003b92 <HAL_RCC_OscConfig+0xae>
 8003b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b6a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003b72:	fa93 f3a3 	rbit	r3, r3
 8003b76:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b7e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003b82:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003b86:	fa93 f3a3 	rbit	r3, r3
 8003b8a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003b8e:	4b93      	ldr	r3, [pc, #588]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b96:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003b9a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003b9e:	fa92 f2a2 	rbit	r2, r2
 8003ba2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003ba6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003baa:	fab2 f282 	clz	r2, r2
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	f042 0220 	orr.w	r2, r2, #32
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	f002 021f 	and.w	r2, r2, #31
 8003bba:	2101      	movs	r1, #1
 8003bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 810c 	beq.w	8003de0 <HAL_RCC_OscConfig+0x2fc>
 8003bc8:	1d3b      	adds	r3, r7, #4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f040 8106 	bne.w	8003de0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f000 be86 	b.w	80048e6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bda:	1d3b      	adds	r3, r7, #4
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be4:	d106      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x110>
 8003be6:	4b7d      	ldr	r3, [pc, #500]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a7c      	ldr	r2, [pc, #496]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e030      	b.n	8003c56 <HAL_RCC_OscConfig+0x172>
 8003bf4:	1d3b      	adds	r3, r7, #4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCC_OscConfig+0x134>
 8003bfe:	4b77      	ldr	r3, [pc, #476]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a76      	ldr	r2, [pc, #472]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	4b74      	ldr	r3, [pc, #464]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a73      	ldr	r2, [pc, #460]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	e01e      	b.n	8003c56 <HAL_RCC_OscConfig+0x172>
 8003c18:	1d3b      	adds	r3, r7, #4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c22:	d10c      	bne.n	8003c3e <HAL_RCC_OscConfig+0x15a>
 8003c24:	4b6d      	ldr	r3, [pc, #436]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a6c      	ldr	r2, [pc, #432]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003c2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	4b6a      	ldr	r3, [pc, #424]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a69      	ldr	r2, [pc, #420]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	e00b      	b.n	8003c56 <HAL_RCC_OscConfig+0x172>
 8003c3e:	4b67      	ldr	r3, [pc, #412]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a66      	ldr	r2, [pc, #408]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	4b64      	ldr	r3, [pc, #400]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a63      	ldr	r2, [pc, #396]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c54:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c56:	4b61      	ldr	r3, [pc, #388]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	f023 020f 	bic.w	r2, r3, #15
 8003c5e:	1d3b      	adds	r3, r7, #4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	495d      	ldr	r1, [pc, #372]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c6a:	1d3b      	adds	r3, r7, #4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d059      	beq.n	8003d28 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fd ff7a 	bl	8001b6c <HAL_GetTick>
 8003c78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c7e:	f7fd ff75 	bl	8001b6c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d902      	bls.n	8003c94 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	f000 be29 	b.w	80048e6 <HAL_RCC_OscConfig+0xe02>
 8003c94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c98:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003ca8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cac:	fab3 f383 	clz	r3, r3
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d102      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x1e2>
 8003cc0:	4b46      	ldr	r3, [pc, #280]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	e015      	b.n	8003cf2 <HAL_RCC_OscConfig+0x20e>
 8003cc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cde:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003ce2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003ce6:	fa93 f3a3 	rbit	r3, r3
 8003cea:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003cee:	4b3b      	ldr	r3, [pc, #236]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cf6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003cfa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003cfe:	fa92 f2a2 	rbit	r2, r2
 8003d02:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003d06:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003d0a:	fab2 f282 	clz	r2, r2
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	f042 0220 	orr.w	r2, r2, #32
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	f002 021f 	and.w	r2, r2, #31
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0ab      	beq.n	8003c7e <HAL_RCC_OscConfig+0x19a>
 8003d26:	e05c      	b.n	8003de2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fd ff20 	bl	8001b6c <HAL_GetTick>
 8003d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d30:	e00a      	b.n	8003d48 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d32:	f7fd ff1b 	bl	8001b6c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d902      	bls.n	8003d48 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	f000 bdcf 	b.w	80048e6 <HAL_RCC_OscConfig+0xe02>
 8003d48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d4c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d50:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003d54:	fa93 f3a3 	rbit	r3, r3
 8003d58:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003d5c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d60:	fab3 f383 	clz	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d102      	bne.n	8003d7a <HAL_RCC_OscConfig+0x296>
 8003d74:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	e015      	b.n	8003da6 <HAL_RCC_OscConfig+0x2c2>
 8003d7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d7e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d82:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003d86:	fa93 f3a3 	rbit	r3, r3
 8003d8a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003d8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d92:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003d96:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003da2:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <HAL_RCC_OscConfig+0x2f8>)
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003daa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003dae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003db2:	fa92 f2a2 	rbit	r2, r2
 8003db6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003dba:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003dbe:	fab2 f282 	clz	r2, r2
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	f042 0220 	orr.w	r2, r2, #32
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	f002 021f 	and.w	r2, r2, #31
 8003dce:	2101      	movs	r1, #1
 8003dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1ab      	bne.n	8003d32 <HAL_RCC_OscConfig+0x24e>
 8003dda:	e002      	b.n	8003de2 <HAL_RCC_OscConfig+0x2fe>
 8003ddc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 816f 	beq.w	80040d0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003df2:	4bd0      	ldr	r3, [pc, #832]	; (8004134 <HAL_RCC_OscConfig+0x650>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00b      	beq.n	8003e16 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003dfe:	4bcd      	ldr	r3, [pc, #820]	; (8004134 <HAL_RCC_OscConfig+0x650>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d16c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x400>
 8003e0a:	4bca      	ldr	r3, [pc, #808]	; (8004134 <HAL_RCC_OscConfig+0x650>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d166      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x400>
 8003e16:	2302      	movs	r3, #2
 8003e18:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003e20:	fa93 f3a3 	rbit	r3, r3
 8003e24:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003e28:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2c:	fab3 f383 	clz	r3, r3
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d102      	bne.n	8003e46 <HAL_RCC_OscConfig+0x362>
 8003e40:	4bbc      	ldr	r3, [pc, #752]	; (8004134 <HAL_RCC_OscConfig+0x650>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	e013      	b.n	8003e6e <HAL_RCC_OscConfig+0x38a>
 8003e46:	2302      	movs	r3, #2
 8003e48:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003e50:	fa93 f3a3 	rbit	r3, r3
 8003e54:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003e58:	2302      	movs	r3, #2
 8003e5a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003e5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e62:	fa93 f3a3 	rbit	r3, r3
 8003e66:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003e6a:	4bb2      	ldr	r3, [pc, #712]	; (8004134 <HAL_RCC_OscConfig+0x650>)
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003e74:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003e78:	fa92 f2a2 	rbit	r2, r2
 8003e7c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003e80:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003e84:	fab2 f282 	clz	r2, r2
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	f042 0220 	orr.w	r2, r2, #32
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	f002 021f 	and.w	r2, r2, #31
 8003e94:	2101      	movs	r1, #1
 8003e96:	fa01 f202 	lsl.w	r2, r1, r2
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d007      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x3cc>
 8003ea0:	1d3b      	adds	r3, r7, #4
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d002      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f000 bd1b 	b.w	80048e6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb0:	4ba0      	ldr	r3, [pc, #640]	; (8004134 <HAL_RCC_OscConfig+0x650>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eb8:	1d3b      	adds	r3, r7, #4
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	21f8      	movs	r1, #248	; 0xf8
 8003ec0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003ec8:	fa91 f1a1 	rbit	r1, r1
 8003ecc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003ed0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003ed4:	fab1 f181 	clz	r1, r1
 8003ed8:	b2c9      	uxtb	r1, r1
 8003eda:	408b      	lsls	r3, r1
 8003edc:	4995      	ldr	r1, [pc, #596]	; (8004134 <HAL_RCC_OscConfig+0x650>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee2:	e0f5      	b.n	80040d0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ee4:	1d3b      	adds	r3, r7, #4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8085 	beq.w	8003ffa <HAL_RCC_OscConfig+0x516>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003f02:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f06:	fab3 f383 	clz	r3, r3
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	461a      	mov	r2, r3
 8003f18:	2301      	movs	r3, #1
 8003f1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1c:	f7fd fe26 	bl	8001b6c <HAL_GetTick>
 8003f20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f24:	e00a      	b.n	8003f3c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f26:	f7fd fe21 	bl	8001b6c <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d902      	bls.n	8003f3c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	f000 bcd5 	b.w	80048e6 <HAL_RCC_OscConfig+0xe02>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003f4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f52:	fab3 f383 	clz	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d102      	bne.n	8003f6c <HAL_RCC_OscConfig+0x488>
 8003f66:	4b73      	ldr	r3, [pc, #460]	; (8004134 <HAL_RCC_OscConfig+0x650>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	e013      	b.n	8003f94 <HAL_RCC_OscConfig+0x4b0>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f72:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003f76:	fa93 f3a3 	rbit	r3, r3
 8003f7a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003f7e:	2302      	movs	r3, #2
 8003f80:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003f84:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003f88:	fa93 f3a3 	rbit	r3, r3
 8003f8c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003f90:	4b68      	ldr	r3, [pc, #416]	; (8004134 <HAL_RCC_OscConfig+0x650>)
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	2202      	movs	r2, #2
 8003f96:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003f9a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003f9e:	fa92 f2a2 	rbit	r2, r2
 8003fa2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003fa6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003faa:	fab2 f282 	clz	r2, r2
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	f042 0220 	orr.w	r2, r2, #32
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	f002 021f 	and.w	r2, r2, #31
 8003fba:	2101      	movs	r1, #1
 8003fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0af      	beq.n	8003f26 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc6:	4b5b      	ldr	r3, [pc, #364]	; (8004134 <HAL_RCC_OscConfig+0x650>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fce:	1d3b      	adds	r3, r7, #4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	21f8      	movs	r1, #248	; 0xf8
 8003fd6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003fde:	fa91 f1a1 	rbit	r1, r1
 8003fe2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003fe6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003fea:	fab1 f181 	clz	r1, r1
 8003fee:	b2c9      	uxtb	r1, r1
 8003ff0:	408b      	lsls	r3, r1
 8003ff2:	4950      	ldr	r1, [pc, #320]	; (8004134 <HAL_RCC_OscConfig+0x650>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	600b      	str	r3, [r1, #0]
 8003ff8:	e06a      	b.n	80040d0 <HAL_RCC_OscConfig+0x5ec>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004000:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004004:	fa93 f3a3 	rbit	r3, r3
 8004008:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800400c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004010:	fab3 f383 	clz	r3, r3
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800401a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	461a      	mov	r2, r3
 8004022:	2300      	movs	r3, #0
 8004024:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004026:	f7fd fda1 	bl	8001b6c <HAL_GetTick>
 800402a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402e:	e00a      	b.n	8004046 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004030:	f7fd fd9c 	bl	8001b6c <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d902      	bls.n	8004046 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	f000 bc50 	b.w	80048e6 <HAL_RCC_OscConfig+0xe02>
 8004046:	2302      	movs	r3, #2
 8004048:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004050:	fa93 f3a3 	rbit	r3, r3
 8004054:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405c:	fab3 f383 	clz	r3, r3
 8004060:	b2db      	uxtb	r3, r3
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d102      	bne.n	8004076 <HAL_RCC_OscConfig+0x592>
 8004070:	4b30      	ldr	r3, [pc, #192]	; (8004134 <HAL_RCC_OscConfig+0x650>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	e013      	b.n	800409e <HAL_RCC_OscConfig+0x5ba>
 8004076:	2302      	movs	r3, #2
 8004078:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004088:	2302      	movs	r3, #2
 800408a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800408e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004092:	fa93 f3a3 	rbit	r3, r3
 8004096:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800409a:	4b26      	ldr	r3, [pc, #152]	; (8004134 <HAL_RCC_OscConfig+0x650>)
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	2202      	movs	r2, #2
 80040a0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80040a4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80040a8:	fa92 f2a2 	rbit	r2, r2
 80040ac:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80040b0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80040b4:	fab2 f282 	clz	r2, r2
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	f042 0220 	orr.w	r2, r2, #32
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	f002 021f 	and.w	r2, r2, #31
 80040c4:	2101      	movs	r1, #1
 80040c6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ca:	4013      	ands	r3, r2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1af      	bne.n	8004030 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d0:	1d3b      	adds	r3, r7, #4
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 80da 	beq.w	8004294 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d069      	beq.n	80041be <HAL_RCC_OscConfig+0x6da>
 80040ea:	2301      	movs	r3, #1
 80040ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040f4:	fa93 f3a3 	rbit	r3, r3
 80040f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80040fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004100:	fab3 f383 	clz	r3, r3
 8004104:	b2db      	uxtb	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_RCC_OscConfig+0x654>)
 800410a:	4413      	add	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	461a      	mov	r2, r3
 8004110:	2301      	movs	r3, #1
 8004112:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004114:	f7fd fd2a 	bl	8001b6c <HAL_GetTick>
 8004118:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411c:	e00e      	b.n	800413c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800411e:	f7fd fd25 	bl	8001b6c <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d906      	bls.n	800413c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e3d9      	b.n	80048e6 <HAL_RCC_OscConfig+0xe02>
 8004132:	bf00      	nop
 8004134:	40021000 	.word	0x40021000
 8004138:	10908120 	.word	0x10908120
 800413c:	2302      	movs	r3, #2
 800413e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004142:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004146:	fa93 f3a3 	rbit	r3, r3
 800414a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800414e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004152:	2202      	movs	r2, #2
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	fa93 f2a3 	rbit	r2, r3
 8004160:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800416a:	2202      	movs	r2, #2
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	fa93 f2a3 	rbit	r2, r3
 8004178:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800417c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417e:	4ba5      	ldr	r3, [pc, #660]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 8004180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004182:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004186:	2102      	movs	r1, #2
 8004188:	6019      	str	r1, [r3, #0]
 800418a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	fa93 f1a3 	rbit	r1, r3
 8004194:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004198:	6019      	str	r1, [r3, #0]
  return result;
 800419a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	fab3 f383 	clz	r3, r3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	2101      	movs	r1, #1
 80041b2:	fa01 f303 	lsl.w	r3, r1, r3
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0b0      	beq.n	800411e <HAL_RCC_OscConfig+0x63a>
 80041bc:	e06a      	b.n	8004294 <HAL_RCC_OscConfig+0x7b0>
 80041be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	fa93 f2a3 	rbit	r2, r3
 80041d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80041d4:	601a      	str	r2, [r3, #0]
  return result;
 80041d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80041da:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041dc:	fab3 f383 	clz	r3, r3
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	461a      	mov	r2, r3
 80041e4:	4b8c      	ldr	r3, [pc, #560]	; (8004418 <HAL_RCC_OscConfig+0x934>)
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	461a      	mov	r2, r3
 80041ec:	2300      	movs	r3, #0
 80041ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f0:	f7fd fcbc 	bl	8001b6c <HAL_GetTick>
 80041f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f8:	e009      	b.n	800420e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041fa:	f7fd fcb7 	bl	8001b6c <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e36b      	b.n	80048e6 <HAL_RCC_OscConfig+0xe02>
 800420e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004212:	2202      	movs	r2, #2
 8004214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004216:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	fa93 f2a3 	rbit	r2, r3
 8004220:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800422a:	2202      	movs	r2, #2
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	fa93 f2a3 	rbit	r2, r3
 8004238:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004242:	2202      	movs	r2, #2
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	fa93 f2a3 	rbit	r2, r3
 8004250:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004254:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004256:	4b6f      	ldr	r3, [pc, #444]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 8004258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800425a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800425e:	2102      	movs	r1, #2
 8004260:	6019      	str	r1, [r3, #0]
 8004262:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	fa93 f1a3 	rbit	r1, r3
 800426c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004270:	6019      	str	r1, [r3, #0]
  return result;
 8004272:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	fab3 f383 	clz	r3, r3
 800427c:	b2db      	uxtb	r3, r3
 800427e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2101      	movs	r1, #1
 800428a:	fa01 f303 	lsl.w	r3, r1, r3
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1b2      	bne.n	80041fa <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004294:	1d3b      	adds	r3, r7, #4
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8158 	beq.w	8004554 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042a4:	2300      	movs	r3, #0
 80042a6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042aa:	4b5a      	ldr	r3, [pc, #360]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d112      	bne.n	80042dc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b6:	4b57      	ldr	r3, [pc, #348]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	4a56      	ldr	r2, [pc, #344]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 80042bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c0:	61d3      	str	r3, [r2, #28]
 80042c2:	4b54      	ldr	r3, [pc, #336]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80042ca:	f107 0308 	add.w	r3, r7, #8
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	f107 0308 	add.w	r3, r7, #8
 80042d4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042dc:	4b4f      	ldr	r3, [pc, #316]	; (800441c <HAL_RCC_OscConfig+0x938>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d11a      	bne.n	800431e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e8:	4b4c      	ldr	r3, [pc, #304]	; (800441c <HAL_RCC_OscConfig+0x938>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a4b      	ldr	r2, [pc, #300]	; (800441c <HAL_RCC_OscConfig+0x938>)
 80042ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f4:	f7fd fc3a 	bl	8001b6c <HAL_GetTick>
 80042f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fc:	e009      	b.n	8004312 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fe:	f7fd fc35 	bl	8001b6c <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e2e9      	b.n	80048e6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004312:	4b42      	ldr	r3, [pc, #264]	; (800441c <HAL_RCC_OscConfig+0x938>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0ef      	beq.n	80042fe <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800431e:	1d3b      	adds	r3, r7, #4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d106      	bne.n	8004336 <HAL_RCC_OscConfig+0x852>
 8004328:	4b3a      	ldr	r3, [pc, #232]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	4a39      	ldr	r2, [pc, #228]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 800432e:	f043 0301 	orr.w	r3, r3, #1
 8004332:	6213      	str	r3, [r2, #32]
 8004334:	e02f      	b.n	8004396 <HAL_RCC_OscConfig+0x8b2>
 8004336:	1d3b      	adds	r3, r7, #4
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10c      	bne.n	800435a <HAL_RCC_OscConfig+0x876>
 8004340:	4b34      	ldr	r3, [pc, #208]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	4a33      	ldr	r2, [pc, #204]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 8004346:	f023 0301 	bic.w	r3, r3, #1
 800434a:	6213      	str	r3, [r2, #32]
 800434c:	4b31      	ldr	r3, [pc, #196]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	4a30      	ldr	r2, [pc, #192]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 8004352:	f023 0304 	bic.w	r3, r3, #4
 8004356:	6213      	str	r3, [r2, #32]
 8004358:	e01d      	b.n	8004396 <HAL_RCC_OscConfig+0x8b2>
 800435a:	1d3b      	adds	r3, r7, #4
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	2b05      	cmp	r3, #5
 8004362:	d10c      	bne.n	800437e <HAL_RCC_OscConfig+0x89a>
 8004364:	4b2b      	ldr	r3, [pc, #172]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	4a2a      	ldr	r2, [pc, #168]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 800436a:	f043 0304 	orr.w	r3, r3, #4
 800436e:	6213      	str	r3, [r2, #32]
 8004370:	4b28      	ldr	r3, [pc, #160]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	4a27      	ldr	r2, [pc, #156]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	6213      	str	r3, [r2, #32]
 800437c:	e00b      	b.n	8004396 <HAL_RCC_OscConfig+0x8b2>
 800437e:	4b25      	ldr	r3, [pc, #148]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	4a24      	ldr	r2, [pc, #144]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	6213      	str	r3, [r2, #32]
 800438a:	4b22      	ldr	r3, [pc, #136]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	4a21      	ldr	r2, [pc, #132]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 8004390:	f023 0304 	bic.w	r3, r3, #4
 8004394:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004396:	1d3b      	adds	r3, r7, #4
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d06b      	beq.n	8004478 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a0:	f7fd fbe4 	bl	8001b6c <HAL_GetTick>
 80043a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a8:	e00b      	b.n	80043c2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043aa:	f7fd fbdf 	bl	8001b6c <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e291      	b.n	80048e6 <HAL_RCC_OscConfig+0xe02>
 80043c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80043c6:	2202      	movs	r2, #2
 80043c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	fa93 f2a3 	rbit	r2, r3
 80043d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80043de:	2202      	movs	r2, #2
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	fa93 f2a3 	rbit	r2, r3
 80043ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80043f0:	601a      	str	r2, [r3, #0]
  return result;
 80043f2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80043f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f8:	fab3 f383 	clz	r3, r3
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f043 0302 	orr.w	r3, r3, #2
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d109      	bne.n	8004420 <HAL_RCC_OscConfig+0x93c>
 800440c:	4b01      	ldr	r3, [pc, #4]	; (8004414 <HAL_RCC_OscConfig+0x930>)
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	e014      	b.n	800443c <HAL_RCC_OscConfig+0x958>
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	10908120 	.word	0x10908120
 800441c:	40007000 	.word	0x40007000
 8004420:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004424:	2202      	movs	r2, #2
 8004426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004428:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	fa93 f2a3 	rbit	r2, r3
 8004432:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	4bbb      	ldr	r3, [pc, #748]	; (8004728 <HAL_RCC_OscConfig+0xc44>)
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004440:	2102      	movs	r1, #2
 8004442:	6011      	str	r1, [r2, #0]
 8004444:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	fa92 f1a2 	rbit	r1, r2
 800444e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004452:	6011      	str	r1, [r2, #0]
  return result;
 8004454:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	fab2 f282 	clz	r2, r2
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	f002 021f 	and.w	r2, r2, #31
 800446a:	2101      	movs	r1, #1
 800446c:	fa01 f202 	lsl.w	r2, r1, r2
 8004470:	4013      	ands	r3, r2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d099      	beq.n	80043aa <HAL_RCC_OscConfig+0x8c6>
 8004476:	e063      	b.n	8004540 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004478:	f7fd fb78 	bl	8001b6c <HAL_GetTick>
 800447c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004480:	e00b      	b.n	800449a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004482:	f7fd fb73 	bl	8001b6c <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004492:	4293      	cmp	r3, r2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e225      	b.n	80048e6 <HAL_RCC_OscConfig+0xe02>
 800449a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800449e:	2202      	movs	r2, #2
 80044a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	fa93 f2a3 	rbit	r2, r3
 80044ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80044b6:	2202      	movs	r2, #2
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	fa93 f2a3 	rbit	r2, r3
 80044c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80044c8:	601a      	str	r2, [r3, #0]
  return result;
 80044ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80044ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d0:	fab3 f383 	clz	r3, r3
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	095b      	lsrs	r3, r3, #5
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f043 0302 	orr.w	r3, r3, #2
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d102      	bne.n	80044ea <HAL_RCC_OscConfig+0xa06>
 80044e4:	4b90      	ldr	r3, [pc, #576]	; (8004728 <HAL_RCC_OscConfig+0xc44>)
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	e00d      	b.n	8004506 <HAL_RCC_OscConfig+0xa22>
 80044ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80044ee:	2202      	movs	r2, #2
 80044f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	fa93 f2a3 	rbit	r2, r3
 80044fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	4b89      	ldr	r3, [pc, #548]	; (8004728 <HAL_RCC_OscConfig+0xc44>)
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800450a:	2102      	movs	r1, #2
 800450c:	6011      	str	r1, [r2, #0]
 800450e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	fa92 f1a2 	rbit	r1, r2
 8004518:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800451c:	6011      	str	r1, [r2, #0]
  return result;
 800451e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	fab2 f282 	clz	r2, r2
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	f002 021f 	and.w	r2, r2, #31
 8004534:	2101      	movs	r1, #1
 8004536:	fa01 f202 	lsl.w	r2, r1, r2
 800453a:	4013      	ands	r3, r2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1a0      	bne.n	8004482 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004540:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004544:	2b01      	cmp	r3, #1
 8004546:	d105      	bne.n	8004554 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004548:	4b77      	ldr	r3, [pc, #476]	; (8004728 <HAL_RCC_OscConfig+0xc44>)
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	4a76      	ldr	r2, [pc, #472]	; (8004728 <HAL_RCC_OscConfig+0xc44>)
 800454e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004552:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 81c2 	beq.w	80048e4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004560:	4b71      	ldr	r3, [pc, #452]	; (8004728 <HAL_RCC_OscConfig+0xc44>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 030c 	and.w	r3, r3, #12
 8004568:	2b08      	cmp	r3, #8
 800456a:	f000 819c 	beq.w	80048a6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456e:	1d3b      	adds	r3, r7, #4
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	2b02      	cmp	r3, #2
 8004576:	f040 8114 	bne.w	80047a2 <HAL_RCC_OscConfig+0xcbe>
 800457a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800457e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004582:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004584:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	fa93 f2a3 	rbit	r2, r3
 800458e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004592:	601a      	str	r2, [r3, #0]
  return result;
 8004594:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004598:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459a:	fab3 f383 	clz	r3, r3
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	461a      	mov	r2, r3
 80045ac:	2300      	movs	r3, #0
 80045ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b0:	f7fd fadc 	bl	8001b6c <HAL_GetTick>
 80045b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b8:	e009      	b.n	80045ce <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ba:	f7fd fad7 	bl	8001b6c <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e18b      	b.n	80048e6 <HAL_RCC_OscConfig+0xe02>
 80045ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80045d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	fa93 f2a3 	rbit	r2, r3
 80045e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80045e6:	601a      	str	r2, [r3, #0]
  return result;
 80045e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80045ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ee:	fab3 f383 	clz	r3, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d102      	bne.n	8004608 <HAL_RCC_OscConfig+0xb24>
 8004602:	4b49      	ldr	r3, [pc, #292]	; (8004728 <HAL_RCC_OscConfig+0xc44>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	e01b      	b.n	8004640 <HAL_RCC_OscConfig+0xb5c>
 8004608:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800460c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004612:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	fa93 f2a3 	rbit	r2, r3
 800461c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004626:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	fa93 f2a3 	rbit	r2, r3
 8004636:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	4b3a      	ldr	r3, [pc, #232]	; (8004728 <HAL_RCC_OscConfig+0xc44>)
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004644:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004648:	6011      	str	r1, [r2, #0]
 800464a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	fa92 f1a2 	rbit	r1, r2
 8004654:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004658:	6011      	str	r1, [r2, #0]
  return result;
 800465a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800465e:	6812      	ldr	r2, [r2, #0]
 8004660:	fab2 f282 	clz	r2, r2
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	f042 0220 	orr.w	r2, r2, #32
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	f002 021f 	and.w	r2, r2, #31
 8004670:	2101      	movs	r1, #1
 8004672:	fa01 f202 	lsl.w	r2, r1, r2
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d19e      	bne.n	80045ba <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800467c:	4b2a      	ldr	r3, [pc, #168]	; (8004728 <HAL_RCC_OscConfig+0xc44>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004684:	1d3b      	adds	r3, r7, #4
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800468a:	1d3b      	adds	r3, r7, #4
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	430b      	orrs	r3, r1
 8004692:	4925      	ldr	r1, [pc, #148]	; (8004728 <HAL_RCC_OscConfig+0xc44>)
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]
 8004698:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800469c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	fa93 f2a3 	rbit	r2, r3
 80046ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046b0:	601a      	str	r2, [r3, #0]
  return result;
 80046b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046b6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b8:	fab3 f383 	clz	r3, r3
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	461a      	mov	r2, r3
 80046ca:	2301      	movs	r3, #1
 80046cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ce:	f7fd fa4d 	bl	8001b6c <HAL_GetTick>
 80046d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046d6:	e009      	b.n	80046ec <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d8:	f7fd fa48 	bl	8001b6c <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e0fc      	b.n	80048e6 <HAL_RCC_OscConfig+0xe02>
 80046ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80046f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	fa93 f2a3 	rbit	r2, r3
 8004700:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004704:	601a      	str	r2, [r3, #0]
  return result;
 8004706:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800470a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800470c:	fab3 f383 	clz	r3, r3
 8004710:	b2db      	uxtb	r3, r3
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	b2db      	uxtb	r3, r3
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b01      	cmp	r3, #1
 800471e:	d105      	bne.n	800472c <HAL_RCC_OscConfig+0xc48>
 8004720:	4b01      	ldr	r3, [pc, #4]	; (8004728 <HAL_RCC_OscConfig+0xc44>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	e01e      	b.n	8004764 <HAL_RCC_OscConfig+0xc80>
 8004726:	bf00      	nop
 8004728:	40021000 	.word	0x40021000
 800472c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004730:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004736:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	fa93 f2a3 	rbit	r2, r3
 8004740:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800474a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	fa93 f2a3 	rbit	r2, r3
 800475a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	4b63      	ldr	r3, [pc, #396]	; (80048f0 <HAL_RCC_OscConfig+0xe0c>)
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004768:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800476c:	6011      	str	r1, [r2, #0]
 800476e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	fa92 f1a2 	rbit	r1, r2
 8004778:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800477c:	6011      	str	r1, [r2, #0]
  return result;
 800477e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	fab2 f282 	clz	r2, r2
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	f042 0220 	orr.w	r2, r2, #32
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	f002 021f 	and.w	r2, r2, #31
 8004794:	2101      	movs	r1, #1
 8004796:	fa01 f202 	lsl.w	r2, r1, r2
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d09b      	beq.n	80046d8 <HAL_RCC_OscConfig+0xbf4>
 80047a0:	e0a0      	b.n	80048e4 <HAL_RCC_OscConfig+0xe00>
 80047a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	fa93 f2a3 	rbit	r2, r3
 80047b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047ba:	601a      	str	r2, [r3, #0]
  return result;
 80047bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047c0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c2:	fab3 f383 	clz	r3, r3
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	461a      	mov	r2, r3
 80047d4:	2300      	movs	r3, #0
 80047d6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d8:	f7fd f9c8 	bl	8001b6c <HAL_GetTick>
 80047dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047e0:	e009      	b.n	80047f6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e2:	f7fd f9c3 	bl	8001b6c <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e077      	b.n	80048e6 <HAL_RCC_OscConfig+0xe02>
 80047f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004800:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	fa93 f2a3 	rbit	r2, r3
 800480a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800480e:	601a      	str	r2, [r3, #0]
  return result;
 8004810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004814:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004816:	fab3 f383 	clz	r3, r3
 800481a:	b2db      	uxtb	r3, r3
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	d102      	bne.n	8004830 <HAL_RCC_OscConfig+0xd4c>
 800482a:	4b31      	ldr	r3, [pc, #196]	; (80048f0 <HAL_RCC_OscConfig+0xe0c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	e01b      	b.n	8004868 <HAL_RCC_OscConfig+0xd84>
 8004830:	f107 0320 	add.w	r3, r7, #32
 8004834:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	f107 0320 	add.w	r3, r7, #32
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	fa93 f2a3 	rbit	r2, r3
 8004844:	f107 031c 	add.w	r3, r7, #28
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	f107 0318 	add.w	r3, r7, #24
 800484e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	f107 0318 	add.w	r3, r7, #24
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	fa93 f2a3 	rbit	r2, r3
 800485e:	f107 0314 	add.w	r3, r7, #20
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	4b22      	ldr	r3, [pc, #136]	; (80048f0 <HAL_RCC_OscConfig+0xe0c>)
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	f107 0210 	add.w	r2, r7, #16
 800486c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004870:	6011      	str	r1, [r2, #0]
 8004872:	f107 0210 	add.w	r2, r7, #16
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	fa92 f1a2 	rbit	r1, r2
 800487c:	f107 020c 	add.w	r2, r7, #12
 8004880:	6011      	str	r1, [r2, #0]
  return result;
 8004882:	f107 020c 	add.w	r2, r7, #12
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	fab2 f282 	clz	r2, r2
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	f042 0220 	orr.w	r2, r2, #32
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	f002 021f 	and.w	r2, r2, #31
 8004898:	2101      	movs	r1, #1
 800489a:	fa01 f202 	lsl.w	r2, r1, r2
 800489e:	4013      	ands	r3, r2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d19e      	bne.n	80047e2 <HAL_RCC_OscConfig+0xcfe>
 80048a4:	e01e      	b.n	80048e4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048a6:	1d3b      	adds	r3, r7, #4
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e018      	b.n	80048e6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048b4:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <HAL_RCC_OscConfig+0xe0c>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048bc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80048c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048c4:	1d3b      	adds	r3, r7, #4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d108      	bne.n	80048e0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80048ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80048d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048d6:	1d3b      	adds	r3, r7, #4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048dc:	429a      	cmp	r2, r3
 80048de:	d001      	beq.n	80048e4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40021000 	.word	0x40021000

080048f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b09e      	sub	sp, #120	; 0x78
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e162      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800490c:	4b90      	ldr	r3, [pc, #576]	; (8004b50 <HAL_RCC_ClockConfig+0x25c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d910      	bls.n	800493c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491a:	4b8d      	ldr	r3, [pc, #564]	; (8004b50 <HAL_RCC_ClockConfig+0x25c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 0207 	bic.w	r2, r3, #7
 8004922:	498b      	ldr	r1, [pc, #556]	; (8004b50 <HAL_RCC_ClockConfig+0x25c>)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	4313      	orrs	r3, r2
 8004928:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800492a:	4b89      	ldr	r3, [pc, #548]	; (8004b50 <HAL_RCC_ClockConfig+0x25c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e14a      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004948:	4b82      	ldr	r3, [pc, #520]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	497f      	ldr	r1, [pc, #508]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004956:	4313      	orrs	r3, r2
 8004958:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 80dc 	beq.w	8004b20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d13c      	bne.n	80049ea <HAL_RCC_ClockConfig+0xf6>
 8004970:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004974:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004978:	fa93 f3a3 	rbit	r3, r3
 800497c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800497e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004980:	fab3 f383 	clz	r3, r3
 8004984:	b2db      	uxtb	r3, r3
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	b2db      	uxtb	r3, r3
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	d102      	bne.n	800499a <HAL_RCC_ClockConfig+0xa6>
 8004994:	4b6f      	ldr	r3, [pc, #444]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	e00f      	b.n	80049ba <HAL_RCC_ClockConfig+0xc6>
 800499a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800499e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049a2:	fa93 f3a3 	rbit	r3, r3
 80049a6:	667b      	str	r3, [r7, #100]	; 0x64
 80049a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ac:	663b      	str	r3, [r7, #96]	; 0x60
 80049ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049b0:	fa93 f3a3 	rbit	r3, r3
 80049b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049b6:	4b67      	ldr	r3, [pc, #412]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049be:	65ba      	str	r2, [r7, #88]	; 0x58
 80049c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049c2:	fa92 f2a2 	rbit	r2, r2
 80049c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80049c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049ca:	fab2 f282 	clz	r2, r2
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	f042 0220 	orr.w	r2, r2, #32
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	f002 021f 	and.w	r2, r2, #31
 80049da:	2101      	movs	r1, #1
 80049dc:	fa01 f202 	lsl.w	r2, r1, r2
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d17b      	bne.n	8004ade <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e0f3      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d13c      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x178>
 80049f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049fa:	fa93 f3a3 	rbit	r3, r3
 80049fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d102      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x128>
 8004a16:	4b4f      	ldr	r3, [pc, #316]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	e00f      	b.n	8004a3c <HAL_RCC_ClockConfig+0x148>
 8004a1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a24:	fa93 f3a3 	rbit	r3, r3
 8004a28:	647b      	str	r3, [r7, #68]	; 0x44
 8004a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a2e:	643b      	str	r3, [r7, #64]	; 0x40
 8004a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a32:	fa93 f3a3 	rbit	r3, r3
 8004a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a38:	4b46      	ldr	r3, [pc, #280]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a40:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a44:	fa92 f2a2 	rbit	r2, r2
 8004a48:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a4c:	fab2 f282 	clz	r2, r2
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	f042 0220 	orr.w	r2, r2, #32
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	f002 021f 	and.w	r2, r2, #31
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d13a      	bne.n	8004ade <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0b2      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x2de>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	fa93 f3a3 	rbit	r3, r3
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7a:	fab3 f383 	clz	r3, r3
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	095b      	lsrs	r3, r3, #5
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d102      	bne.n	8004a94 <HAL_RCC_ClockConfig+0x1a0>
 8004a8e:	4b31      	ldr	r3, [pc, #196]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	e00d      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x1bc>
 8004a94:	2302      	movs	r3, #2
 8004a96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	fa93 f3a3 	rbit	r3, r3
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	623b      	str	r3, [r7, #32]
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	fa93 f3a3 	rbit	r3, r3
 8004aaa:	61fb      	str	r3, [r7, #28]
 8004aac:	4b29      	ldr	r3, [pc, #164]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	61ba      	str	r2, [r7, #24]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	fa92 f2a2 	rbit	r2, r2
 8004aba:	617a      	str	r2, [r7, #20]
  return result;
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	fab2 f282 	clz	r2, r2
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	f042 0220 	orr.w	r2, r2, #32
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	f002 021f 	and.w	r2, r2, #31
 8004ace:	2101      	movs	r1, #1
 8004ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e079      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ade:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f023 0203 	bic.w	r2, r3, #3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	491a      	ldr	r1, [pc, #104]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af0:	f7fd f83c 	bl	8001b6c <HAL_GetTick>
 8004af4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af6:	e00a      	b.n	8004b0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af8:	f7fd f838 	bl	8001b6c <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e061      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f003 020c 	and.w	r2, r3, #12
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d1eb      	bne.n	8004af8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCC_ClockConfig+0x25c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d214      	bcs.n	8004b58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <HAL_RCC_ClockConfig+0x25c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 0207 	bic.w	r2, r3, #7
 8004b36:	4906      	ldr	r1, [pc, #24]	; (8004b50 <HAL_RCC_ClockConfig+0x25c>)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b04      	ldr	r3, [pc, #16]	; (8004b50 <HAL_RCC_ClockConfig+0x25c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e040      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x2de>
 8004b50:	40022000 	.word	0x40022000
 8004b54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b64:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <HAL_RCC_ClockConfig+0x2e8>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	491a      	ldr	r1, [pc, #104]	; (8004bdc <HAL_RCC_ClockConfig+0x2e8>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b82:	4b16      	ldr	r3, [pc, #88]	; (8004bdc <HAL_RCC_ClockConfig+0x2e8>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	4912      	ldr	r1, [pc, #72]	; (8004bdc <HAL_RCC_ClockConfig+0x2e8>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b96:	f000 f829 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8004b9a:	4601      	mov	r1, r0
 8004b9c:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <HAL_RCC_ClockConfig+0x2e8>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba4:	22f0      	movs	r2, #240	; 0xf0
 8004ba6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	fa92 f2a2 	rbit	r2, r2
 8004bae:	60fa      	str	r2, [r7, #12]
  return result;
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	fab2 f282 	clz	r2, r2
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	40d3      	lsrs	r3, r2
 8004bba:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <HAL_RCC_ClockConfig+0x2ec>)
 8004bbc:	5cd3      	ldrb	r3, [r2, r3]
 8004bbe:	fa21 f303 	lsr.w	r3, r1, r3
 8004bc2:	4a08      	ldr	r2, [pc, #32]	; (8004be4 <HAL_RCC_ClockConfig+0x2f0>)
 8004bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004bc6:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <HAL_RCC_ClockConfig+0x2f4>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fc ff8a 	bl	8001ae4 <HAL_InitTick>
  
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3778      	adds	r7, #120	; 0x78
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	08007e00 	.word	0x08007e00
 8004be4:	20000000 	.word	0x20000000
 8004be8:	20000004 	.word	0x20000004

08004bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b08b      	sub	sp, #44	; 0x2c
 8004bf0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004c06:	4b29      	ldr	r3, [pc, #164]	; (8004cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d002      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0x30>
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d003      	beq.n	8004c22 <HAL_RCC_GetSysClockFreq+0x36>
 8004c1a:	e03c      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c1c:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c1e:	623b      	str	r3, [r7, #32]
      break;
 8004c20:	e03c      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004c28:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004c2c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	fa92 f2a2 	rbit	r2, r2
 8004c34:	607a      	str	r2, [r7, #4]
  return result;
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	fab2 f282 	clz	r2, r2
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	40d3      	lsrs	r3, r2
 8004c40:	4a1c      	ldr	r2, [pc, #112]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c42:	5cd3      	ldrb	r3, [r2, r3]
 8004c44:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004c46:	4b19      	ldr	r3, [pc, #100]	; (8004cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	220f      	movs	r2, #15
 8004c50:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	fa92 f2a2 	rbit	r2, r2
 8004c58:	60fa      	str	r2, [r7, #12]
  return result;
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	fab2 f282 	clz	r2, r2
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	40d3      	lsrs	r3, r2
 8004c64:	4a14      	ldr	r2, [pc, #80]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c66:	5cd3      	ldrb	r3, [r2, r3]
 8004c68:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d008      	beq.n	8004c86 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c74:	4a0e      	ldr	r2, [pc, #56]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	fb02 f303 	mul.w	r3, r2, r3
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
 8004c84:	e004      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	4a0c      	ldr	r2, [pc, #48]	; (8004cbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	623b      	str	r3, [r7, #32]
      break;
 8004c94:	e002      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c98:	623b      	str	r3, [r7, #32]
      break;
 8004c9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	372c      	adds	r7, #44	; 0x2c
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	007a1200 	.word	0x007a1200
 8004cb4:	08007e10 	.word	0x08007e10
 8004cb8:	08007e20 	.word	0x08007e20
 8004cbc:	003d0900 	.word	0x003d0900

08004cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b092      	sub	sp, #72	; 0x48
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 80cd 	beq.w	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ce4:	4b86      	ldr	r3, [pc, #536]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10e      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cf0:	4b83      	ldr	r3, [pc, #524]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	4a82      	ldr	r2, [pc, #520]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cfa:	61d3      	str	r3, [r2, #28]
 8004cfc:	4b80      	ldr	r3, [pc, #512]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d04:	60bb      	str	r3, [r7, #8]
 8004d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0e:	4b7d      	ldr	r3, [pc, #500]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d118      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d1a:	4b7a      	ldr	r3, [pc, #488]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a79      	ldr	r2, [pc, #484]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d26:	f7fc ff21 	bl	8001b6c <HAL_GetTick>
 8004d2a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2c:	e008      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d2e:	f7fc ff1d 	bl	8001b6c <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b64      	cmp	r3, #100	; 0x64
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e0db      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d40:	4b70      	ldr	r3, [pc, #448]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0f0      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d4c:	4b6c      	ldr	r3, [pc, #432]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d54:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d07d      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d076      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d6a:	4b65      	ldr	r3, [pc, #404]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d78:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	fa93 f3a3 	rbit	r3, r3
 8004d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d84:	fab3 f383 	clz	r3, r3
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4b5e      	ldr	r3, [pc, #376]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d8e:	4413      	add	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	461a      	mov	r2, r3
 8004d94:	2301      	movs	r3, #1
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da0:	fa93 f3a3 	rbit	r3, r3
 8004da4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004da8:	fab3 f383 	clz	r3, r3
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	461a      	mov	r2, r3
 8004db0:	4b55      	ldr	r3, [pc, #340]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	461a      	mov	r2, r3
 8004db8:	2300      	movs	r3, #0
 8004dba:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004dbc:	4a50      	ldr	r2, [pc, #320]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d045      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dcc:	f7fc fece 	bl	8001b6c <HAL_GetTick>
 8004dd0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd2:	e00a      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd4:	f7fc feca 	bl	8001b6c <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d901      	bls.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e086      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004dea:	2302      	movs	r3, #2
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df0:	fa93 f3a3 	rbit	r3, r3
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
 8004df6:	2302      	movs	r3, #2
 8004df8:	623b      	str	r3, [r7, #32]
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	fa93 f3a3 	rbit	r3, r3
 8004e00:	61fb      	str	r3, [r7, #28]
  return result;
 8004e02:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e04:	fab3 f383 	clz	r3, r3
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	f043 0302 	orr.w	r3, r3, #2
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d102      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004e18:	4b39      	ldr	r3, [pc, #228]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	e007      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	fa93 f3a3 	rbit	r3, r3
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	4b35      	ldr	r3, [pc, #212]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	2202      	movs	r2, #2
 8004e30:	613a      	str	r2, [r7, #16]
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	fa92 f2a2 	rbit	r2, r2
 8004e38:	60fa      	str	r2, [r7, #12]
  return result;
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	fab2 f282 	clz	r2, r2
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	f002 021f 	and.w	r2, r2, #31
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0bd      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004e58:	4b29      	ldr	r3, [pc, #164]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	4926      	ldr	r1, [pc, #152]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d105      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e72:	4b23      	ldr	r3, [pc, #140]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	4a22      	ldr	r2, [pc, #136]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d008      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e8a:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	f023 0203 	bic.w	r2, r3, #3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	491a      	ldr	r1, [pc, #104]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ea8:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	f023 0210 	bic.w	r2, r3, #16
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	4912      	ldr	r1, [pc, #72]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d008      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ec6:	4b0e      	ldr	r3, [pc, #56]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	490b      	ldr	r1, [pc, #44]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ee4:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	4903      	ldr	r1, [pc, #12]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3748      	adds	r7, #72	; 0x48
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40021000 	.word	0x40021000
 8004f04:	40007000 	.word	0x40007000
 8004f08:	10908100 	.word	0x10908100

08004f0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e095      	b.n	800504a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d108      	bne.n	8004f38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f2e:	d009      	beq.n	8004f44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	61da      	str	r2, [r3, #28]
 8004f36:	e005      	b.n	8004f44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fc fadc 	bl	800151c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f84:	d902      	bls.n	8004f8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	e002      	b.n	8004f92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f9a:	d007      	beq.n	8004fac <HAL_SPI_Init+0xa0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fa4:	d002      	beq.n	8004fac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fee:	ea42 0103 	orr.w	r1, r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	0c1b      	lsrs	r3, r3, #16
 8005008:	f003 0204 	and.w	r2, r3, #4
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005028:	ea42 0103 	orr.w	r1, r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	099b      	lsrs	r3, r3, #6
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10f      	bne.n	8005098 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	099b      	lsrs	r3, r3, #6
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d004      	beq.n	8005098 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	4798      	blx	r3
    return;
 8005096:	e0d8      	b.n	800524a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	085b      	lsrs	r3, r3, #1
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <HAL_SPI_IRQHandler+0x66>
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	09db      	lsrs	r3, r3, #7
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d004      	beq.n	80050ba <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	4798      	blx	r3
    return;
 80050b8:	e0c7      	b.n	800524a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	095b      	lsrs	r3, r3, #5
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10c      	bne.n	80050e0 <HAL_SPI_IRQHandler+0x8c>
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	099b      	lsrs	r3, r3, #6
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	0a1b      	lsrs	r3, r3, #8
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 80b5 	beq.w	800524a <HAL_SPI_IRQHandler+0x1f6>
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	095b      	lsrs	r3, r3, #5
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80ae 	beq.w	800524a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	099b      	lsrs	r3, r3, #6
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d023      	beq.n	8005142 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b03      	cmp	r3, #3
 8005104:	d011      	beq.n	800512a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800510a:	f043 0204 	orr.w	r2, r3, #4
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	e00b      	b.n	8005142 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800512a:	2300      	movs	r3, #0
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	693b      	ldr	r3, [r7, #16]
        return;
 8005140:	e083      	b.n	800524a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d014      	beq.n	8005178 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005152:	f043 0201 	orr.w	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	0a1b      	lsrs	r3, r3, #8
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00c      	beq.n	800519e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005188:	f043 0208 	orr.w	r2, r3, #8
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005190:	2300      	movs	r3, #0
 8005192:	60bb      	str	r3, [r7, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	60bb      	str	r3, [r7, #8]
 800519c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d050      	beq.n	8005248 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051b4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d104      	bne.n	80051d2 <HAL_SPI_IRQHandler+0x17e>
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d034      	beq.n	800523c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0203 	bic.w	r2, r2, #3
 80051e0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d011      	beq.n	800520e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ee:	4a18      	ldr	r2, [pc, #96]	; (8005250 <HAL_SPI_IRQHandler+0x1fc>)
 80051f0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fe f9bb 	bl	8003572 <HAL_DMA_Abort_IT>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005206:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005212:	2b00      	cmp	r3, #0
 8005214:	d016      	beq.n	8005244 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521a:	4a0d      	ldr	r2, [pc, #52]	; (8005250 <HAL_SPI_IRQHandler+0x1fc>)
 800521c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005222:	4618      	mov	r0, r3
 8005224:	f7fe f9a5 	bl	8003572 <HAL_DMA_Abort_IT>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005232:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800523a:	e003      	b.n	8005244 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f809 	bl	8005254 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005242:	e000      	b.n	8005246 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005244:	bf00      	nop
    return;
 8005246:	bf00      	nop
 8005248:	bf00      	nop
  }
}
 800524a:	3720      	adds	r7, #32
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	08005269 	.word	0x08005269

08005254 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f7ff ffe5 	bl	8005254 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800528a:	bf00      	nop
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e049      	b.n	8005338 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d106      	bne.n	80052be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7fc fb4f 	bl	800195c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2202      	movs	r2, #2
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3304      	adds	r3, #4
 80052ce:	4619      	mov	r1, r3
 80052d0:	4610      	mov	r0, r2
 80052d2:	f000 fbdb 	bl	8005a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e049      	b.n	80053e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fc fad2 	bl	8001910 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3304      	adds	r3, #4
 800537c:	4619      	mov	r1, r3
 800537e:	4610      	mov	r0, r2
 8005380:	f000 fb84 	bl	8005a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d109      	bne.n	8005414 <HAL_TIM_PWM_Start+0x24>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	bf14      	ite	ne
 800540c:	2301      	movne	r3, #1
 800540e:	2300      	moveq	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	e03c      	b.n	800548e <HAL_TIM_PWM_Start+0x9e>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b04      	cmp	r3, #4
 8005418:	d109      	bne.n	800542e <HAL_TIM_PWM_Start+0x3e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b01      	cmp	r3, #1
 8005424:	bf14      	ite	ne
 8005426:	2301      	movne	r3, #1
 8005428:	2300      	moveq	r3, #0
 800542a:	b2db      	uxtb	r3, r3
 800542c:	e02f      	b.n	800548e <HAL_TIM_PWM_Start+0x9e>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d109      	bne.n	8005448 <HAL_TIM_PWM_Start+0x58>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b01      	cmp	r3, #1
 800543e:	bf14      	ite	ne
 8005440:	2301      	movne	r3, #1
 8005442:	2300      	moveq	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	e022      	b.n	800548e <HAL_TIM_PWM_Start+0x9e>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b0c      	cmp	r3, #12
 800544c:	d109      	bne.n	8005462 <HAL_TIM_PWM_Start+0x72>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b01      	cmp	r3, #1
 8005458:	bf14      	ite	ne
 800545a:	2301      	movne	r3, #1
 800545c:	2300      	moveq	r3, #0
 800545e:	b2db      	uxtb	r3, r3
 8005460:	e015      	b.n	800548e <HAL_TIM_PWM_Start+0x9e>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b10      	cmp	r3, #16
 8005466:	d109      	bne.n	800547c <HAL_TIM_PWM_Start+0x8c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b01      	cmp	r3, #1
 8005472:	bf14      	ite	ne
 8005474:	2301      	movne	r3, #1
 8005476:	2300      	moveq	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	e008      	b.n	800548e <HAL_TIM_PWM_Start+0x9e>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b01      	cmp	r3, #1
 8005486:	bf14      	ite	ne
 8005488:	2301      	movne	r3, #1
 800548a:	2300      	moveq	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e088      	b.n	80055a8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d104      	bne.n	80054a6 <HAL_TIM_PWM_Start+0xb6>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054a4:	e023      	b.n	80054ee <HAL_TIM_PWM_Start+0xfe>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d104      	bne.n	80054b6 <HAL_TIM_PWM_Start+0xc6>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054b4:	e01b      	b.n	80054ee <HAL_TIM_PWM_Start+0xfe>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d104      	bne.n	80054c6 <HAL_TIM_PWM_Start+0xd6>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054c4:	e013      	b.n	80054ee <HAL_TIM_PWM_Start+0xfe>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b0c      	cmp	r3, #12
 80054ca:	d104      	bne.n	80054d6 <HAL_TIM_PWM_Start+0xe6>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054d4:	e00b      	b.n	80054ee <HAL_TIM_PWM_Start+0xfe>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b10      	cmp	r3, #16
 80054da:	d104      	bne.n	80054e6 <HAL_TIM_PWM_Start+0xf6>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054e4:	e003      	b.n	80054ee <HAL_TIM_PWM_Start+0xfe>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2202      	movs	r2, #2
 80054ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2201      	movs	r2, #1
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fde6 	bl	80060c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a2b      	ldr	r2, [pc, #172]	; (80055b0 <HAL_TIM_PWM_Start+0x1c0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00e      	beq.n	8005524 <HAL_TIM_PWM_Start+0x134>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a2a      	ldr	r2, [pc, #168]	; (80055b4 <HAL_TIM_PWM_Start+0x1c4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d009      	beq.n	8005524 <HAL_TIM_PWM_Start+0x134>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a28      	ldr	r2, [pc, #160]	; (80055b8 <HAL_TIM_PWM_Start+0x1c8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_TIM_PWM_Start+0x134>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a27      	ldr	r2, [pc, #156]	; (80055bc <HAL_TIM_PWM_Start+0x1cc>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d101      	bne.n	8005528 <HAL_TIM_PWM_Start+0x138>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <HAL_TIM_PWM_Start+0x13a>
 8005528:	2300      	movs	r3, #0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800553c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1b      	ldr	r2, [pc, #108]	; (80055b0 <HAL_TIM_PWM_Start+0x1c0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00e      	beq.n	8005566 <HAL_TIM_PWM_Start+0x176>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005550:	d009      	beq.n	8005566 <HAL_TIM_PWM_Start+0x176>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a1a      	ldr	r2, [pc, #104]	; (80055c0 <HAL_TIM_PWM_Start+0x1d0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d004      	beq.n	8005566 <HAL_TIM_PWM_Start+0x176>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a14      	ldr	r2, [pc, #80]	; (80055b4 <HAL_TIM_PWM_Start+0x1c4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d115      	bne.n	8005592 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	4b15      	ldr	r3, [pc, #84]	; (80055c4 <HAL_TIM_PWM_Start+0x1d4>)
 800556e:	4013      	ands	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b06      	cmp	r3, #6
 8005576:	d015      	beq.n	80055a4 <HAL_TIM_PWM_Start+0x1b4>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800557e:	d011      	beq.n	80055a4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0201 	orr.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005590:	e008      	b.n	80055a4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0201 	orr.w	r2, r2, #1
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	e000      	b.n	80055a6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40012c00 	.word	0x40012c00
 80055b4:	40014000 	.word	0x40014000
 80055b8:	40014400 	.word	0x40014400
 80055bc:	40014800 	.word	0x40014800
 80055c0:	40000400 	.word	0x40000400
 80055c4:	00010007 	.word	0x00010007

080055c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d122      	bne.n	8005624 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d11b      	bne.n	8005624 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0202 	mvn.w	r2, #2
 80055f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fa20 	bl	8005a50 <HAL_TIM_IC_CaptureCallback>
 8005610:	e005      	b.n	800561e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fa12 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fa23 	bl	8005a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b04      	cmp	r3, #4
 8005630:	d122      	bne.n	8005678 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b04      	cmp	r3, #4
 800563e:	d11b      	bne.n	8005678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0204 	mvn.w	r2, #4
 8005648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2202      	movs	r2, #2
 800564e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f9f6 	bl	8005a50 <HAL_TIM_IC_CaptureCallback>
 8005664:	e005      	b.n	8005672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f9e8 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f9f9 	bl	8005a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b08      	cmp	r3, #8
 8005684:	d122      	bne.n	80056cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b08      	cmp	r3, #8
 8005692:	d11b      	bne.n	80056cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0208 	mvn.w	r2, #8
 800569c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2204      	movs	r2, #4
 80056a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f9cc 	bl	8005a50 <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f9be 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f9cf 	bl	8005a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	2b10      	cmp	r3, #16
 80056d8:	d122      	bne.n	8005720 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0310 	and.w	r3, r3, #16
 80056e4:	2b10      	cmp	r3, #16
 80056e6:	d11b      	bne.n	8005720 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0210 	mvn.w	r2, #16
 80056f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2208      	movs	r2, #8
 80056f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f9a2 	bl	8005a50 <HAL_TIM_IC_CaptureCallback>
 800570c:	e005      	b.n	800571a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f994 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f9a5 	bl	8005a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b01      	cmp	r3, #1
 800572c:	d10e      	bne.n	800574c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b01      	cmp	r3, #1
 800573a:	d107      	bne.n	800574c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0201 	mvn.w	r2, #1
 8005744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f96e 	bl	8005a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005756:	2b80      	cmp	r3, #128	; 0x80
 8005758:	d10e      	bne.n	8005778 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005764:	2b80      	cmp	r3, #128	; 0x80
 8005766:	d107      	bne.n	8005778 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fdbe 	bl	80062f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005786:	d10e      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005792:	2b80      	cmp	r3, #128	; 0x80
 8005794:	d107      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800579e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fdb1 	bl	8006308 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d10e      	bne.n	80057d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057be:	2b40      	cmp	r3, #64	; 0x40
 80057c0:	d107      	bne.n	80057d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f953 	bl	8005a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f003 0320 	and.w	r3, r3, #32
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d10e      	bne.n	80057fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	d107      	bne.n	80057fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f06f 0220 	mvn.w	r2, #32
 80057f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fd71 	bl	80062e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057fe:	bf00      	nop
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
	...

08005808 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800581a:	2b01      	cmp	r3, #1
 800581c:	d101      	bne.n	8005822 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800581e:	2302      	movs	r3, #2
 8005820:	e0fd      	b.n	8005a1e <HAL_TIM_PWM_ConfigChannel+0x216>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b14      	cmp	r3, #20
 800582e:	f200 80f0 	bhi.w	8005a12 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005832:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005838:	0800588d 	.word	0x0800588d
 800583c:	08005a13 	.word	0x08005a13
 8005840:	08005a13 	.word	0x08005a13
 8005844:	08005a13 	.word	0x08005a13
 8005848:	080058cd 	.word	0x080058cd
 800584c:	08005a13 	.word	0x08005a13
 8005850:	08005a13 	.word	0x08005a13
 8005854:	08005a13 	.word	0x08005a13
 8005858:	0800590f 	.word	0x0800590f
 800585c:	08005a13 	.word	0x08005a13
 8005860:	08005a13 	.word	0x08005a13
 8005864:	08005a13 	.word	0x08005a13
 8005868:	0800594f 	.word	0x0800594f
 800586c:	08005a13 	.word	0x08005a13
 8005870:	08005a13 	.word	0x08005a13
 8005874:	08005a13 	.word	0x08005a13
 8005878:	08005991 	.word	0x08005991
 800587c:	08005a13 	.word	0x08005a13
 8005880:	08005a13 	.word	0x08005a13
 8005884:	08005a13 	.word	0x08005a13
 8005888:	080059d1 	.word	0x080059d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	4618      	mov	r0, r3
 8005894:	f000 f972 	bl	8005b7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699a      	ldr	r2, [r3, #24]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0208 	orr.w	r2, r2, #8
 80058a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0204 	bic.w	r2, r2, #4
 80058b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6999      	ldr	r1, [r3, #24]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	691a      	ldr	r2, [r3, #16]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	619a      	str	r2, [r3, #24]
      break;
 80058ca:	e0a3      	b.n	8005a14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68b9      	ldr	r1, [r7, #8]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 f9d8 	bl	8005c88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6999      	ldr	r1, [r3, #24]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	021a      	lsls	r2, r3, #8
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	619a      	str	r2, [r3, #24]
      break;
 800590c:	e082      	b.n	8005a14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fa37 	bl	8005d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69da      	ldr	r2, [r3, #28]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f042 0208 	orr.w	r2, r2, #8
 8005928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69da      	ldr	r2, [r3, #28]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0204 	bic.w	r2, r2, #4
 8005938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69d9      	ldr	r1, [r3, #28]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	61da      	str	r2, [r3, #28]
      break;
 800594c:	e062      	b.n	8005a14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68b9      	ldr	r1, [r7, #8]
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fa95 	bl	8005e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69da      	ldr	r2, [r3, #28]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69d9      	ldr	r1, [r3, #28]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	021a      	lsls	r2, r3, #8
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	61da      	str	r2, [r3, #28]
      break;
 800598e:	e041      	b.n	8005a14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fad8 	bl	8005f4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0208 	orr.w	r2, r2, #8
 80059aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0204 	bic.w	r2, r2, #4
 80059ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	691a      	ldr	r2, [r3, #16]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059ce:	e021      	b.n	8005a14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fb16 	bl	8006008 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	021a      	lsls	r2, r3, #8
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a10:	e000      	b.n	8005a14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8005a12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop

08005a28 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a32      	ldr	r2, [pc, #200]	; (8005b68 <TIM_Base_SetConfig+0xdc>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d007      	beq.n	8005ab4 <TIM_Base_SetConfig+0x28>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aaa:	d003      	beq.n	8005ab4 <TIM_Base_SetConfig+0x28>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a2f      	ldr	r2, [pc, #188]	; (8005b6c <TIM_Base_SetConfig+0xe0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d108      	bne.n	8005ac6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a27      	ldr	r2, [pc, #156]	; (8005b68 <TIM_Base_SetConfig+0xdc>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d013      	beq.n	8005af6 <TIM_Base_SetConfig+0x6a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad4:	d00f      	beq.n	8005af6 <TIM_Base_SetConfig+0x6a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a24      	ldr	r2, [pc, #144]	; (8005b6c <TIM_Base_SetConfig+0xe0>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00b      	beq.n	8005af6 <TIM_Base_SetConfig+0x6a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a23      	ldr	r2, [pc, #140]	; (8005b70 <TIM_Base_SetConfig+0xe4>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d007      	beq.n	8005af6 <TIM_Base_SetConfig+0x6a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a22      	ldr	r2, [pc, #136]	; (8005b74 <TIM_Base_SetConfig+0xe8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d003      	beq.n	8005af6 <TIM_Base_SetConfig+0x6a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a21      	ldr	r2, [pc, #132]	; (8005b78 <TIM_Base_SetConfig+0xec>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d108      	bne.n	8005b08 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a0e      	ldr	r2, [pc, #56]	; (8005b68 <TIM_Base_SetConfig+0xdc>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00b      	beq.n	8005b4c <TIM_Base_SetConfig+0xc0>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a0e      	ldr	r2, [pc, #56]	; (8005b70 <TIM_Base_SetConfig+0xe4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d007      	beq.n	8005b4c <TIM_Base_SetConfig+0xc0>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a0d      	ldr	r2, [pc, #52]	; (8005b74 <TIM_Base_SetConfig+0xe8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d003      	beq.n	8005b4c <TIM_Base_SetConfig+0xc0>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a0c      	ldr	r2, [pc, #48]	; (8005b78 <TIM_Base_SetConfig+0xec>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d103      	bne.n	8005b54 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	615a      	str	r2, [r3, #20]
}
 8005b5a:	bf00      	nop
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40012c00 	.word	0x40012c00
 8005b6c:	40000400 	.word	0x40000400
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800

08005b7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f023 0201 	bic.w	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0303 	bic.w	r3, r3, #3
 8005bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f023 0302 	bic.w	r3, r3, #2
 8005bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a28      	ldr	r2, [pc, #160]	; (8005c78 <TIM_OC1_SetConfig+0xfc>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00b      	beq.n	8005bf4 <TIM_OC1_SetConfig+0x78>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a27      	ldr	r2, [pc, #156]	; (8005c7c <TIM_OC1_SetConfig+0x100>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d007      	beq.n	8005bf4 <TIM_OC1_SetConfig+0x78>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a26      	ldr	r2, [pc, #152]	; (8005c80 <TIM_OC1_SetConfig+0x104>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <TIM_OC1_SetConfig+0x78>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a25      	ldr	r2, [pc, #148]	; (8005c84 <TIM_OC1_SetConfig+0x108>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d10c      	bne.n	8005c0e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f023 0308 	bic.w	r3, r3, #8
 8005bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f023 0304 	bic.w	r3, r3, #4
 8005c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a19      	ldr	r2, [pc, #100]	; (8005c78 <TIM_OC1_SetConfig+0xfc>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00b      	beq.n	8005c2e <TIM_OC1_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a18      	ldr	r2, [pc, #96]	; (8005c7c <TIM_OC1_SetConfig+0x100>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d007      	beq.n	8005c2e <TIM_OC1_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a17      	ldr	r2, [pc, #92]	; (8005c80 <TIM_OC1_SetConfig+0x104>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d003      	beq.n	8005c2e <TIM_OC1_SetConfig+0xb2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a16      	ldr	r2, [pc, #88]	; (8005c84 <TIM_OC1_SetConfig+0x108>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d111      	bne.n	8005c52 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	621a      	str	r2, [r3, #32]
}
 8005c6c:	bf00      	nop
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40014000 	.word	0x40014000
 8005c80:	40014400 	.word	0x40014400
 8005c84:	40014800 	.word	0x40014800

08005c88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	f023 0210 	bic.w	r2, r3, #16
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	021b      	lsls	r3, r3, #8
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f023 0320 	bic.w	r3, r3, #32
 8005cd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a24      	ldr	r2, [pc, #144]	; (8005d78 <TIM_OC2_SetConfig+0xf0>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d10d      	bne.n	8005d08 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a1b      	ldr	r2, [pc, #108]	; (8005d78 <TIM_OC2_SetConfig+0xf0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00b      	beq.n	8005d28 <TIM_OC2_SetConfig+0xa0>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a1a      	ldr	r2, [pc, #104]	; (8005d7c <TIM_OC2_SetConfig+0xf4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d007      	beq.n	8005d28 <TIM_OC2_SetConfig+0xa0>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a19      	ldr	r2, [pc, #100]	; (8005d80 <TIM_OC2_SetConfig+0xf8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_OC2_SetConfig+0xa0>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a18      	ldr	r2, [pc, #96]	; (8005d84 <TIM_OC2_SetConfig+0xfc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d113      	bne.n	8005d50 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d2e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d36:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	621a      	str	r2, [r3, #32]
}
 8005d6a:	bf00      	nop
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40012c00 	.word	0x40012c00
 8005d7c:	40014000 	.word	0x40014000
 8005d80:	40014400 	.word	0x40014400
 8005d84:	40014800 	.word	0x40014800

08005d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0303 	bic.w	r3, r3, #3
 8005dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a23      	ldr	r2, [pc, #140]	; (8005e74 <TIM_OC3_SetConfig+0xec>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d10d      	bne.n	8005e06 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005df0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e04:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a1a      	ldr	r2, [pc, #104]	; (8005e74 <TIM_OC3_SetConfig+0xec>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00b      	beq.n	8005e26 <TIM_OC3_SetConfig+0x9e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a19      	ldr	r2, [pc, #100]	; (8005e78 <TIM_OC3_SetConfig+0xf0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d007      	beq.n	8005e26 <TIM_OC3_SetConfig+0x9e>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a18      	ldr	r2, [pc, #96]	; (8005e7c <TIM_OC3_SetConfig+0xf4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d003      	beq.n	8005e26 <TIM_OC3_SetConfig+0x9e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a17      	ldr	r2, [pc, #92]	; (8005e80 <TIM_OC3_SetConfig+0xf8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d113      	bne.n	8005e4e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	011b      	lsls	r3, r3, #4
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	621a      	str	r2, [r3, #32]
}
 8005e68:	bf00      	nop
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	40012c00 	.word	0x40012c00
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	40014400 	.word	0x40014400
 8005e80:	40014800 	.word	0x40014800

08005e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	021b      	lsls	r3, r3, #8
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	031b      	lsls	r3, r3, #12
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a16      	ldr	r2, [pc, #88]	; (8005f3c <TIM_OC4_SetConfig+0xb8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00b      	beq.n	8005f00 <TIM_OC4_SetConfig+0x7c>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a15      	ldr	r2, [pc, #84]	; (8005f40 <TIM_OC4_SetConfig+0xbc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d007      	beq.n	8005f00 <TIM_OC4_SetConfig+0x7c>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a14      	ldr	r2, [pc, #80]	; (8005f44 <TIM_OC4_SetConfig+0xc0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_OC4_SetConfig+0x7c>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a13      	ldr	r2, [pc, #76]	; (8005f48 <TIM_OC4_SetConfig+0xc4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d109      	bne.n	8005f14 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	019b      	lsls	r3, r3, #6
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	621a      	str	r2, [r3, #32]
}
 8005f2e:	bf00      	nop
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40012c00 	.word	0x40012c00
 8005f40:	40014000 	.word	0x40014000
 8005f44:	40014400 	.word	0x40014400
 8005f48:	40014800 	.word	0x40014800

08005f4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	041b      	lsls	r3, r3, #16
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a15      	ldr	r2, [pc, #84]	; (8005ff8 <TIM_OC5_SetConfig+0xac>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00b      	beq.n	8005fbe <TIM_OC5_SetConfig+0x72>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a14      	ldr	r2, [pc, #80]	; (8005ffc <TIM_OC5_SetConfig+0xb0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d007      	beq.n	8005fbe <TIM_OC5_SetConfig+0x72>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a13      	ldr	r2, [pc, #76]	; (8006000 <TIM_OC5_SetConfig+0xb4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d003      	beq.n	8005fbe <TIM_OC5_SetConfig+0x72>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a12      	ldr	r2, [pc, #72]	; (8006004 <TIM_OC5_SetConfig+0xb8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d109      	bne.n	8005fd2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	021b      	lsls	r3, r3, #8
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	621a      	str	r2, [r3, #32]
}
 8005fec:	bf00      	nop
 8005fee:	371c      	adds	r7, #28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	40012c00 	.word	0x40012c00
 8005ffc:	40014000 	.word	0x40014000
 8006000:	40014400 	.word	0x40014400
 8006004:	40014800 	.word	0x40014800

08006008 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	021b      	lsls	r3, r3, #8
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800604e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	051b      	lsls	r3, r3, #20
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a16      	ldr	r2, [pc, #88]	; (80060b8 <TIM_OC6_SetConfig+0xb0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00b      	beq.n	800607c <TIM_OC6_SetConfig+0x74>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a15      	ldr	r2, [pc, #84]	; (80060bc <TIM_OC6_SetConfig+0xb4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d007      	beq.n	800607c <TIM_OC6_SetConfig+0x74>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a14      	ldr	r2, [pc, #80]	; (80060c0 <TIM_OC6_SetConfig+0xb8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d003      	beq.n	800607c <TIM_OC6_SetConfig+0x74>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a13      	ldr	r2, [pc, #76]	; (80060c4 <TIM_OC6_SetConfig+0xbc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d109      	bne.n	8006090 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006082:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	029b      	lsls	r3, r3, #10
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	621a      	str	r2, [r3, #32]
}
 80060aa:	bf00      	nop
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	40012c00 	.word	0x40012c00
 80060bc:	40014000 	.word	0x40014000
 80060c0:	40014400 	.word	0x40014400
 80060c4:	40014800 	.word	0x40014800

080060c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f003 031f 	and.w	r3, r3, #31
 80060da:	2201      	movs	r2, #1
 80060dc:	fa02 f303 	lsl.w	r3, r2, r3
 80060e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a1a      	ldr	r2, [r3, #32]
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	43db      	mvns	r3, r3
 80060ea:	401a      	ands	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a1a      	ldr	r2, [r3, #32]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f003 031f 	and.w	r3, r3, #31
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006100:	431a      	orrs	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	621a      	str	r2, [r3, #32]
}
 8006106:	bf00      	nop
 8006108:	371c      	adds	r7, #28
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
	...

08006114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006124:	2b01      	cmp	r3, #1
 8006126:	d101      	bne.n	800612c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006128:	2302      	movs	r3, #2
 800612a:	e054      	b.n	80061d6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a24      	ldr	r2, [pc, #144]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d108      	bne.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800615c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a17      	ldr	r2, [pc, #92]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00e      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006194:	d009      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a13      	ldr	r2, [pc, #76]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a11      	ldr	r2, [pc, #68]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d10c      	bne.n	80061c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40012c00 	.word	0x40012c00
 80061e8:	40000400 	.word	0x40000400
 80061ec:	40014000 	.word	0x40014000

080061f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006208:	2302      	movs	r3, #2
 800620a:	e060      	b.n	80062ce <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4313      	orrs	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	4313      	orrs	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	041b      	lsls	r3, r3, #16
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a14      	ldr	r2, [pc, #80]	; (80062dc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d115      	bne.n	80062bc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	051b      	lsls	r3, r3, #20
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	40012c00 	.word	0x40012c00

080062e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <__errno>:
 800631c:	4b01      	ldr	r3, [pc, #4]	; (8006324 <__errno+0x8>)
 800631e:	6818      	ldr	r0, [r3, #0]
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	2000000c 	.word	0x2000000c

08006328 <__libc_init_array>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	4e0d      	ldr	r6, [pc, #52]	; (8006360 <__libc_init_array+0x38>)
 800632c:	4c0d      	ldr	r4, [pc, #52]	; (8006364 <__libc_init_array+0x3c>)
 800632e:	1ba4      	subs	r4, r4, r6
 8006330:	10a4      	asrs	r4, r4, #2
 8006332:	2500      	movs	r5, #0
 8006334:	42a5      	cmp	r5, r4
 8006336:	d109      	bne.n	800634c <__libc_init_array+0x24>
 8006338:	4e0b      	ldr	r6, [pc, #44]	; (8006368 <__libc_init_array+0x40>)
 800633a:	4c0c      	ldr	r4, [pc, #48]	; (800636c <__libc_init_array+0x44>)
 800633c:	f001 fd46 	bl	8007dcc <_init>
 8006340:	1ba4      	subs	r4, r4, r6
 8006342:	10a4      	asrs	r4, r4, #2
 8006344:	2500      	movs	r5, #0
 8006346:	42a5      	cmp	r5, r4
 8006348:	d105      	bne.n	8006356 <__libc_init_array+0x2e>
 800634a:	bd70      	pop	{r4, r5, r6, pc}
 800634c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006350:	4798      	blx	r3
 8006352:	3501      	adds	r5, #1
 8006354:	e7ee      	b.n	8006334 <__libc_init_array+0xc>
 8006356:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800635a:	4798      	blx	r3
 800635c:	3501      	adds	r5, #1
 800635e:	e7f2      	b.n	8006346 <__libc_init_array+0x1e>
 8006360:	08008058 	.word	0x08008058
 8006364:	08008058 	.word	0x08008058
 8006368:	08008058 	.word	0x08008058
 800636c:	0800805c 	.word	0x0800805c

08006370 <memset>:
 8006370:	4402      	add	r2, r0
 8006372:	4603      	mov	r3, r0
 8006374:	4293      	cmp	r3, r2
 8006376:	d100      	bne.n	800637a <memset+0xa>
 8006378:	4770      	bx	lr
 800637a:	f803 1b01 	strb.w	r1, [r3], #1
 800637e:	e7f9      	b.n	8006374 <memset+0x4>

08006380 <__cvt>:
 8006380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006384:	ec55 4b10 	vmov	r4, r5, d0
 8006388:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800638a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800638e:	2d00      	cmp	r5, #0
 8006390:	460e      	mov	r6, r1
 8006392:	4691      	mov	r9, r2
 8006394:	4619      	mov	r1, r3
 8006396:	bfb8      	it	lt
 8006398:	4622      	movlt	r2, r4
 800639a:	462b      	mov	r3, r5
 800639c:	f027 0720 	bic.w	r7, r7, #32
 80063a0:	bfbb      	ittet	lt
 80063a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80063a6:	461d      	movlt	r5, r3
 80063a8:	2300      	movge	r3, #0
 80063aa:	232d      	movlt	r3, #45	; 0x2d
 80063ac:	bfb8      	it	lt
 80063ae:	4614      	movlt	r4, r2
 80063b0:	2f46      	cmp	r7, #70	; 0x46
 80063b2:	700b      	strb	r3, [r1, #0]
 80063b4:	d004      	beq.n	80063c0 <__cvt+0x40>
 80063b6:	2f45      	cmp	r7, #69	; 0x45
 80063b8:	d100      	bne.n	80063bc <__cvt+0x3c>
 80063ba:	3601      	adds	r6, #1
 80063bc:	2102      	movs	r1, #2
 80063be:	e000      	b.n	80063c2 <__cvt+0x42>
 80063c0:	2103      	movs	r1, #3
 80063c2:	ab03      	add	r3, sp, #12
 80063c4:	9301      	str	r3, [sp, #4]
 80063c6:	ab02      	add	r3, sp, #8
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	4632      	mov	r2, r6
 80063cc:	4653      	mov	r3, sl
 80063ce:	ec45 4b10 	vmov	d0, r4, r5
 80063d2:	f000 fbad 	bl	8006b30 <_dtoa_r>
 80063d6:	2f47      	cmp	r7, #71	; 0x47
 80063d8:	4680      	mov	r8, r0
 80063da:	d102      	bne.n	80063e2 <__cvt+0x62>
 80063dc:	f019 0f01 	tst.w	r9, #1
 80063e0:	d026      	beq.n	8006430 <__cvt+0xb0>
 80063e2:	2f46      	cmp	r7, #70	; 0x46
 80063e4:	eb08 0906 	add.w	r9, r8, r6
 80063e8:	d111      	bne.n	800640e <__cvt+0x8e>
 80063ea:	f898 3000 	ldrb.w	r3, [r8]
 80063ee:	2b30      	cmp	r3, #48	; 0x30
 80063f0:	d10a      	bne.n	8006408 <__cvt+0x88>
 80063f2:	2200      	movs	r2, #0
 80063f4:	2300      	movs	r3, #0
 80063f6:	4620      	mov	r0, r4
 80063f8:	4629      	mov	r1, r5
 80063fa:	f7fa fb11 	bl	8000a20 <__aeabi_dcmpeq>
 80063fe:	b918      	cbnz	r0, 8006408 <__cvt+0x88>
 8006400:	f1c6 0601 	rsb	r6, r6, #1
 8006404:	f8ca 6000 	str.w	r6, [sl]
 8006408:	f8da 3000 	ldr.w	r3, [sl]
 800640c:	4499      	add	r9, r3
 800640e:	2200      	movs	r2, #0
 8006410:	2300      	movs	r3, #0
 8006412:	4620      	mov	r0, r4
 8006414:	4629      	mov	r1, r5
 8006416:	f7fa fb03 	bl	8000a20 <__aeabi_dcmpeq>
 800641a:	b938      	cbnz	r0, 800642c <__cvt+0xac>
 800641c:	2230      	movs	r2, #48	; 0x30
 800641e:	9b03      	ldr	r3, [sp, #12]
 8006420:	454b      	cmp	r3, r9
 8006422:	d205      	bcs.n	8006430 <__cvt+0xb0>
 8006424:	1c59      	adds	r1, r3, #1
 8006426:	9103      	str	r1, [sp, #12]
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	e7f8      	b.n	800641e <__cvt+0x9e>
 800642c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006430:	9b03      	ldr	r3, [sp, #12]
 8006432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006434:	eba3 0308 	sub.w	r3, r3, r8
 8006438:	4640      	mov	r0, r8
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	b004      	add	sp, #16
 800643e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006442 <__exponent>:
 8006442:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006444:	2900      	cmp	r1, #0
 8006446:	4604      	mov	r4, r0
 8006448:	bfba      	itte	lt
 800644a:	4249      	neglt	r1, r1
 800644c:	232d      	movlt	r3, #45	; 0x2d
 800644e:	232b      	movge	r3, #43	; 0x2b
 8006450:	2909      	cmp	r1, #9
 8006452:	f804 2b02 	strb.w	r2, [r4], #2
 8006456:	7043      	strb	r3, [r0, #1]
 8006458:	dd20      	ble.n	800649c <__exponent+0x5a>
 800645a:	f10d 0307 	add.w	r3, sp, #7
 800645e:	461f      	mov	r7, r3
 8006460:	260a      	movs	r6, #10
 8006462:	fb91 f5f6 	sdiv	r5, r1, r6
 8006466:	fb06 1115 	mls	r1, r6, r5, r1
 800646a:	3130      	adds	r1, #48	; 0x30
 800646c:	2d09      	cmp	r5, #9
 800646e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006472:	f103 32ff 	add.w	r2, r3, #4294967295
 8006476:	4629      	mov	r1, r5
 8006478:	dc09      	bgt.n	800648e <__exponent+0x4c>
 800647a:	3130      	adds	r1, #48	; 0x30
 800647c:	3b02      	subs	r3, #2
 800647e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006482:	42bb      	cmp	r3, r7
 8006484:	4622      	mov	r2, r4
 8006486:	d304      	bcc.n	8006492 <__exponent+0x50>
 8006488:	1a10      	subs	r0, r2, r0
 800648a:	b003      	add	sp, #12
 800648c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800648e:	4613      	mov	r3, r2
 8006490:	e7e7      	b.n	8006462 <__exponent+0x20>
 8006492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006496:	f804 2b01 	strb.w	r2, [r4], #1
 800649a:	e7f2      	b.n	8006482 <__exponent+0x40>
 800649c:	2330      	movs	r3, #48	; 0x30
 800649e:	4419      	add	r1, r3
 80064a0:	7083      	strb	r3, [r0, #2]
 80064a2:	1d02      	adds	r2, r0, #4
 80064a4:	70c1      	strb	r1, [r0, #3]
 80064a6:	e7ef      	b.n	8006488 <__exponent+0x46>

080064a8 <_printf_float>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	b08d      	sub	sp, #52	; 0x34
 80064ae:	460c      	mov	r4, r1
 80064b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80064b4:	4616      	mov	r6, r2
 80064b6:	461f      	mov	r7, r3
 80064b8:	4605      	mov	r5, r0
 80064ba:	f001 f8f1 	bl	80076a0 <_localeconv_r>
 80064be:	6803      	ldr	r3, [r0, #0]
 80064c0:	9304      	str	r3, [sp, #16]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7f9 fe80 	bl	80001c8 <strlen>
 80064c8:	2300      	movs	r3, #0
 80064ca:	930a      	str	r3, [sp, #40]	; 0x28
 80064cc:	f8d8 3000 	ldr.w	r3, [r8]
 80064d0:	9005      	str	r0, [sp, #20]
 80064d2:	3307      	adds	r3, #7
 80064d4:	f023 0307 	bic.w	r3, r3, #7
 80064d8:	f103 0208 	add.w	r2, r3, #8
 80064dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80064e0:	f8d4 b000 	ldr.w	fp, [r4]
 80064e4:	f8c8 2000 	str.w	r2, [r8]
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80064f0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80064f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064f8:	9307      	str	r3, [sp, #28]
 80064fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80064fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006502:	4ba7      	ldr	r3, [pc, #668]	; (80067a0 <_printf_float+0x2f8>)
 8006504:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006508:	f7fa fabc 	bl	8000a84 <__aeabi_dcmpun>
 800650c:	bb70      	cbnz	r0, 800656c <_printf_float+0xc4>
 800650e:	f04f 32ff 	mov.w	r2, #4294967295
 8006512:	4ba3      	ldr	r3, [pc, #652]	; (80067a0 <_printf_float+0x2f8>)
 8006514:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006518:	f7fa fa96 	bl	8000a48 <__aeabi_dcmple>
 800651c:	bb30      	cbnz	r0, 800656c <_printf_float+0xc4>
 800651e:	2200      	movs	r2, #0
 8006520:	2300      	movs	r3, #0
 8006522:	4640      	mov	r0, r8
 8006524:	4649      	mov	r1, r9
 8006526:	f7fa fa85 	bl	8000a34 <__aeabi_dcmplt>
 800652a:	b110      	cbz	r0, 8006532 <_printf_float+0x8a>
 800652c:	232d      	movs	r3, #45	; 0x2d
 800652e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006532:	4a9c      	ldr	r2, [pc, #624]	; (80067a4 <_printf_float+0x2fc>)
 8006534:	4b9c      	ldr	r3, [pc, #624]	; (80067a8 <_printf_float+0x300>)
 8006536:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800653a:	bf8c      	ite	hi
 800653c:	4690      	movhi	r8, r2
 800653e:	4698      	movls	r8, r3
 8006540:	2303      	movs	r3, #3
 8006542:	f02b 0204 	bic.w	r2, fp, #4
 8006546:	6123      	str	r3, [r4, #16]
 8006548:	6022      	str	r2, [r4, #0]
 800654a:	f04f 0900 	mov.w	r9, #0
 800654e:	9700      	str	r7, [sp, #0]
 8006550:	4633      	mov	r3, r6
 8006552:	aa0b      	add	r2, sp, #44	; 0x2c
 8006554:	4621      	mov	r1, r4
 8006556:	4628      	mov	r0, r5
 8006558:	f000 f9e6 	bl	8006928 <_printf_common>
 800655c:	3001      	adds	r0, #1
 800655e:	f040 808d 	bne.w	800667c <_printf_float+0x1d4>
 8006562:	f04f 30ff 	mov.w	r0, #4294967295
 8006566:	b00d      	add	sp, #52	; 0x34
 8006568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800656c:	4642      	mov	r2, r8
 800656e:	464b      	mov	r3, r9
 8006570:	4640      	mov	r0, r8
 8006572:	4649      	mov	r1, r9
 8006574:	f7fa fa86 	bl	8000a84 <__aeabi_dcmpun>
 8006578:	b110      	cbz	r0, 8006580 <_printf_float+0xd8>
 800657a:	4a8c      	ldr	r2, [pc, #560]	; (80067ac <_printf_float+0x304>)
 800657c:	4b8c      	ldr	r3, [pc, #560]	; (80067b0 <_printf_float+0x308>)
 800657e:	e7da      	b.n	8006536 <_printf_float+0x8e>
 8006580:	6861      	ldr	r1, [r4, #4]
 8006582:	1c4b      	adds	r3, r1, #1
 8006584:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006588:	a80a      	add	r0, sp, #40	; 0x28
 800658a:	d13e      	bne.n	800660a <_printf_float+0x162>
 800658c:	2306      	movs	r3, #6
 800658e:	6063      	str	r3, [r4, #4]
 8006590:	2300      	movs	r3, #0
 8006592:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006596:	ab09      	add	r3, sp, #36	; 0x24
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	ec49 8b10 	vmov	d0, r8, r9
 800659e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065a2:	6022      	str	r2, [r4, #0]
 80065a4:	f8cd a004 	str.w	sl, [sp, #4]
 80065a8:	6861      	ldr	r1, [r4, #4]
 80065aa:	4628      	mov	r0, r5
 80065ac:	f7ff fee8 	bl	8006380 <__cvt>
 80065b0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80065b4:	2b47      	cmp	r3, #71	; 0x47
 80065b6:	4680      	mov	r8, r0
 80065b8:	d109      	bne.n	80065ce <_printf_float+0x126>
 80065ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065bc:	1cd8      	adds	r0, r3, #3
 80065be:	db02      	blt.n	80065c6 <_printf_float+0x11e>
 80065c0:	6862      	ldr	r2, [r4, #4]
 80065c2:	4293      	cmp	r3, r2
 80065c4:	dd47      	ble.n	8006656 <_printf_float+0x1ae>
 80065c6:	f1aa 0a02 	sub.w	sl, sl, #2
 80065ca:	fa5f fa8a 	uxtb.w	sl, sl
 80065ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80065d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065d4:	d824      	bhi.n	8006620 <_printf_float+0x178>
 80065d6:	3901      	subs	r1, #1
 80065d8:	4652      	mov	r2, sl
 80065da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065de:	9109      	str	r1, [sp, #36]	; 0x24
 80065e0:	f7ff ff2f 	bl	8006442 <__exponent>
 80065e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065e6:	1813      	adds	r3, r2, r0
 80065e8:	2a01      	cmp	r2, #1
 80065ea:	4681      	mov	r9, r0
 80065ec:	6123      	str	r3, [r4, #16]
 80065ee:	dc02      	bgt.n	80065f6 <_printf_float+0x14e>
 80065f0:	6822      	ldr	r2, [r4, #0]
 80065f2:	07d1      	lsls	r1, r2, #31
 80065f4:	d501      	bpl.n	80065fa <_printf_float+0x152>
 80065f6:	3301      	adds	r3, #1
 80065f8:	6123      	str	r3, [r4, #16]
 80065fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0a5      	beq.n	800654e <_printf_float+0xa6>
 8006602:	232d      	movs	r3, #45	; 0x2d
 8006604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006608:	e7a1      	b.n	800654e <_printf_float+0xa6>
 800660a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800660e:	f000 8177 	beq.w	8006900 <_printf_float+0x458>
 8006612:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006616:	d1bb      	bne.n	8006590 <_printf_float+0xe8>
 8006618:	2900      	cmp	r1, #0
 800661a:	d1b9      	bne.n	8006590 <_printf_float+0xe8>
 800661c:	2301      	movs	r3, #1
 800661e:	e7b6      	b.n	800658e <_printf_float+0xe6>
 8006620:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006624:	d119      	bne.n	800665a <_printf_float+0x1b2>
 8006626:	2900      	cmp	r1, #0
 8006628:	6863      	ldr	r3, [r4, #4]
 800662a:	dd0c      	ble.n	8006646 <_printf_float+0x19e>
 800662c:	6121      	str	r1, [r4, #16]
 800662e:	b913      	cbnz	r3, 8006636 <_printf_float+0x18e>
 8006630:	6822      	ldr	r2, [r4, #0]
 8006632:	07d2      	lsls	r2, r2, #31
 8006634:	d502      	bpl.n	800663c <_printf_float+0x194>
 8006636:	3301      	adds	r3, #1
 8006638:	440b      	add	r3, r1
 800663a:	6123      	str	r3, [r4, #16]
 800663c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800663e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006640:	f04f 0900 	mov.w	r9, #0
 8006644:	e7d9      	b.n	80065fa <_printf_float+0x152>
 8006646:	b913      	cbnz	r3, 800664e <_printf_float+0x1a6>
 8006648:	6822      	ldr	r2, [r4, #0]
 800664a:	07d0      	lsls	r0, r2, #31
 800664c:	d501      	bpl.n	8006652 <_printf_float+0x1aa>
 800664e:	3302      	adds	r3, #2
 8006650:	e7f3      	b.n	800663a <_printf_float+0x192>
 8006652:	2301      	movs	r3, #1
 8006654:	e7f1      	b.n	800663a <_printf_float+0x192>
 8006656:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800665a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800665e:	4293      	cmp	r3, r2
 8006660:	db05      	blt.n	800666e <_printf_float+0x1c6>
 8006662:	6822      	ldr	r2, [r4, #0]
 8006664:	6123      	str	r3, [r4, #16]
 8006666:	07d1      	lsls	r1, r2, #31
 8006668:	d5e8      	bpl.n	800663c <_printf_float+0x194>
 800666a:	3301      	adds	r3, #1
 800666c:	e7e5      	b.n	800663a <_printf_float+0x192>
 800666e:	2b00      	cmp	r3, #0
 8006670:	bfd4      	ite	le
 8006672:	f1c3 0302 	rsble	r3, r3, #2
 8006676:	2301      	movgt	r3, #1
 8006678:	4413      	add	r3, r2
 800667a:	e7de      	b.n	800663a <_printf_float+0x192>
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	055a      	lsls	r2, r3, #21
 8006680:	d407      	bmi.n	8006692 <_printf_float+0x1ea>
 8006682:	6923      	ldr	r3, [r4, #16]
 8006684:	4642      	mov	r2, r8
 8006686:	4631      	mov	r1, r6
 8006688:	4628      	mov	r0, r5
 800668a:	47b8      	blx	r7
 800668c:	3001      	adds	r0, #1
 800668e:	d12b      	bne.n	80066e8 <_printf_float+0x240>
 8006690:	e767      	b.n	8006562 <_printf_float+0xba>
 8006692:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006696:	f240 80dc 	bls.w	8006852 <_printf_float+0x3aa>
 800669a:	2200      	movs	r2, #0
 800669c:	2300      	movs	r3, #0
 800669e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066a2:	f7fa f9bd 	bl	8000a20 <__aeabi_dcmpeq>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d033      	beq.n	8006712 <_printf_float+0x26a>
 80066aa:	2301      	movs	r3, #1
 80066ac:	4a41      	ldr	r2, [pc, #260]	; (80067b4 <_printf_float+0x30c>)
 80066ae:	4631      	mov	r1, r6
 80066b0:	4628      	mov	r0, r5
 80066b2:	47b8      	blx	r7
 80066b4:	3001      	adds	r0, #1
 80066b6:	f43f af54 	beq.w	8006562 <_printf_float+0xba>
 80066ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066be:	429a      	cmp	r2, r3
 80066c0:	db02      	blt.n	80066c8 <_printf_float+0x220>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	07d8      	lsls	r0, r3, #31
 80066c6:	d50f      	bpl.n	80066e8 <_printf_float+0x240>
 80066c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066cc:	4631      	mov	r1, r6
 80066ce:	4628      	mov	r0, r5
 80066d0:	47b8      	blx	r7
 80066d2:	3001      	adds	r0, #1
 80066d4:	f43f af45 	beq.w	8006562 <_printf_float+0xba>
 80066d8:	f04f 0800 	mov.w	r8, #0
 80066dc:	f104 091a 	add.w	r9, r4, #26
 80066e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066e2:	3b01      	subs	r3, #1
 80066e4:	4543      	cmp	r3, r8
 80066e6:	dc09      	bgt.n	80066fc <_printf_float+0x254>
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	079b      	lsls	r3, r3, #30
 80066ec:	f100 8103 	bmi.w	80068f6 <_printf_float+0x44e>
 80066f0:	68e0      	ldr	r0, [r4, #12]
 80066f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066f4:	4298      	cmp	r0, r3
 80066f6:	bfb8      	it	lt
 80066f8:	4618      	movlt	r0, r3
 80066fa:	e734      	b.n	8006566 <_printf_float+0xbe>
 80066fc:	2301      	movs	r3, #1
 80066fe:	464a      	mov	r2, r9
 8006700:	4631      	mov	r1, r6
 8006702:	4628      	mov	r0, r5
 8006704:	47b8      	blx	r7
 8006706:	3001      	adds	r0, #1
 8006708:	f43f af2b 	beq.w	8006562 <_printf_float+0xba>
 800670c:	f108 0801 	add.w	r8, r8, #1
 8006710:	e7e6      	b.n	80066e0 <_printf_float+0x238>
 8006712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006714:	2b00      	cmp	r3, #0
 8006716:	dc2b      	bgt.n	8006770 <_printf_float+0x2c8>
 8006718:	2301      	movs	r3, #1
 800671a:	4a26      	ldr	r2, [pc, #152]	; (80067b4 <_printf_float+0x30c>)
 800671c:	4631      	mov	r1, r6
 800671e:	4628      	mov	r0, r5
 8006720:	47b8      	blx	r7
 8006722:	3001      	adds	r0, #1
 8006724:	f43f af1d 	beq.w	8006562 <_printf_float+0xba>
 8006728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800672a:	b923      	cbnz	r3, 8006736 <_printf_float+0x28e>
 800672c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800672e:	b913      	cbnz	r3, 8006736 <_printf_float+0x28e>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	07d9      	lsls	r1, r3, #31
 8006734:	d5d8      	bpl.n	80066e8 <_printf_float+0x240>
 8006736:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800673a:	4631      	mov	r1, r6
 800673c:	4628      	mov	r0, r5
 800673e:	47b8      	blx	r7
 8006740:	3001      	adds	r0, #1
 8006742:	f43f af0e 	beq.w	8006562 <_printf_float+0xba>
 8006746:	f04f 0900 	mov.w	r9, #0
 800674a:	f104 0a1a 	add.w	sl, r4, #26
 800674e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006750:	425b      	negs	r3, r3
 8006752:	454b      	cmp	r3, r9
 8006754:	dc01      	bgt.n	800675a <_printf_float+0x2b2>
 8006756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006758:	e794      	b.n	8006684 <_printf_float+0x1dc>
 800675a:	2301      	movs	r3, #1
 800675c:	4652      	mov	r2, sl
 800675e:	4631      	mov	r1, r6
 8006760:	4628      	mov	r0, r5
 8006762:	47b8      	blx	r7
 8006764:	3001      	adds	r0, #1
 8006766:	f43f aefc 	beq.w	8006562 <_printf_float+0xba>
 800676a:	f109 0901 	add.w	r9, r9, #1
 800676e:	e7ee      	b.n	800674e <_printf_float+0x2a6>
 8006770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006772:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006774:	429a      	cmp	r2, r3
 8006776:	bfa8      	it	ge
 8006778:	461a      	movge	r2, r3
 800677a:	2a00      	cmp	r2, #0
 800677c:	4691      	mov	r9, r2
 800677e:	dd07      	ble.n	8006790 <_printf_float+0x2e8>
 8006780:	4613      	mov	r3, r2
 8006782:	4631      	mov	r1, r6
 8006784:	4642      	mov	r2, r8
 8006786:	4628      	mov	r0, r5
 8006788:	47b8      	blx	r7
 800678a:	3001      	adds	r0, #1
 800678c:	f43f aee9 	beq.w	8006562 <_printf_float+0xba>
 8006790:	f104 031a 	add.w	r3, r4, #26
 8006794:	f04f 0b00 	mov.w	fp, #0
 8006798:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800679c:	9306      	str	r3, [sp, #24]
 800679e:	e015      	b.n	80067cc <_printf_float+0x324>
 80067a0:	7fefffff 	.word	0x7fefffff
 80067a4:	08007e34 	.word	0x08007e34
 80067a8:	08007e30 	.word	0x08007e30
 80067ac:	08007e3c 	.word	0x08007e3c
 80067b0:	08007e38 	.word	0x08007e38
 80067b4:	08007e40 	.word	0x08007e40
 80067b8:	2301      	movs	r3, #1
 80067ba:	9a06      	ldr	r2, [sp, #24]
 80067bc:	4631      	mov	r1, r6
 80067be:	4628      	mov	r0, r5
 80067c0:	47b8      	blx	r7
 80067c2:	3001      	adds	r0, #1
 80067c4:	f43f aecd 	beq.w	8006562 <_printf_float+0xba>
 80067c8:	f10b 0b01 	add.w	fp, fp, #1
 80067cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80067d0:	ebaa 0309 	sub.w	r3, sl, r9
 80067d4:	455b      	cmp	r3, fp
 80067d6:	dcef      	bgt.n	80067b8 <_printf_float+0x310>
 80067d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067dc:	429a      	cmp	r2, r3
 80067de:	44d0      	add	r8, sl
 80067e0:	db15      	blt.n	800680e <_printf_float+0x366>
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	07da      	lsls	r2, r3, #31
 80067e6:	d412      	bmi.n	800680e <_printf_float+0x366>
 80067e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067ec:	eba3 020a 	sub.w	r2, r3, sl
 80067f0:	eba3 0a01 	sub.w	sl, r3, r1
 80067f4:	4592      	cmp	sl, r2
 80067f6:	bfa8      	it	ge
 80067f8:	4692      	movge	sl, r2
 80067fa:	f1ba 0f00 	cmp.w	sl, #0
 80067fe:	dc0e      	bgt.n	800681e <_printf_float+0x376>
 8006800:	f04f 0800 	mov.w	r8, #0
 8006804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006808:	f104 091a 	add.w	r9, r4, #26
 800680c:	e019      	b.n	8006842 <_printf_float+0x39a>
 800680e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006812:	4631      	mov	r1, r6
 8006814:	4628      	mov	r0, r5
 8006816:	47b8      	blx	r7
 8006818:	3001      	adds	r0, #1
 800681a:	d1e5      	bne.n	80067e8 <_printf_float+0x340>
 800681c:	e6a1      	b.n	8006562 <_printf_float+0xba>
 800681e:	4653      	mov	r3, sl
 8006820:	4642      	mov	r2, r8
 8006822:	4631      	mov	r1, r6
 8006824:	4628      	mov	r0, r5
 8006826:	47b8      	blx	r7
 8006828:	3001      	adds	r0, #1
 800682a:	d1e9      	bne.n	8006800 <_printf_float+0x358>
 800682c:	e699      	b.n	8006562 <_printf_float+0xba>
 800682e:	2301      	movs	r3, #1
 8006830:	464a      	mov	r2, r9
 8006832:	4631      	mov	r1, r6
 8006834:	4628      	mov	r0, r5
 8006836:	47b8      	blx	r7
 8006838:	3001      	adds	r0, #1
 800683a:	f43f ae92 	beq.w	8006562 <_printf_float+0xba>
 800683e:	f108 0801 	add.w	r8, r8, #1
 8006842:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006846:	1a9b      	subs	r3, r3, r2
 8006848:	eba3 030a 	sub.w	r3, r3, sl
 800684c:	4543      	cmp	r3, r8
 800684e:	dcee      	bgt.n	800682e <_printf_float+0x386>
 8006850:	e74a      	b.n	80066e8 <_printf_float+0x240>
 8006852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006854:	2a01      	cmp	r2, #1
 8006856:	dc01      	bgt.n	800685c <_printf_float+0x3b4>
 8006858:	07db      	lsls	r3, r3, #31
 800685a:	d53a      	bpl.n	80068d2 <_printf_float+0x42a>
 800685c:	2301      	movs	r3, #1
 800685e:	4642      	mov	r2, r8
 8006860:	4631      	mov	r1, r6
 8006862:	4628      	mov	r0, r5
 8006864:	47b8      	blx	r7
 8006866:	3001      	adds	r0, #1
 8006868:	f43f ae7b 	beq.w	8006562 <_printf_float+0xba>
 800686c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006870:	4631      	mov	r1, r6
 8006872:	4628      	mov	r0, r5
 8006874:	47b8      	blx	r7
 8006876:	3001      	adds	r0, #1
 8006878:	f108 0801 	add.w	r8, r8, #1
 800687c:	f43f ae71 	beq.w	8006562 <_printf_float+0xba>
 8006880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006882:	2200      	movs	r2, #0
 8006884:	f103 3aff 	add.w	sl, r3, #4294967295
 8006888:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800688c:	2300      	movs	r3, #0
 800688e:	f7fa f8c7 	bl	8000a20 <__aeabi_dcmpeq>
 8006892:	b9c8      	cbnz	r0, 80068c8 <_printf_float+0x420>
 8006894:	4653      	mov	r3, sl
 8006896:	4642      	mov	r2, r8
 8006898:	4631      	mov	r1, r6
 800689a:	4628      	mov	r0, r5
 800689c:	47b8      	blx	r7
 800689e:	3001      	adds	r0, #1
 80068a0:	d10e      	bne.n	80068c0 <_printf_float+0x418>
 80068a2:	e65e      	b.n	8006562 <_printf_float+0xba>
 80068a4:	2301      	movs	r3, #1
 80068a6:	4652      	mov	r2, sl
 80068a8:	4631      	mov	r1, r6
 80068aa:	4628      	mov	r0, r5
 80068ac:	47b8      	blx	r7
 80068ae:	3001      	adds	r0, #1
 80068b0:	f43f ae57 	beq.w	8006562 <_printf_float+0xba>
 80068b4:	f108 0801 	add.w	r8, r8, #1
 80068b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ba:	3b01      	subs	r3, #1
 80068bc:	4543      	cmp	r3, r8
 80068be:	dcf1      	bgt.n	80068a4 <_printf_float+0x3fc>
 80068c0:	464b      	mov	r3, r9
 80068c2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068c6:	e6de      	b.n	8006686 <_printf_float+0x1de>
 80068c8:	f04f 0800 	mov.w	r8, #0
 80068cc:	f104 0a1a 	add.w	sl, r4, #26
 80068d0:	e7f2      	b.n	80068b8 <_printf_float+0x410>
 80068d2:	2301      	movs	r3, #1
 80068d4:	e7df      	b.n	8006896 <_printf_float+0x3ee>
 80068d6:	2301      	movs	r3, #1
 80068d8:	464a      	mov	r2, r9
 80068da:	4631      	mov	r1, r6
 80068dc:	4628      	mov	r0, r5
 80068de:	47b8      	blx	r7
 80068e0:	3001      	adds	r0, #1
 80068e2:	f43f ae3e 	beq.w	8006562 <_printf_float+0xba>
 80068e6:	f108 0801 	add.w	r8, r8, #1
 80068ea:	68e3      	ldr	r3, [r4, #12]
 80068ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068ee:	1a9b      	subs	r3, r3, r2
 80068f0:	4543      	cmp	r3, r8
 80068f2:	dcf0      	bgt.n	80068d6 <_printf_float+0x42e>
 80068f4:	e6fc      	b.n	80066f0 <_printf_float+0x248>
 80068f6:	f04f 0800 	mov.w	r8, #0
 80068fa:	f104 0919 	add.w	r9, r4, #25
 80068fe:	e7f4      	b.n	80068ea <_printf_float+0x442>
 8006900:	2900      	cmp	r1, #0
 8006902:	f43f ae8b 	beq.w	800661c <_printf_float+0x174>
 8006906:	2300      	movs	r3, #0
 8006908:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800690c:	ab09      	add	r3, sp, #36	; 0x24
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	ec49 8b10 	vmov	d0, r8, r9
 8006914:	6022      	str	r2, [r4, #0]
 8006916:	f8cd a004 	str.w	sl, [sp, #4]
 800691a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800691e:	4628      	mov	r0, r5
 8006920:	f7ff fd2e 	bl	8006380 <__cvt>
 8006924:	4680      	mov	r8, r0
 8006926:	e648      	b.n	80065ba <_printf_float+0x112>

08006928 <_printf_common>:
 8006928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800692c:	4691      	mov	r9, r2
 800692e:	461f      	mov	r7, r3
 8006930:	688a      	ldr	r2, [r1, #8]
 8006932:	690b      	ldr	r3, [r1, #16]
 8006934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006938:	4293      	cmp	r3, r2
 800693a:	bfb8      	it	lt
 800693c:	4613      	movlt	r3, r2
 800693e:	f8c9 3000 	str.w	r3, [r9]
 8006942:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006946:	4606      	mov	r6, r0
 8006948:	460c      	mov	r4, r1
 800694a:	b112      	cbz	r2, 8006952 <_printf_common+0x2a>
 800694c:	3301      	adds	r3, #1
 800694e:	f8c9 3000 	str.w	r3, [r9]
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	0699      	lsls	r1, r3, #26
 8006956:	bf42      	ittt	mi
 8006958:	f8d9 3000 	ldrmi.w	r3, [r9]
 800695c:	3302      	addmi	r3, #2
 800695e:	f8c9 3000 	strmi.w	r3, [r9]
 8006962:	6825      	ldr	r5, [r4, #0]
 8006964:	f015 0506 	ands.w	r5, r5, #6
 8006968:	d107      	bne.n	800697a <_printf_common+0x52>
 800696a:	f104 0a19 	add.w	sl, r4, #25
 800696e:	68e3      	ldr	r3, [r4, #12]
 8006970:	f8d9 2000 	ldr.w	r2, [r9]
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	42ab      	cmp	r3, r5
 8006978:	dc28      	bgt.n	80069cc <_printf_common+0xa4>
 800697a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800697e:	6822      	ldr	r2, [r4, #0]
 8006980:	3300      	adds	r3, #0
 8006982:	bf18      	it	ne
 8006984:	2301      	movne	r3, #1
 8006986:	0692      	lsls	r2, r2, #26
 8006988:	d42d      	bmi.n	80069e6 <_printf_common+0xbe>
 800698a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800698e:	4639      	mov	r1, r7
 8006990:	4630      	mov	r0, r6
 8006992:	47c0      	blx	r8
 8006994:	3001      	adds	r0, #1
 8006996:	d020      	beq.n	80069da <_printf_common+0xb2>
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	68e5      	ldr	r5, [r4, #12]
 800699c:	f8d9 2000 	ldr.w	r2, [r9]
 80069a0:	f003 0306 	and.w	r3, r3, #6
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	bf08      	it	eq
 80069a8:	1aad      	subeq	r5, r5, r2
 80069aa:	68a3      	ldr	r3, [r4, #8]
 80069ac:	6922      	ldr	r2, [r4, #16]
 80069ae:	bf0c      	ite	eq
 80069b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069b4:	2500      	movne	r5, #0
 80069b6:	4293      	cmp	r3, r2
 80069b8:	bfc4      	itt	gt
 80069ba:	1a9b      	subgt	r3, r3, r2
 80069bc:	18ed      	addgt	r5, r5, r3
 80069be:	f04f 0900 	mov.w	r9, #0
 80069c2:	341a      	adds	r4, #26
 80069c4:	454d      	cmp	r5, r9
 80069c6:	d11a      	bne.n	80069fe <_printf_common+0xd6>
 80069c8:	2000      	movs	r0, #0
 80069ca:	e008      	b.n	80069de <_printf_common+0xb6>
 80069cc:	2301      	movs	r3, #1
 80069ce:	4652      	mov	r2, sl
 80069d0:	4639      	mov	r1, r7
 80069d2:	4630      	mov	r0, r6
 80069d4:	47c0      	blx	r8
 80069d6:	3001      	adds	r0, #1
 80069d8:	d103      	bne.n	80069e2 <_printf_common+0xba>
 80069da:	f04f 30ff 	mov.w	r0, #4294967295
 80069de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e2:	3501      	adds	r5, #1
 80069e4:	e7c3      	b.n	800696e <_printf_common+0x46>
 80069e6:	18e1      	adds	r1, r4, r3
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	2030      	movs	r0, #48	; 0x30
 80069ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069f0:	4422      	add	r2, r4
 80069f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069fa:	3302      	adds	r3, #2
 80069fc:	e7c5      	b.n	800698a <_printf_common+0x62>
 80069fe:	2301      	movs	r3, #1
 8006a00:	4622      	mov	r2, r4
 8006a02:	4639      	mov	r1, r7
 8006a04:	4630      	mov	r0, r6
 8006a06:	47c0      	blx	r8
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d0e6      	beq.n	80069da <_printf_common+0xb2>
 8006a0c:	f109 0901 	add.w	r9, r9, #1
 8006a10:	e7d8      	b.n	80069c4 <_printf_common+0x9c>

08006a12 <quorem>:
 8006a12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a16:	6903      	ldr	r3, [r0, #16]
 8006a18:	690c      	ldr	r4, [r1, #16]
 8006a1a:	42a3      	cmp	r3, r4
 8006a1c:	4680      	mov	r8, r0
 8006a1e:	f2c0 8082 	blt.w	8006b26 <quorem+0x114>
 8006a22:	3c01      	subs	r4, #1
 8006a24:	f101 0714 	add.w	r7, r1, #20
 8006a28:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006a2c:	f100 0614 	add.w	r6, r0, #20
 8006a30:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006a34:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006a38:	eb06 030c 	add.w	r3, r6, ip
 8006a3c:	3501      	adds	r5, #1
 8006a3e:	eb07 090c 	add.w	r9, r7, ip
 8006a42:	9301      	str	r3, [sp, #4]
 8006a44:	fbb0 f5f5 	udiv	r5, r0, r5
 8006a48:	b395      	cbz	r5, 8006ab0 <quorem+0x9e>
 8006a4a:	f04f 0a00 	mov.w	sl, #0
 8006a4e:	4638      	mov	r0, r7
 8006a50:	46b6      	mov	lr, r6
 8006a52:	46d3      	mov	fp, sl
 8006a54:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a58:	b293      	uxth	r3, r2
 8006a5a:	fb05 a303 	mla	r3, r5, r3, sl
 8006a5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	ebab 0303 	sub.w	r3, fp, r3
 8006a68:	0c12      	lsrs	r2, r2, #16
 8006a6a:	f8de b000 	ldr.w	fp, [lr]
 8006a6e:	fb05 a202 	mla	r2, r5, r2, sl
 8006a72:	fa13 f38b 	uxtah	r3, r3, fp
 8006a76:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006a7a:	fa1f fb82 	uxth.w	fp, r2
 8006a7e:	f8de 2000 	ldr.w	r2, [lr]
 8006a82:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006a86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a90:	4581      	cmp	r9, r0
 8006a92:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006a96:	f84e 3b04 	str.w	r3, [lr], #4
 8006a9a:	d2db      	bcs.n	8006a54 <quorem+0x42>
 8006a9c:	f856 300c 	ldr.w	r3, [r6, ip]
 8006aa0:	b933      	cbnz	r3, 8006ab0 <quorem+0x9e>
 8006aa2:	9b01      	ldr	r3, [sp, #4]
 8006aa4:	3b04      	subs	r3, #4
 8006aa6:	429e      	cmp	r6, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	d330      	bcc.n	8006b0e <quorem+0xfc>
 8006aac:	f8c8 4010 	str.w	r4, [r8, #16]
 8006ab0:	4640      	mov	r0, r8
 8006ab2:	f001 f82b 	bl	8007b0c <__mcmp>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	db25      	blt.n	8006b06 <quorem+0xf4>
 8006aba:	3501      	adds	r5, #1
 8006abc:	4630      	mov	r0, r6
 8006abe:	f04f 0c00 	mov.w	ip, #0
 8006ac2:	f857 2b04 	ldr.w	r2, [r7], #4
 8006ac6:	f8d0 e000 	ldr.w	lr, [r0]
 8006aca:	b293      	uxth	r3, r2
 8006acc:	ebac 0303 	sub.w	r3, ip, r3
 8006ad0:	0c12      	lsrs	r2, r2, #16
 8006ad2:	fa13 f38e 	uxtah	r3, r3, lr
 8006ad6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ada:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ae4:	45b9      	cmp	r9, r7
 8006ae6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006aea:	f840 3b04 	str.w	r3, [r0], #4
 8006aee:	d2e8      	bcs.n	8006ac2 <quorem+0xb0>
 8006af0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006af4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006af8:	b92a      	cbnz	r2, 8006b06 <quorem+0xf4>
 8006afa:	3b04      	subs	r3, #4
 8006afc:	429e      	cmp	r6, r3
 8006afe:	461a      	mov	r2, r3
 8006b00:	d30b      	bcc.n	8006b1a <quorem+0x108>
 8006b02:	f8c8 4010 	str.w	r4, [r8, #16]
 8006b06:	4628      	mov	r0, r5
 8006b08:	b003      	add	sp, #12
 8006b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0e:	6812      	ldr	r2, [r2, #0]
 8006b10:	3b04      	subs	r3, #4
 8006b12:	2a00      	cmp	r2, #0
 8006b14:	d1ca      	bne.n	8006aac <quorem+0x9a>
 8006b16:	3c01      	subs	r4, #1
 8006b18:	e7c5      	b.n	8006aa6 <quorem+0x94>
 8006b1a:	6812      	ldr	r2, [r2, #0]
 8006b1c:	3b04      	subs	r3, #4
 8006b1e:	2a00      	cmp	r2, #0
 8006b20:	d1ef      	bne.n	8006b02 <quorem+0xf0>
 8006b22:	3c01      	subs	r4, #1
 8006b24:	e7ea      	b.n	8006afc <quorem+0xea>
 8006b26:	2000      	movs	r0, #0
 8006b28:	e7ee      	b.n	8006b08 <quorem+0xf6>
 8006b2a:	0000      	movs	r0, r0
 8006b2c:	0000      	movs	r0, r0
	...

08006b30 <_dtoa_r>:
 8006b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b34:	ec57 6b10 	vmov	r6, r7, d0
 8006b38:	b097      	sub	sp, #92	; 0x5c
 8006b3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b3c:	9106      	str	r1, [sp, #24]
 8006b3e:	4604      	mov	r4, r0
 8006b40:	920b      	str	r2, [sp, #44]	; 0x2c
 8006b42:	9312      	str	r3, [sp, #72]	; 0x48
 8006b44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b48:	e9cd 6700 	strd	r6, r7, [sp]
 8006b4c:	b93d      	cbnz	r5, 8006b5e <_dtoa_r+0x2e>
 8006b4e:	2010      	movs	r0, #16
 8006b50:	f000 fdb4 	bl	80076bc <malloc>
 8006b54:	6260      	str	r0, [r4, #36]	; 0x24
 8006b56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b5a:	6005      	str	r5, [r0, #0]
 8006b5c:	60c5      	str	r5, [r0, #12]
 8006b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b60:	6819      	ldr	r1, [r3, #0]
 8006b62:	b151      	cbz	r1, 8006b7a <_dtoa_r+0x4a>
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	604a      	str	r2, [r1, #4]
 8006b68:	2301      	movs	r3, #1
 8006b6a:	4093      	lsls	r3, r2
 8006b6c:	608b      	str	r3, [r1, #8]
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 fdeb 	bl	800774a <_Bfree>
 8006b74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	1e3b      	subs	r3, r7, #0
 8006b7c:	bfbb      	ittet	lt
 8006b7e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b82:	9301      	strlt	r3, [sp, #4]
 8006b84:	2300      	movge	r3, #0
 8006b86:	2201      	movlt	r2, #1
 8006b88:	bfac      	ite	ge
 8006b8a:	f8c8 3000 	strge.w	r3, [r8]
 8006b8e:	f8c8 2000 	strlt.w	r2, [r8]
 8006b92:	4baf      	ldr	r3, [pc, #700]	; (8006e50 <_dtoa_r+0x320>)
 8006b94:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006b98:	ea33 0308 	bics.w	r3, r3, r8
 8006b9c:	d114      	bne.n	8006bc8 <_dtoa_r+0x98>
 8006b9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ba0:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ba4:	6013      	str	r3, [r2, #0]
 8006ba6:	9b00      	ldr	r3, [sp, #0]
 8006ba8:	b923      	cbnz	r3, 8006bb4 <_dtoa_r+0x84>
 8006baa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	f000 8542 	beq.w	8007638 <_dtoa_r+0xb08>
 8006bb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bb6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006e64 <_dtoa_r+0x334>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 8544 	beq.w	8007648 <_dtoa_r+0xb18>
 8006bc0:	f10b 0303 	add.w	r3, fp, #3
 8006bc4:	f000 bd3e 	b.w	8007644 <_dtoa_r+0xb14>
 8006bc8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	2300      	movs	r3, #0
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	4639      	mov	r1, r7
 8006bd4:	f7f9 ff24 	bl	8000a20 <__aeabi_dcmpeq>
 8006bd8:	4681      	mov	r9, r0
 8006bda:	b168      	cbz	r0, 8006bf8 <_dtoa_r+0xc8>
 8006bdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006bde:	2301      	movs	r3, #1
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8524 	beq.w	8007632 <_dtoa_r+0xb02>
 8006bea:	4b9a      	ldr	r3, [pc, #616]	; (8006e54 <_dtoa_r+0x324>)
 8006bec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bee:	f103 3bff 	add.w	fp, r3, #4294967295
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	f000 bd28 	b.w	8007648 <_dtoa_r+0xb18>
 8006bf8:	aa14      	add	r2, sp, #80	; 0x50
 8006bfa:	a915      	add	r1, sp, #84	; 0x54
 8006bfc:	ec47 6b10 	vmov	d0, r6, r7
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 fffa 	bl	8007bfa <__d2b>
 8006c06:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006c0a:	9004      	str	r0, [sp, #16]
 8006c0c:	2d00      	cmp	r5, #0
 8006c0e:	d07c      	beq.n	8006d0a <_dtoa_r+0x1da>
 8006c10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c14:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006c18:	46b2      	mov	sl, r6
 8006c1a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006c1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c22:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006c26:	2200      	movs	r2, #0
 8006c28:	4b8b      	ldr	r3, [pc, #556]	; (8006e58 <_dtoa_r+0x328>)
 8006c2a:	4650      	mov	r0, sl
 8006c2c:	4659      	mov	r1, fp
 8006c2e:	f7f9 fad7 	bl	80001e0 <__aeabi_dsub>
 8006c32:	a381      	add	r3, pc, #516	; (adr r3, 8006e38 <_dtoa_r+0x308>)
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	f7f9 fc8a 	bl	8000550 <__aeabi_dmul>
 8006c3c:	a380      	add	r3, pc, #512	; (adr r3, 8006e40 <_dtoa_r+0x310>)
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	f7f9 facf 	bl	80001e4 <__adddf3>
 8006c46:	4606      	mov	r6, r0
 8006c48:	4628      	mov	r0, r5
 8006c4a:	460f      	mov	r7, r1
 8006c4c:	f7f9 fc16 	bl	800047c <__aeabi_i2d>
 8006c50:	a37d      	add	r3, pc, #500	; (adr r3, 8006e48 <_dtoa_r+0x318>)
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	f7f9 fc7b 	bl	8000550 <__aeabi_dmul>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4630      	mov	r0, r6
 8006c60:	4639      	mov	r1, r7
 8006c62:	f7f9 fabf 	bl	80001e4 <__adddf3>
 8006c66:	4606      	mov	r6, r0
 8006c68:	460f      	mov	r7, r1
 8006c6a:	f7f9 ff21 	bl	8000ab0 <__aeabi_d2iz>
 8006c6e:	2200      	movs	r2, #0
 8006c70:	4682      	mov	sl, r0
 8006c72:	2300      	movs	r3, #0
 8006c74:	4630      	mov	r0, r6
 8006c76:	4639      	mov	r1, r7
 8006c78:	f7f9 fedc 	bl	8000a34 <__aeabi_dcmplt>
 8006c7c:	b148      	cbz	r0, 8006c92 <_dtoa_r+0x162>
 8006c7e:	4650      	mov	r0, sl
 8006c80:	f7f9 fbfc 	bl	800047c <__aeabi_i2d>
 8006c84:	4632      	mov	r2, r6
 8006c86:	463b      	mov	r3, r7
 8006c88:	f7f9 feca 	bl	8000a20 <__aeabi_dcmpeq>
 8006c8c:	b908      	cbnz	r0, 8006c92 <_dtoa_r+0x162>
 8006c8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c92:	f1ba 0f16 	cmp.w	sl, #22
 8006c96:	d859      	bhi.n	8006d4c <_dtoa_r+0x21c>
 8006c98:	4970      	ldr	r1, [pc, #448]	; (8006e5c <_dtoa_r+0x32c>)
 8006c9a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006c9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ca6:	f7f9 fee3 	bl	8000a70 <__aeabi_dcmpgt>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d050      	beq.n	8006d50 <_dtoa_r+0x220>
 8006cae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006cb8:	1b5d      	subs	r5, r3, r5
 8006cba:	f1b5 0801 	subs.w	r8, r5, #1
 8006cbe:	bf49      	itett	mi
 8006cc0:	f1c5 0301 	rsbmi	r3, r5, #1
 8006cc4:	2300      	movpl	r3, #0
 8006cc6:	9305      	strmi	r3, [sp, #20]
 8006cc8:	f04f 0800 	movmi.w	r8, #0
 8006ccc:	bf58      	it	pl
 8006cce:	9305      	strpl	r3, [sp, #20]
 8006cd0:	f1ba 0f00 	cmp.w	sl, #0
 8006cd4:	db3e      	blt.n	8006d54 <_dtoa_r+0x224>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	44d0      	add	r8, sl
 8006cda:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006cde:	9307      	str	r3, [sp, #28]
 8006ce0:	9b06      	ldr	r3, [sp, #24]
 8006ce2:	2b09      	cmp	r3, #9
 8006ce4:	f200 8090 	bhi.w	8006e08 <_dtoa_r+0x2d8>
 8006ce8:	2b05      	cmp	r3, #5
 8006cea:	bfc4      	itt	gt
 8006cec:	3b04      	subgt	r3, #4
 8006cee:	9306      	strgt	r3, [sp, #24]
 8006cf0:	9b06      	ldr	r3, [sp, #24]
 8006cf2:	f1a3 0302 	sub.w	r3, r3, #2
 8006cf6:	bfcc      	ite	gt
 8006cf8:	2500      	movgt	r5, #0
 8006cfa:	2501      	movle	r5, #1
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	f200 808f 	bhi.w	8006e20 <_dtoa_r+0x2f0>
 8006d02:	e8df f003 	tbb	[pc, r3]
 8006d06:	7f7d      	.short	0x7f7d
 8006d08:	7131      	.short	0x7131
 8006d0a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006d0e:	441d      	add	r5, r3
 8006d10:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006d14:	2820      	cmp	r0, #32
 8006d16:	dd13      	ble.n	8006d40 <_dtoa_r+0x210>
 8006d18:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006d1c:	9b00      	ldr	r3, [sp, #0]
 8006d1e:	fa08 f800 	lsl.w	r8, r8, r0
 8006d22:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006d26:	fa23 f000 	lsr.w	r0, r3, r0
 8006d2a:	ea48 0000 	orr.w	r0, r8, r0
 8006d2e:	f7f9 fb95 	bl	800045c <__aeabi_ui2d>
 8006d32:	2301      	movs	r3, #1
 8006d34:	4682      	mov	sl, r0
 8006d36:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006d3a:	3d01      	subs	r5, #1
 8006d3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d3e:	e772      	b.n	8006c26 <_dtoa_r+0xf6>
 8006d40:	9b00      	ldr	r3, [sp, #0]
 8006d42:	f1c0 0020 	rsb	r0, r0, #32
 8006d46:	fa03 f000 	lsl.w	r0, r3, r0
 8006d4a:	e7f0      	b.n	8006d2e <_dtoa_r+0x1fe>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e7b1      	b.n	8006cb4 <_dtoa_r+0x184>
 8006d50:	900f      	str	r0, [sp, #60]	; 0x3c
 8006d52:	e7b0      	b.n	8006cb6 <_dtoa_r+0x186>
 8006d54:	9b05      	ldr	r3, [sp, #20]
 8006d56:	eba3 030a 	sub.w	r3, r3, sl
 8006d5a:	9305      	str	r3, [sp, #20]
 8006d5c:	f1ca 0300 	rsb	r3, sl, #0
 8006d60:	9307      	str	r3, [sp, #28]
 8006d62:	2300      	movs	r3, #0
 8006d64:	930e      	str	r3, [sp, #56]	; 0x38
 8006d66:	e7bb      	b.n	8006ce0 <_dtoa_r+0x1b0>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8006d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	dd59      	ble.n	8006e26 <_dtoa_r+0x2f6>
 8006d72:	9302      	str	r3, [sp, #8]
 8006d74:	4699      	mov	r9, r3
 8006d76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d78:	2200      	movs	r2, #0
 8006d7a:	6072      	str	r2, [r6, #4]
 8006d7c:	2204      	movs	r2, #4
 8006d7e:	f102 0014 	add.w	r0, r2, #20
 8006d82:	4298      	cmp	r0, r3
 8006d84:	6871      	ldr	r1, [r6, #4]
 8006d86:	d953      	bls.n	8006e30 <_dtoa_r+0x300>
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f000 fcaa 	bl	80076e2 <_Balloc>
 8006d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d90:	6030      	str	r0, [r6, #0]
 8006d92:	f1b9 0f0e 	cmp.w	r9, #14
 8006d96:	f8d3 b000 	ldr.w	fp, [r3]
 8006d9a:	f200 80e6 	bhi.w	8006f6a <_dtoa_r+0x43a>
 8006d9e:	2d00      	cmp	r5, #0
 8006da0:	f000 80e3 	beq.w	8006f6a <_dtoa_r+0x43a>
 8006da4:	ed9d 7b00 	vldr	d7, [sp]
 8006da8:	f1ba 0f00 	cmp.w	sl, #0
 8006dac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006db0:	dd74      	ble.n	8006e9c <_dtoa_r+0x36c>
 8006db2:	4a2a      	ldr	r2, [pc, #168]	; (8006e5c <_dtoa_r+0x32c>)
 8006db4:	f00a 030f 	and.w	r3, sl, #15
 8006db8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006dbc:	ed93 7b00 	vldr	d7, [r3]
 8006dc0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006dc4:	06f0      	lsls	r0, r6, #27
 8006dc6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006dca:	d565      	bpl.n	8006e98 <_dtoa_r+0x368>
 8006dcc:	4b24      	ldr	r3, [pc, #144]	; (8006e60 <_dtoa_r+0x330>)
 8006dce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006dd2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006dd6:	f7f9 fce5 	bl	80007a4 <__aeabi_ddiv>
 8006dda:	e9cd 0100 	strd	r0, r1, [sp]
 8006dde:	f006 060f 	and.w	r6, r6, #15
 8006de2:	2503      	movs	r5, #3
 8006de4:	4f1e      	ldr	r7, [pc, #120]	; (8006e60 <_dtoa_r+0x330>)
 8006de6:	e04c      	b.n	8006e82 <_dtoa_r+0x352>
 8006de8:	2301      	movs	r3, #1
 8006dea:	930a      	str	r3, [sp, #40]	; 0x28
 8006dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dee:	4453      	add	r3, sl
 8006df0:	f103 0901 	add.w	r9, r3, #1
 8006df4:	9302      	str	r3, [sp, #8]
 8006df6:	464b      	mov	r3, r9
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	bfb8      	it	lt
 8006dfc:	2301      	movlt	r3, #1
 8006dfe:	e7ba      	b.n	8006d76 <_dtoa_r+0x246>
 8006e00:	2300      	movs	r3, #0
 8006e02:	e7b2      	b.n	8006d6a <_dtoa_r+0x23a>
 8006e04:	2300      	movs	r3, #0
 8006e06:	e7f0      	b.n	8006dea <_dtoa_r+0x2ba>
 8006e08:	2501      	movs	r5, #1
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	9306      	str	r3, [sp, #24]
 8006e0e:	950a      	str	r5, [sp, #40]	; 0x28
 8006e10:	f04f 33ff 	mov.w	r3, #4294967295
 8006e14:	9302      	str	r3, [sp, #8]
 8006e16:	4699      	mov	r9, r3
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2312      	movs	r3, #18
 8006e1c:	920b      	str	r2, [sp, #44]	; 0x2c
 8006e1e:	e7aa      	b.n	8006d76 <_dtoa_r+0x246>
 8006e20:	2301      	movs	r3, #1
 8006e22:	930a      	str	r3, [sp, #40]	; 0x28
 8006e24:	e7f4      	b.n	8006e10 <_dtoa_r+0x2e0>
 8006e26:	2301      	movs	r3, #1
 8006e28:	9302      	str	r3, [sp, #8]
 8006e2a:	4699      	mov	r9, r3
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	e7f5      	b.n	8006e1c <_dtoa_r+0x2ec>
 8006e30:	3101      	adds	r1, #1
 8006e32:	6071      	str	r1, [r6, #4]
 8006e34:	0052      	lsls	r2, r2, #1
 8006e36:	e7a2      	b.n	8006d7e <_dtoa_r+0x24e>
 8006e38:	636f4361 	.word	0x636f4361
 8006e3c:	3fd287a7 	.word	0x3fd287a7
 8006e40:	8b60c8b3 	.word	0x8b60c8b3
 8006e44:	3fc68a28 	.word	0x3fc68a28
 8006e48:	509f79fb 	.word	0x509f79fb
 8006e4c:	3fd34413 	.word	0x3fd34413
 8006e50:	7ff00000 	.word	0x7ff00000
 8006e54:	08007e41 	.word	0x08007e41
 8006e58:	3ff80000 	.word	0x3ff80000
 8006e5c:	08007e78 	.word	0x08007e78
 8006e60:	08007e50 	.word	0x08007e50
 8006e64:	08007e4b 	.word	0x08007e4b
 8006e68:	07f1      	lsls	r1, r6, #31
 8006e6a:	d508      	bpl.n	8006e7e <_dtoa_r+0x34e>
 8006e6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e74:	f7f9 fb6c 	bl	8000550 <__aeabi_dmul>
 8006e78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006e7c:	3501      	adds	r5, #1
 8006e7e:	1076      	asrs	r6, r6, #1
 8006e80:	3708      	adds	r7, #8
 8006e82:	2e00      	cmp	r6, #0
 8006e84:	d1f0      	bne.n	8006e68 <_dtoa_r+0x338>
 8006e86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e8e:	f7f9 fc89 	bl	80007a4 <__aeabi_ddiv>
 8006e92:	e9cd 0100 	strd	r0, r1, [sp]
 8006e96:	e01a      	b.n	8006ece <_dtoa_r+0x39e>
 8006e98:	2502      	movs	r5, #2
 8006e9a:	e7a3      	b.n	8006de4 <_dtoa_r+0x2b4>
 8006e9c:	f000 80a0 	beq.w	8006fe0 <_dtoa_r+0x4b0>
 8006ea0:	f1ca 0600 	rsb	r6, sl, #0
 8006ea4:	4b9f      	ldr	r3, [pc, #636]	; (8007124 <_dtoa_r+0x5f4>)
 8006ea6:	4fa0      	ldr	r7, [pc, #640]	; (8007128 <_dtoa_r+0x5f8>)
 8006ea8:	f006 020f 	and.w	r2, r6, #15
 8006eac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006eb8:	f7f9 fb4a 	bl	8000550 <__aeabi_dmul>
 8006ebc:	e9cd 0100 	strd	r0, r1, [sp]
 8006ec0:	1136      	asrs	r6, r6, #4
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	2502      	movs	r5, #2
 8006ec6:	2e00      	cmp	r6, #0
 8006ec8:	d17f      	bne.n	8006fca <_dtoa_r+0x49a>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e1      	bne.n	8006e92 <_dtoa_r+0x362>
 8006ece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 8087 	beq.w	8006fe4 <_dtoa_r+0x4b4>
 8006ed6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006eda:	2200      	movs	r2, #0
 8006edc:	4b93      	ldr	r3, [pc, #588]	; (800712c <_dtoa_r+0x5fc>)
 8006ede:	4630      	mov	r0, r6
 8006ee0:	4639      	mov	r1, r7
 8006ee2:	f7f9 fda7 	bl	8000a34 <__aeabi_dcmplt>
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d07c      	beq.n	8006fe4 <_dtoa_r+0x4b4>
 8006eea:	f1b9 0f00 	cmp.w	r9, #0
 8006eee:	d079      	beq.n	8006fe4 <_dtoa_r+0x4b4>
 8006ef0:	9b02      	ldr	r3, [sp, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	dd35      	ble.n	8006f62 <_dtoa_r+0x432>
 8006ef6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006efa:	9308      	str	r3, [sp, #32]
 8006efc:	4639      	mov	r1, r7
 8006efe:	2200      	movs	r2, #0
 8006f00:	4b8b      	ldr	r3, [pc, #556]	; (8007130 <_dtoa_r+0x600>)
 8006f02:	4630      	mov	r0, r6
 8006f04:	f7f9 fb24 	bl	8000550 <__aeabi_dmul>
 8006f08:	e9cd 0100 	strd	r0, r1, [sp]
 8006f0c:	9f02      	ldr	r7, [sp, #8]
 8006f0e:	3501      	adds	r5, #1
 8006f10:	4628      	mov	r0, r5
 8006f12:	f7f9 fab3 	bl	800047c <__aeabi_i2d>
 8006f16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f1a:	f7f9 fb19 	bl	8000550 <__aeabi_dmul>
 8006f1e:	2200      	movs	r2, #0
 8006f20:	4b84      	ldr	r3, [pc, #528]	; (8007134 <_dtoa_r+0x604>)
 8006f22:	f7f9 f95f 	bl	80001e4 <__adddf3>
 8006f26:	4605      	mov	r5, r0
 8006f28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006f2c:	2f00      	cmp	r7, #0
 8006f2e:	d15d      	bne.n	8006fec <_dtoa_r+0x4bc>
 8006f30:	2200      	movs	r2, #0
 8006f32:	4b81      	ldr	r3, [pc, #516]	; (8007138 <_dtoa_r+0x608>)
 8006f34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f38:	f7f9 f952 	bl	80001e0 <__aeabi_dsub>
 8006f3c:	462a      	mov	r2, r5
 8006f3e:	4633      	mov	r3, r6
 8006f40:	e9cd 0100 	strd	r0, r1, [sp]
 8006f44:	f7f9 fd94 	bl	8000a70 <__aeabi_dcmpgt>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	f040 8288 	bne.w	800745e <_dtoa_r+0x92e>
 8006f4e:	462a      	mov	r2, r5
 8006f50:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006f54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f58:	f7f9 fd6c 	bl	8000a34 <__aeabi_dcmplt>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	f040 827c 	bne.w	800745a <_dtoa_r+0x92a>
 8006f62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f66:	e9cd 2300 	strd	r2, r3, [sp]
 8006f6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f2c0 8150 	blt.w	8007212 <_dtoa_r+0x6e2>
 8006f72:	f1ba 0f0e 	cmp.w	sl, #14
 8006f76:	f300 814c 	bgt.w	8007212 <_dtoa_r+0x6e2>
 8006f7a:	4b6a      	ldr	r3, [pc, #424]	; (8007124 <_dtoa_r+0x5f4>)
 8006f7c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f80:	ed93 7b00 	vldr	d7, [r3]
 8006f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006f8c:	f280 80d8 	bge.w	8007140 <_dtoa_r+0x610>
 8006f90:	f1b9 0f00 	cmp.w	r9, #0
 8006f94:	f300 80d4 	bgt.w	8007140 <_dtoa_r+0x610>
 8006f98:	f040 825e 	bne.w	8007458 <_dtoa_r+0x928>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	4b66      	ldr	r3, [pc, #408]	; (8007138 <_dtoa_r+0x608>)
 8006fa0:	ec51 0b17 	vmov	r0, r1, d7
 8006fa4:	f7f9 fad4 	bl	8000550 <__aeabi_dmul>
 8006fa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fac:	f7f9 fd56 	bl	8000a5c <__aeabi_dcmpge>
 8006fb0:	464f      	mov	r7, r9
 8006fb2:	464e      	mov	r6, r9
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	f040 8234 	bne.w	8007422 <_dtoa_r+0x8f2>
 8006fba:	2331      	movs	r3, #49	; 0x31
 8006fbc:	f10b 0501 	add.w	r5, fp, #1
 8006fc0:	f88b 3000 	strb.w	r3, [fp]
 8006fc4:	f10a 0a01 	add.w	sl, sl, #1
 8006fc8:	e22f      	b.n	800742a <_dtoa_r+0x8fa>
 8006fca:	07f2      	lsls	r2, r6, #31
 8006fcc:	d505      	bpl.n	8006fda <_dtoa_r+0x4aa>
 8006fce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fd2:	f7f9 fabd 	bl	8000550 <__aeabi_dmul>
 8006fd6:	3501      	adds	r5, #1
 8006fd8:	2301      	movs	r3, #1
 8006fda:	1076      	asrs	r6, r6, #1
 8006fdc:	3708      	adds	r7, #8
 8006fde:	e772      	b.n	8006ec6 <_dtoa_r+0x396>
 8006fe0:	2502      	movs	r5, #2
 8006fe2:	e774      	b.n	8006ece <_dtoa_r+0x39e>
 8006fe4:	f8cd a020 	str.w	sl, [sp, #32]
 8006fe8:	464f      	mov	r7, r9
 8006fea:	e791      	b.n	8006f10 <_dtoa_r+0x3e0>
 8006fec:	4b4d      	ldr	r3, [pc, #308]	; (8007124 <_dtoa_r+0x5f4>)
 8006fee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ff2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d047      	beq.n	800708c <_dtoa_r+0x55c>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	2000      	movs	r0, #0
 8007002:	494e      	ldr	r1, [pc, #312]	; (800713c <_dtoa_r+0x60c>)
 8007004:	f7f9 fbce 	bl	80007a4 <__aeabi_ddiv>
 8007008:	462a      	mov	r2, r5
 800700a:	4633      	mov	r3, r6
 800700c:	f7f9 f8e8 	bl	80001e0 <__aeabi_dsub>
 8007010:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007014:	465d      	mov	r5, fp
 8007016:	e9dd 0100 	ldrd	r0, r1, [sp]
 800701a:	f7f9 fd49 	bl	8000ab0 <__aeabi_d2iz>
 800701e:	4606      	mov	r6, r0
 8007020:	f7f9 fa2c 	bl	800047c <__aeabi_i2d>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	e9dd 0100 	ldrd	r0, r1, [sp]
 800702c:	f7f9 f8d8 	bl	80001e0 <__aeabi_dsub>
 8007030:	3630      	adds	r6, #48	; 0x30
 8007032:	f805 6b01 	strb.w	r6, [r5], #1
 8007036:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800703a:	e9cd 0100 	strd	r0, r1, [sp]
 800703e:	f7f9 fcf9 	bl	8000a34 <__aeabi_dcmplt>
 8007042:	2800      	cmp	r0, #0
 8007044:	d163      	bne.n	800710e <_dtoa_r+0x5de>
 8007046:	e9dd 2300 	ldrd	r2, r3, [sp]
 800704a:	2000      	movs	r0, #0
 800704c:	4937      	ldr	r1, [pc, #220]	; (800712c <_dtoa_r+0x5fc>)
 800704e:	f7f9 f8c7 	bl	80001e0 <__aeabi_dsub>
 8007052:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007056:	f7f9 fced 	bl	8000a34 <__aeabi_dcmplt>
 800705a:	2800      	cmp	r0, #0
 800705c:	f040 80b7 	bne.w	80071ce <_dtoa_r+0x69e>
 8007060:	eba5 030b 	sub.w	r3, r5, fp
 8007064:	429f      	cmp	r7, r3
 8007066:	f77f af7c 	ble.w	8006f62 <_dtoa_r+0x432>
 800706a:	2200      	movs	r2, #0
 800706c:	4b30      	ldr	r3, [pc, #192]	; (8007130 <_dtoa_r+0x600>)
 800706e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007072:	f7f9 fa6d 	bl	8000550 <__aeabi_dmul>
 8007076:	2200      	movs	r2, #0
 8007078:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800707c:	4b2c      	ldr	r3, [pc, #176]	; (8007130 <_dtoa_r+0x600>)
 800707e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007082:	f7f9 fa65 	bl	8000550 <__aeabi_dmul>
 8007086:	e9cd 0100 	strd	r0, r1, [sp]
 800708a:	e7c4      	b.n	8007016 <_dtoa_r+0x4e6>
 800708c:	462a      	mov	r2, r5
 800708e:	4633      	mov	r3, r6
 8007090:	f7f9 fa5e 	bl	8000550 <__aeabi_dmul>
 8007094:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007098:	eb0b 0507 	add.w	r5, fp, r7
 800709c:	465e      	mov	r6, fp
 800709e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070a2:	f7f9 fd05 	bl	8000ab0 <__aeabi_d2iz>
 80070a6:	4607      	mov	r7, r0
 80070a8:	f7f9 f9e8 	bl	800047c <__aeabi_i2d>
 80070ac:	3730      	adds	r7, #48	; 0x30
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070b6:	f7f9 f893 	bl	80001e0 <__aeabi_dsub>
 80070ba:	f806 7b01 	strb.w	r7, [r6], #1
 80070be:	42ae      	cmp	r6, r5
 80070c0:	e9cd 0100 	strd	r0, r1, [sp]
 80070c4:	f04f 0200 	mov.w	r2, #0
 80070c8:	d126      	bne.n	8007118 <_dtoa_r+0x5e8>
 80070ca:	4b1c      	ldr	r3, [pc, #112]	; (800713c <_dtoa_r+0x60c>)
 80070cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070d0:	f7f9 f888 	bl	80001e4 <__adddf3>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070dc:	f7f9 fcc8 	bl	8000a70 <__aeabi_dcmpgt>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d174      	bne.n	80071ce <_dtoa_r+0x69e>
 80070e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80070e8:	2000      	movs	r0, #0
 80070ea:	4914      	ldr	r1, [pc, #80]	; (800713c <_dtoa_r+0x60c>)
 80070ec:	f7f9 f878 	bl	80001e0 <__aeabi_dsub>
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070f8:	f7f9 fc9c 	bl	8000a34 <__aeabi_dcmplt>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	f43f af30 	beq.w	8006f62 <_dtoa_r+0x432>
 8007102:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007106:	2b30      	cmp	r3, #48	; 0x30
 8007108:	f105 32ff 	add.w	r2, r5, #4294967295
 800710c:	d002      	beq.n	8007114 <_dtoa_r+0x5e4>
 800710e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007112:	e04a      	b.n	80071aa <_dtoa_r+0x67a>
 8007114:	4615      	mov	r5, r2
 8007116:	e7f4      	b.n	8007102 <_dtoa_r+0x5d2>
 8007118:	4b05      	ldr	r3, [pc, #20]	; (8007130 <_dtoa_r+0x600>)
 800711a:	f7f9 fa19 	bl	8000550 <__aeabi_dmul>
 800711e:	e9cd 0100 	strd	r0, r1, [sp]
 8007122:	e7bc      	b.n	800709e <_dtoa_r+0x56e>
 8007124:	08007e78 	.word	0x08007e78
 8007128:	08007e50 	.word	0x08007e50
 800712c:	3ff00000 	.word	0x3ff00000
 8007130:	40240000 	.word	0x40240000
 8007134:	401c0000 	.word	0x401c0000
 8007138:	40140000 	.word	0x40140000
 800713c:	3fe00000 	.word	0x3fe00000
 8007140:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007144:	465d      	mov	r5, fp
 8007146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800714a:	4630      	mov	r0, r6
 800714c:	4639      	mov	r1, r7
 800714e:	f7f9 fb29 	bl	80007a4 <__aeabi_ddiv>
 8007152:	f7f9 fcad 	bl	8000ab0 <__aeabi_d2iz>
 8007156:	4680      	mov	r8, r0
 8007158:	f7f9 f990 	bl	800047c <__aeabi_i2d>
 800715c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007160:	f7f9 f9f6 	bl	8000550 <__aeabi_dmul>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4630      	mov	r0, r6
 800716a:	4639      	mov	r1, r7
 800716c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007170:	f7f9 f836 	bl	80001e0 <__aeabi_dsub>
 8007174:	f805 6b01 	strb.w	r6, [r5], #1
 8007178:	eba5 060b 	sub.w	r6, r5, fp
 800717c:	45b1      	cmp	r9, r6
 800717e:	4602      	mov	r2, r0
 8007180:	460b      	mov	r3, r1
 8007182:	d139      	bne.n	80071f8 <_dtoa_r+0x6c8>
 8007184:	f7f9 f82e 	bl	80001e4 <__adddf3>
 8007188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800718c:	4606      	mov	r6, r0
 800718e:	460f      	mov	r7, r1
 8007190:	f7f9 fc6e 	bl	8000a70 <__aeabi_dcmpgt>
 8007194:	b9c8      	cbnz	r0, 80071ca <_dtoa_r+0x69a>
 8007196:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800719a:	4630      	mov	r0, r6
 800719c:	4639      	mov	r1, r7
 800719e:	f7f9 fc3f 	bl	8000a20 <__aeabi_dcmpeq>
 80071a2:	b110      	cbz	r0, 80071aa <_dtoa_r+0x67a>
 80071a4:	f018 0f01 	tst.w	r8, #1
 80071a8:	d10f      	bne.n	80071ca <_dtoa_r+0x69a>
 80071aa:	9904      	ldr	r1, [sp, #16]
 80071ac:	4620      	mov	r0, r4
 80071ae:	f000 facc 	bl	800774a <_Bfree>
 80071b2:	2300      	movs	r3, #0
 80071b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071b6:	702b      	strb	r3, [r5, #0]
 80071b8:	f10a 0301 	add.w	r3, sl, #1
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 8241 	beq.w	8007648 <_dtoa_r+0xb18>
 80071c6:	601d      	str	r5, [r3, #0]
 80071c8:	e23e      	b.n	8007648 <_dtoa_r+0xb18>
 80071ca:	f8cd a020 	str.w	sl, [sp, #32]
 80071ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80071d2:	2a39      	cmp	r2, #57	; 0x39
 80071d4:	f105 33ff 	add.w	r3, r5, #4294967295
 80071d8:	d108      	bne.n	80071ec <_dtoa_r+0x6bc>
 80071da:	459b      	cmp	fp, r3
 80071dc:	d10a      	bne.n	80071f4 <_dtoa_r+0x6c4>
 80071de:	9b08      	ldr	r3, [sp, #32]
 80071e0:	3301      	adds	r3, #1
 80071e2:	9308      	str	r3, [sp, #32]
 80071e4:	2330      	movs	r3, #48	; 0x30
 80071e6:	f88b 3000 	strb.w	r3, [fp]
 80071ea:	465b      	mov	r3, fp
 80071ec:	781a      	ldrb	r2, [r3, #0]
 80071ee:	3201      	adds	r2, #1
 80071f0:	701a      	strb	r2, [r3, #0]
 80071f2:	e78c      	b.n	800710e <_dtoa_r+0x5de>
 80071f4:	461d      	mov	r5, r3
 80071f6:	e7ea      	b.n	80071ce <_dtoa_r+0x69e>
 80071f8:	2200      	movs	r2, #0
 80071fa:	4b9b      	ldr	r3, [pc, #620]	; (8007468 <_dtoa_r+0x938>)
 80071fc:	f7f9 f9a8 	bl	8000550 <__aeabi_dmul>
 8007200:	2200      	movs	r2, #0
 8007202:	2300      	movs	r3, #0
 8007204:	4606      	mov	r6, r0
 8007206:	460f      	mov	r7, r1
 8007208:	f7f9 fc0a 	bl	8000a20 <__aeabi_dcmpeq>
 800720c:	2800      	cmp	r0, #0
 800720e:	d09a      	beq.n	8007146 <_dtoa_r+0x616>
 8007210:	e7cb      	b.n	80071aa <_dtoa_r+0x67a>
 8007212:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007214:	2a00      	cmp	r2, #0
 8007216:	f000 808b 	beq.w	8007330 <_dtoa_r+0x800>
 800721a:	9a06      	ldr	r2, [sp, #24]
 800721c:	2a01      	cmp	r2, #1
 800721e:	dc6e      	bgt.n	80072fe <_dtoa_r+0x7ce>
 8007220:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007222:	2a00      	cmp	r2, #0
 8007224:	d067      	beq.n	80072f6 <_dtoa_r+0x7c6>
 8007226:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800722a:	9f07      	ldr	r7, [sp, #28]
 800722c:	9d05      	ldr	r5, [sp, #20]
 800722e:	9a05      	ldr	r2, [sp, #20]
 8007230:	2101      	movs	r1, #1
 8007232:	441a      	add	r2, r3
 8007234:	4620      	mov	r0, r4
 8007236:	9205      	str	r2, [sp, #20]
 8007238:	4498      	add	r8, r3
 800723a:	f000 fb26 	bl	800788a <__i2b>
 800723e:	4606      	mov	r6, r0
 8007240:	2d00      	cmp	r5, #0
 8007242:	dd0c      	ble.n	800725e <_dtoa_r+0x72e>
 8007244:	f1b8 0f00 	cmp.w	r8, #0
 8007248:	dd09      	ble.n	800725e <_dtoa_r+0x72e>
 800724a:	4545      	cmp	r5, r8
 800724c:	9a05      	ldr	r2, [sp, #20]
 800724e:	462b      	mov	r3, r5
 8007250:	bfa8      	it	ge
 8007252:	4643      	movge	r3, r8
 8007254:	1ad2      	subs	r2, r2, r3
 8007256:	9205      	str	r2, [sp, #20]
 8007258:	1aed      	subs	r5, r5, r3
 800725a:	eba8 0803 	sub.w	r8, r8, r3
 800725e:	9b07      	ldr	r3, [sp, #28]
 8007260:	b1eb      	cbz	r3, 800729e <_dtoa_r+0x76e>
 8007262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007264:	2b00      	cmp	r3, #0
 8007266:	d067      	beq.n	8007338 <_dtoa_r+0x808>
 8007268:	b18f      	cbz	r7, 800728e <_dtoa_r+0x75e>
 800726a:	4631      	mov	r1, r6
 800726c:	463a      	mov	r2, r7
 800726e:	4620      	mov	r0, r4
 8007270:	f000 fbaa 	bl	80079c8 <__pow5mult>
 8007274:	9a04      	ldr	r2, [sp, #16]
 8007276:	4601      	mov	r1, r0
 8007278:	4606      	mov	r6, r0
 800727a:	4620      	mov	r0, r4
 800727c:	f000 fb0e 	bl	800789c <__multiply>
 8007280:	9904      	ldr	r1, [sp, #16]
 8007282:	9008      	str	r0, [sp, #32]
 8007284:	4620      	mov	r0, r4
 8007286:	f000 fa60 	bl	800774a <_Bfree>
 800728a:	9b08      	ldr	r3, [sp, #32]
 800728c:	9304      	str	r3, [sp, #16]
 800728e:	9b07      	ldr	r3, [sp, #28]
 8007290:	1bda      	subs	r2, r3, r7
 8007292:	d004      	beq.n	800729e <_dtoa_r+0x76e>
 8007294:	9904      	ldr	r1, [sp, #16]
 8007296:	4620      	mov	r0, r4
 8007298:	f000 fb96 	bl	80079c8 <__pow5mult>
 800729c:	9004      	str	r0, [sp, #16]
 800729e:	2101      	movs	r1, #1
 80072a0:	4620      	mov	r0, r4
 80072a2:	f000 faf2 	bl	800788a <__i2b>
 80072a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072a8:	4607      	mov	r7, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 81d0 	beq.w	8007650 <_dtoa_r+0xb20>
 80072b0:	461a      	mov	r2, r3
 80072b2:	4601      	mov	r1, r0
 80072b4:	4620      	mov	r0, r4
 80072b6:	f000 fb87 	bl	80079c8 <__pow5mult>
 80072ba:	9b06      	ldr	r3, [sp, #24]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	4607      	mov	r7, r0
 80072c0:	dc40      	bgt.n	8007344 <_dtoa_r+0x814>
 80072c2:	9b00      	ldr	r3, [sp, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d139      	bne.n	800733c <_dtoa_r+0x80c>
 80072c8:	9b01      	ldr	r3, [sp, #4]
 80072ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d136      	bne.n	8007340 <_dtoa_r+0x810>
 80072d2:	9b01      	ldr	r3, [sp, #4]
 80072d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072d8:	0d1b      	lsrs	r3, r3, #20
 80072da:	051b      	lsls	r3, r3, #20
 80072dc:	b12b      	cbz	r3, 80072ea <_dtoa_r+0x7ba>
 80072de:	9b05      	ldr	r3, [sp, #20]
 80072e0:	3301      	adds	r3, #1
 80072e2:	9305      	str	r3, [sp, #20]
 80072e4:	f108 0801 	add.w	r8, r8, #1
 80072e8:	2301      	movs	r3, #1
 80072ea:	9307      	str	r3, [sp, #28]
 80072ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d12a      	bne.n	8007348 <_dtoa_r+0x818>
 80072f2:	2001      	movs	r0, #1
 80072f4:	e030      	b.n	8007358 <_dtoa_r+0x828>
 80072f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072fc:	e795      	b.n	800722a <_dtoa_r+0x6fa>
 80072fe:	9b07      	ldr	r3, [sp, #28]
 8007300:	f109 37ff 	add.w	r7, r9, #4294967295
 8007304:	42bb      	cmp	r3, r7
 8007306:	bfbf      	itttt	lt
 8007308:	9b07      	ldrlt	r3, [sp, #28]
 800730a:	9707      	strlt	r7, [sp, #28]
 800730c:	1afa      	sublt	r2, r7, r3
 800730e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007310:	bfbb      	ittet	lt
 8007312:	189b      	addlt	r3, r3, r2
 8007314:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007316:	1bdf      	subge	r7, r3, r7
 8007318:	2700      	movlt	r7, #0
 800731a:	f1b9 0f00 	cmp.w	r9, #0
 800731e:	bfb5      	itete	lt
 8007320:	9b05      	ldrlt	r3, [sp, #20]
 8007322:	9d05      	ldrge	r5, [sp, #20]
 8007324:	eba3 0509 	sublt.w	r5, r3, r9
 8007328:	464b      	movge	r3, r9
 800732a:	bfb8      	it	lt
 800732c:	2300      	movlt	r3, #0
 800732e:	e77e      	b.n	800722e <_dtoa_r+0x6fe>
 8007330:	9f07      	ldr	r7, [sp, #28]
 8007332:	9d05      	ldr	r5, [sp, #20]
 8007334:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007336:	e783      	b.n	8007240 <_dtoa_r+0x710>
 8007338:	9a07      	ldr	r2, [sp, #28]
 800733a:	e7ab      	b.n	8007294 <_dtoa_r+0x764>
 800733c:	2300      	movs	r3, #0
 800733e:	e7d4      	b.n	80072ea <_dtoa_r+0x7ba>
 8007340:	9b00      	ldr	r3, [sp, #0]
 8007342:	e7d2      	b.n	80072ea <_dtoa_r+0x7ba>
 8007344:	2300      	movs	r3, #0
 8007346:	9307      	str	r3, [sp, #28]
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800734e:	6918      	ldr	r0, [r3, #16]
 8007350:	f000 fa4d 	bl	80077ee <__hi0bits>
 8007354:	f1c0 0020 	rsb	r0, r0, #32
 8007358:	4440      	add	r0, r8
 800735a:	f010 001f 	ands.w	r0, r0, #31
 800735e:	d047      	beq.n	80073f0 <_dtoa_r+0x8c0>
 8007360:	f1c0 0320 	rsb	r3, r0, #32
 8007364:	2b04      	cmp	r3, #4
 8007366:	dd3b      	ble.n	80073e0 <_dtoa_r+0x8b0>
 8007368:	9b05      	ldr	r3, [sp, #20]
 800736a:	f1c0 001c 	rsb	r0, r0, #28
 800736e:	4403      	add	r3, r0
 8007370:	9305      	str	r3, [sp, #20]
 8007372:	4405      	add	r5, r0
 8007374:	4480      	add	r8, r0
 8007376:	9b05      	ldr	r3, [sp, #20]
 8007378:	2b00      	cmp	r3, #0
 800737a:	dd05      	ble.n	8007388 <_dtoa_r+0x858>
 800737c:	461a      	mov	r2, r3
 800737e:	9904      	ldr	r1, [sp, #16]
 8007380:	4620      	mov	r0, r4
 8007382:	f000 fb6f 	bl	8007a64 <__lshift>
 8007386:	9004      	str	r0, [sp, #16]
 8007388:	f1b8 0f00 	cmp.w	r8, #0
 800738c:	dd05      	ble.n	800739a <_dtoa_r+0x86a>
 800738e:	4639      	mov	r1, r7
 8007390:	4642      	mov	r2, r8
 8007392:	4620      	mov	r0, r4
 8007394:	f000 fb66 	bl	8007a64 <__lshift>
 8007398:	4607      	mov	r7, r0
 800739a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800739c:	b353      	cbz	r3, 80073f4 <_dtoa_r+0x8c4>
 800739e:	4639      	mov	r1, r7
 80073a0:	9804      	ldr	r0, [sp, #16]
 80073a2:	f000 fbb3 	bl	8007b0c <__mcmp>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	da24      	bge.n	80073f4 <_dtoa_r+0x8c4>
 80073aa:	2300      	movs	r3, #0
 80073ac:	220a      	movs	r2, #10
 80073ae:	9904      	ldr	r1, [sp, #16]
 80073b0:	4620      	mov	r0, r4
 80073b2:	f000 f9e1 	bl	8007778 <__multadd>
 80073b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b8:	9004      	str	r0, [sp, #16]
 80073ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 814d 	beq.w	800765e <_dtoa_r+0xb2e>
 80073c4:	2300      	movs	r3, #0
 80073c6:	4631      	mov	r1, r6
 80073c8:	220a      	movs	r2, #10
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 f9d4 	bl	8007778 <__multadd>
 80073d0:	9b02      	ldr	r3, [sp, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	4606      	mov	r6, r0
 80073d6:	dc4f      	bgt.n	8007478 <_dtoa_r+0x948>
 80073d8:	9b06      	ldr	r3, [sp, #24]
 80073da:	2b02      	cmp	r3, #2
 80073dc:	dd4c      	ble.n	8007478 <_dtoa_r+0x948>
 80073de:	e011      	b.n	8007404 <_dtoa_r+0x8d4>
 80073e0:	d0c9      	beq.n	8007376 <_dtoa_r+0x846>
 80073e2:	9a05      	ldr	r2, [sp, #20]
 80073e4:	331c      	adds	r3, #28
 80073e6:	441a      	add	r2, r3
 80073e8:	9205      	str	r2, [sp, #20]
 80073ea:	441d      	add	r5, r3
 80073ec:	4498      	add	r8, r3
 80073ee:	e7c2      	b.n	8007376 <_dtoa_r+0x846>
 80073f0:	4603      	mov	r3, r0
 80073f2:	e7f6      	b.n	80073e2 <_dtoa_r+0x8b2>
 80073f4:	f1b9 0f00 	cmp.w	r9, #0
 80073f8:	dc38      	bgt.n	800746c <_dtoa_r+0x93c>
 80073fa:	9b06      	ldr	r3, [sp, #24]
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	dd35      	ble.n	800746c <_dtoa_r+0x93c>
 8007400:	f8cd 9008 	str.w	r9, [sp, #8]
 8007404:	9b02      	ldr	r3, [sp, #8]
 8007406:	b963      	cbnz	r3, 8007422 <_dtoa_r+0x8f2>
 8007408:	4639      	mov	r1, r7
 800740a:	2205      	movs	r2, #5
 800740c:	4620      	mov	r0, r4
 800740e:	f000 f9b3 	bl	8007778 <__multadd>
 8007412:	4601      	mov	r1, r0
 8007414:	4607      	mov	r7, r0
 8007416:	9804      	ldr	r0, [sp, #16]
 8007418:	f000 fb78 	bl	8007b0c <__mcmp>
 800741c:	2800      	cmp	r0, #0
 800741e:	f73f adcc 	bgt.w	8006fba <_dtoa_r+0x48a>
 8007422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007424:	465d      	mov	r5, fp
 8007426:	ea6f 0a03 	mvn.w	sl, r3
 800742a:	f04f 0900 	mov.w	r9, #0
 800742e:	4639      	mov	r1, r7
 8007430:	4620      	mov	r0, r4
 8007432:	f000 f98a 	bl	800774a <_Bfree>
 8007436:	2e00      	cmp	r6, #0
 8007438:	f43f aeb7 	beq.w	80071aa <_dtoa_r+0x67a>
 800743c:	f1b9 0f00 	cmp.w	r9, #0
 8007440:	d005      	beq.n	800744e <_dtoa_r+0x91e>
 8007442:	45b1      	cmp	r9, r6
 8007444:	d003      	beq.n	800744e <_dtoa_r+0x91e>
 8007446:	4649      	mov	r1, r9
 8007448:	4620      	mov	r0, r4
 800744a:	f000 f97e 	bl	800774a <_Bfree>
 800744e:	4631      	mov	r1, r6
 8007450:	4620      	mov	r0, r4
 8007452:	f000 f97a 	bl	800774a <_Bfree>
 8007456:	e6a8      	b.n	80071aa <_dtoa_r+0x67a>
 8007458:	2700      	movs	r7, #0
 800745a:	463e      	mov	r6, r7
 800745c:	e7e1      	b.n	8007422 <_dtoa_r+0x8f2>
 800745e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007462:	463e      	mov	r6, r7
 8007464:	e5a9      	b.n	8006fba <_dtoa_r+0x48a>
 8007466:	bf00      	nop
 8007468:	40240000 	.word	0x40240000
 800746c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800746e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 80fa 	beq.w	800766c <_dtoa_r+0xb3c>
 8007478:	2d00      	cmp	r5, #0
 800747a:	dd05      	ble.n	8007488 <_dtoa_r+0x958>
 800747c:	4631      	mov	r1, r6
 800747e:	462a      	mov	r2, r5
 8007480:	4620      	mov	r0, r4
 8007482:	f000 faef 	bl	8007a64 <__lshift>
 8007486:	4606      	mov	r6, r0
 8007488:	9b07      	ldr	r3, [sp, #28]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d04c      	beq.n	8007528 <_dtoa_r+0x9f8>
 800748e:	6871      	ldr	r1, [r6, #4]
 8007490:	4620      	mov	r0, r4
 8007492:	f000 f926 	bl	80076e2 <_Balloc>
 8007496:	6932      	ldr	r2, [r6, #16]
 8007498:	3202      	adds	r2, #2
 800749a:	4605      	mov	r5, r0
 800749c:	0092      	lsls	r2, r2, #2
 800749e:	f106 010c 	add.w	r1, r6, #12
 80074a2:	300c      	adds	r0, #12
 80074a4:	f000 f912 	bl	80076cc <memcpy>
 80074a8:	2201      	movs	r2, #1
 80074aa:	4629      	mov	r1, r5
 80074ac:	4620      	mov	r0, r4
 80074ae:	f000 fad9 	bl	8007a64 <__lshift>
 80074b2:	9b00      	ldr	r3, [sp, #0]
 80074b4:	f8cd b014 	str.w	fp, [sp, #20]
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	46b1      	mov	r9, r6
 80074be:	9307      	str	r3, [sp, #28]
 80074c0:	4606      	mov	r6, r0
 80074c2:	4639      	mov	r1, r7
 80074c4:	9804      	ldr	r0, [sp, #16]
 80074c6:	f7ff faa4 	bl	8006a12 <quorem>
 80074ca:	4649      	mov	r1, r9
 80074cc:	4605      	mov	r5, r0
 80074ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80074d2:	9804      	ldr	r0, [sp, #16]
 80074d4:	f000 fb1a 	bl	8007b0c <__mcmp>
 80074d8:	4632      	mov	r2, r6
 80074da:	9000      	str	r0, [sp, #0]
 80074dc:	4639      	mov	r1, r7
 80074de:	4620      	mov	r0, r4
 80074e0:	f000 fb2e 	bl	8007b40 <__mdiff>
 80074e4:	68c3      	ldr	r3, [r0, #12]
 80074e6:	4602      	mov	r2, r0
 80074e8:	bb03      	cbnz	r3, 800752c <_dtoa_r+0x9fc>
 80074ea:	4601      	mov	r1, r0
 80074ec:	9008      	str	r0, [sp, #32]
 80074ee:	9804      	ldr	r0, [sp, #16]
 80074f0:	f000 fb0c 	bl	8007b0c <__mcmp>
 80074f4:	9a08      	ldr	r2, [sp, #32]
 80074f6:	4603      	mov	r3, r0
 80074f8:	4611      	mov	r1, r2
 80074fa:	4620      	mov	r0, r4
 80074fc:	9308      	str	r3, [sp, #32]
 80074fe:	f000 f924 	bl	800774a <_Bfree>
 8007502:	9b08      	ldr	r3, [sp, #32]
 8007504:	b9a3      	cbnz	r3, 8007530 <_dtoa_r+0xa00>
 8007506:	9a06      	ldr	r2, [sp, #24]
 8007508:	b992      	cbnz	r2, 8007530 <_dtoa_r+0xa00>
 800750a:	9a07      	ldr	r2, [sp, #28]
 800750c:	b982      	cbnz	r2, 8007530 <_dtoa_r+0xa00>
 800750e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007512:	d029      	beq.n	8007568 <_dtoa_r+0xa38>
 8007514:	9b00      	ldr	r3, [sp, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	dd01      	ble.n	800751e <_dtoa_r+0x9ee>
 800751a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800751e:	9b05      	ldr	r3, [sp, #20]
 8007520:	1c5d      	adds	r5, r3, #1
 8007522:	f883 8000 	strb.w	r8, [r3]
 8007526:	e782      	b.n	800742e <_dtoa_r+0x8fe>
 8007528:	4630      	mov	r0, r6
 800752a:	e7c2      	b.n	80074b2 <_dtoa_r+0x982>
 800752c:	2301      	movs	r3, #1
 800752e:	e7e3      	b.n	80074f8 <_dtoa_r+0x9c8>
 8007530:	9a00      	ldr	r2, [sp, #0]
 8007532:	2a00      	cmp	r2, #0
 8007534:	db04      	blt.n	8007540 <_dtoa_r+0xa10>
 8007536:	d125      	bne.n	8007584 <_dtoa_r+0xa54>
 8007538:	9a06      	ldr	r2, [sp, #24]
 800753a:	bb1a      	cbnz	r2, 8007584 <_dtoa_r+0xa54>
 800753c:	9a07      	ldr	r2, [sp, #28]
 800753e:	bb0a      	cbnz	r2, 8007584 <_dtoa_r+0xa54>
 8007540:	2b00      	cmp	r3, #0
 8007542:	ddec      	ble.n	800751e <_dtoa_r+0x9ee>
 8007544:	2201      	movs	r2, #1
 8007546:	9904      	ldr	r1, [sp, #16]
 8007548:	4620      	mov	r0, r4
 800754a:	f000 fa8b 	bl	8007a64 <__lshift>
 800754e:	4639      	mov	r1, r7
 8007550:	9004      	str	r0, [sp, #16]
 8007552:	f000 fadb 	bl	8007b0c <__mcmp>
 8007556:	2800      	cmp	r0, #0
 8007558:	dc03      	bgt.n	8007562 <_dtoa_r+0xa32>
 800755a:	d1e0      	bne.n	800751e <_dtoa_r+0x9ee>
 800755c:	f018 0f01 	tst.w	r8, #1
 8007560:	d0dd      	beq.n	800751e <_dtoa_r+0x9ee>
 8007562:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007566:	d1d8      	bne.n	800751a <_dtoa_r+0x9ea>
 8007568:	9b05      	ldr	r3, [sp, #20]
 800756a:	9a05      	ldr	r2, [sp, #20]
 800756c:	1c5d      	adds	r5, r3, #1
 800756e:	2339      	movs	r3, #57	; 0x39
 8007570:	7013      	strb	r3, [r2, #0]
 8007572:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007576:	2b39      	cmp	r3, #57	; 0x39
 8007578:	f105 32ff 	add.w	r2, r5, #4294967295
 800757c:	d04f      	beq.n	800761e <_dtoa_r+0xaee>
 800757e:	3301      	adds	r3, #1
 8007580:	7013      	strb	r3, [r2, #0]
 8007582:	e754      	b.n	800742e <_dtoa_r+0x8fe>
 8007584:	9a05      	ldr	r2, [sp, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f102 0501 	add.w	r5, r2, #1
 800758c:	dd06      	ble.n	800759c <_dtoa_r+0xa6c>
 800758e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007592:	d0e9      	beq.n	8007568 <_dtoa_r+0xa38>
 8007594:	f108 0801 	add.w	r8, r8, #1
 8007598:	9b05      	ldr	r3, [sp, #20]
 800759a:	e7c2      	b.n	8007522 <_dtoa_r+0x9f2>
 800759c:	9a02      	ldr	r2, [sp, #8]
 800759e:	f805 8c01 	strb.w	r8, [r5, #-1]
 80075a2:	eba5 030b 	sub.w	r3, r5, fp
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d021      	beq.n	80075ee <_dtoa_r+0xabe>
 80075aa:	2300      	movs	r3, #0
 80075ac:	220a      	movs	r2, #10
 80075ae:	9904      	ldr	r1, [sp, #16]
 80075b0:	4620      	mov	r0, r4
 80075b2:	f000 f8e1 	bl	8007778 <__multadd>
 80075b6:	45b1      	cmp	r9, r6
 80075b8:	9004      	str	r0, [sp, #16]
 80075ba:	f04f 0300 	mov.w	r3, #0
 80075be:	f04f 020a 	mov.w	r2, #10
 80075c2:	4649      	mov	r1, r9
 80075c4:	4620      	mov	r0, r4
 80075c6:	d105      	bne.n	80075d4 <_dtoa_r+0xaa4>
 80075c8:	f000 f8d6 	bl	8007778 <__multadd>
 80075cc:	4681      	mov	r9, r0
 80075ce:	4606      	mov	r6, r0
 80075d0:	9505      	str	r5, [sp, #20]
 80075d2:	e776      	b.n	80074c2 <_dtoa_r+0x992>
 80075d4:	f000 f8d0 	bl	8007778 <__multadd>
 80075d8:	4631      	mov	r1, r6
 80075da:	4681      	mov	r9, r0
 80075dc:	2300      	movs	r3, #0
 80075de:	220a      	movs	r2, #10
 80075e0:	4620      	mov	r0, r4
 80075e2:	f000 f8c9 	bl	8007778 <__multadd>
 80075e6:	4606      	mov	r6, r0
 80075e8:	e7f2      	b.n	80075d0 <_dtoa_r+0xaa0>
 80075ea:	f04f 0900 	mov.w	r9, #0
 80075ee:	2201      	movs	r2, #1
 80075f0:	9904      	ldr	r1, [sp, #16]
 80075f2:	4620      	mov	r0, r4
 80075f4:	f000 fa36 	bl	8007a64 <__lshift>
 80075f8:	4639      	mov	r1, r7
 80075fa:	9004      	str	r0, [sp, #16]
 80075fc:	f000 fa86 	bl	8007b0c <__mcmp>
 8007600:	2800      	cmp	r0, #0
 8007602:	dcb6      	bgt.n	8007572 <_dtoa_r+0xa42>
 8007604:	d102      	bne.n	800760c <_dtoa_r+0xadc>
 8007606:	f018 0f01 	tst.w	r8, #1
 800760a:	d1b2      	bne.n	8007572 <_dtoa_r+0xa42>
 800760c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007610:	2b30      	cmp	r3, #48	; 0x30
 8007612:	f105 32ff 	add.w	r2, r5, #4294967295
 8007616:	f47f af0a 	bne.w	800742e <_dtoa_r+0x8fe>
 800761a:	4615      	mov	r5, r2
 800761c:	e7f6      	b.n	800760c <_dtoa_r+0xadc>
 800761e:	4593      	cmp	fp, r2
 8007620:	d105      	bne.n	800762e <_dtoa_r+0xafe>
 8007622:	2331      	movs	r3, #49	; 0x31
 8007624:	f10a 0a01 	add.w	sl, sl, #1
 8007628:	f88b 3000 	strb.w	r3, [fp]
 800762c:	e6ff      	b.n	800742e <_dtoa_r+0x8fe>
 800762e:	4615      	mov	r5, r2
 8007630:	e79f      	b.n	8007572 <_dtoa_r+0xa42>
 8007632:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007698 <_dtoa_r+0xb68>
 8007636:	e007      	b.n	8007648 <_dtoa_r+0xb18>
 8007638:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800763a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800769c <_dtoa_r+0xb6c>
 800763e:	b11b      	cbz	r3, 8007648 <_dtoa_r+0xb18>
 8007640:	f10b 0308 	add.w	r3, fp, #8
 8007644:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	4658      	mov	r0, fp
 800764a:	b017      	add	sp, #92	; 0x5c
 800764c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007650:	9b06      	ldr	r3, [sp, #24]
 8007652:	2b01      	cmp	r3, #1
 8007654:	f77f ae35 	ble.w	80072c2 <_dtoa_r+0x792>
 8007658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800765a:	9307      	str	r3, [sp, #28]
 800765c:	e649      	b.n	80072f2 <_dtoa_r+0x7c2>
 800765e:	9b02      	ldr	r3, [sp, #8]
 8007660:	2b00      	cmp	r3, #0
 8007662:	dc03      	bgt.n	800766c <_dtoa_r+0xb3c>
 8007664:	9b06      	ldr	r3, [sp, #24]
 8007666:	2b02      	cmp	r3, #2
 8007668:	f73f aecc 	bgt.w	8007404 <_dtoa_r+0x8d4>
 800766c:	465d      	mov	r5, fp
 800766e:	4639      	mov	r1, r7
 8007670:	9804      	ldr	r0, [sp, #16]
 8007672:	f7ff f9ce 	bl	8006a12 <quorem>
 8007676:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800767a:	f805 8b01 	strb.w	r8, [r5], #1
 800767e:	9a02      	ldr	r2, [sp, #8]
 8007680:	eba5 030b 	sub.w	r3, r5, fp
 8007684:	429a      	cmp	r2, r3
 8007686:	ddb0      	ble.n	80075ea <_dtoa_r+0xaba>
 8007688:	2300      	movs	r3, #0
 800768a:	220a      	movs	r2, #10
 800768c:	9904      	ldr	r1, [sp, #16]
 800768e:	4620      	mov	r0, r4
 8007690:	f000 f872 	bl	8007778 <__multadd>
 8007694:	9004      	str	r0, [sp, #16]
 8007696:	e7ea      	b.n	800766e <_dtoa_r+0xb3e>
 8007698:	08007e40 	.word	0x08007e40
 800769c:	08007e42 	.word	0x08007e42

080076a0 <_localeconv_r>:
 80076a0:	4b04      	ldr	r3, [pc, #16]	; (80076b4 <_localeconv_r+0x14>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6a18      	ldr	r0, [r3, #32]
 80076a6:	4b04      	ldr	r3, [pc, #16]	; (80076b8 <_localeconv_r+0x18>)
 80076a8:	2800      	cmp	r0, #0
 80076aa:	bf08      	it	eq
 80076ac:	4618      	moveq	r0, r3
 80076ae:	30f0      	adds	r0, #240	; 0xf0
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	2000000c 	.word	0x2000000c
 80076b8:	20000070 	.word	0x20000070

080076bc <malloc>:
 80076bc:	4b02      	ldr	r3, [pc, #8]	; (80076c8 <malloc+0xc>)
 80076be:	4601      	mov	r1, r0
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	f000 baf7 	b.w	8007cb4 <_malloc_r>
 80076c6:	bf00      	nop
 80076c8:	2000000c 	.word	0x2000000c

080076cc <memcpy>:
 80076cc:	b510      	push	{r4, lr}
 80076ce:	1e43      	subs	r3, r0, #1
 80076d0:	440a      	add	r2, r1
 80076d2:	4291      	cmp	r1, r2
 80076d4:	d100      	bne.n	80076d8 <memcpy+0xc>
 80076d6:	bd10      	pop	{r4, pc}
 80076d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076e0:	e7f7      	b.n	80076d2 <memcpy+0x6>

080076e2 <_Balloc>:
 80076e2:	b570      	push	{r4, r5, r6, lr}
 80076e4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80076e6:	4604      	mov	r4, r0
 80076e8:	460e      	mov	r6, r1
 80076ea:	b93d      	cbnz	r5, 80076fc <_Balloc+0x1a>
 80076ec:	2010      	movs	r0, #16
 80076ee:	f7ff ffe5 	bl	80076bc <malloc>
 80076f2:	6260      	str	r0, [r4, #36]	; 0x24
 80076f4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076f8:	6005      	str	r5, [r0, #0]
 80076fa:	60c5      	str	r5, [r0, #12]
 80076fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80076fe:	68eb      	ldr	r3, [r5, #12]
 8007700:	b183      	cbz	r3, 8007724 <_Balloc+0x42>
 8007702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800770a:	b9b8      	cbnz	r0, 800773c <_Balloc+0x5a>
 800770c:	2101      	movs	r1, #1
 800770e:	fa01 f506 	lsl.w	r5, r1, r6
 8007712:	1d6a      	adds	r2, r5, #5
 8007714:	0092      	lsls	r2, r2, #2
 8007716:	4620      	mov	r0, r4
 8007718:	f000 fabe 	bl	8007c98 <_calloc_r>
 800771c:	b160      	cbz	r0, 8007738 <_Balloc+0x56>
 800771e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007722:	e00e      	b.n	8007742 <_Balloc+0x60>
 8007724:	2221      	movs	r2, #33	; 0x21
 8007726:	2104      	movs	r1, #4
 8007728:	4620      	mov	r0, r4
 800772a:	f000 fab5 	bl	8007c98 <_calloc_r>
 800772e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007730:	60e8      	str	r0, [r5, #12]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1e4      	bne.n	8007702 <_Balloc+0x20>
 8007738:	2000      	movs	r0, #0
 800773a:	bd70      	pop	{r4, r5, r6, pc}
 800773c:	6802      	ldr	r2, [r0, #0]
 800773e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007742:	2300      	movs	r3, #0
 8007744:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007748:	e7f7      	b.n	800773a <_Balloc+0x58>

0800774a <_Bfree>:
 800774a:	b570      	push	{r4, r5, r6, lr}
 800774c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800774e:	4606      	mov	r6, r0
 8007750:	460d      	mov	r5, r1
 8007752:	b93c      	cbnz	r4, 8007764 <_Bfree+0x1a>
 8007754:	2010      	movs	r0, #16
 8007756:	f7ff ffb1 	bl	80076bc <malloc>
 800775a:	6270      	str	r0, [r6, #36]	; 0x24
 800775c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007760:	6004      	str	r4, [r0, #0]
 8007762:	60c4      	str	r4, [r0, #12]
 8007764:	b13d      	cbz	r5, 8007776 <_Bfree+0x2c>
 8007766:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007768:	686a      	ldr	r2, [r5, #4]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007770:	6029      	str	r1, [r5, #0]
 8007772:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007776:	bd70      	pop	{r4, r5, r6, pc}

08007778 <__multadd>:
 8007778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800777c:	690d      	ldr	r5, [r1, #16]
 800777e:	461f      	mov	r7, r3
 8007780:	4606      	mov	r6, r0
 8007782:	460c      	mov	r4, r1
 8007784:	f101 0c14 	add.w	ip, r1, #20
 8007788:	2300      	movs	r3, #0
 800778a:	f8dc 0000 	ldr.w	r0, [ip]
 800778e:	b281      	uxth	r1, r0
 8007790:	fb02 7101 	mla	r1, r2, r1, r7
 8007794:	0c0f      	lsrs	r7, r1, #16
 8007796:	0c00      	lsrs	r0, r0, #16
 8007798:	fb02 7000 	mla	r0, r2, r0, r7
 800779c:	b289      	uxth	r1, r1
 800779e:	3301      	adds	r3, #1
 80077a0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80077a4:	429d      	cmp	r5, r3
 80077a6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80077aa:	f84c 1b04 	str.w	r1, [ip], #4
 80077ae:	dcec      	bgt.n	800778a <__multadd+0x12>
 80077b0:	b1d7      	cbz	r7, 80077e8 <__multadd+0x70>
 80077b2:	68a3      	ldr	r3, [r4, #8]
 80077b4:	42ab      	cmp	r3, r5
 80077b6:	dc12      	bgt.n	80077de <__multadd+0x66>
 80077b8:	6861      	ldr	r1, [r4, #4]
 80077ba:	4630      	mov	r0, r6
 80077bc:	3101      	adds	r1, #1
 80077be:	f7ff ff90 	bl	80076e2 <_Balloc>
 80077c2:	6922      	ldr	r2, [r4, #16]
 80077c4:	3202      	adds	r2, #2
 80077c6:	f104 010c 	add.w	r1, r4, #12
 80077ca:	4680      	mov	r8, r0
 80077cc:	0092      	lsls	r2, r2, #2
 80077ce:	300c      	adds	r0, #12
 80077d0:	f7ff ff7c 	bl	80076cc <memcpy>
 80077d4:	4621      	mov	r1, r4
 80077d6:	4630      	mov	r0, r6
 80077d8:	f7ff ffb7 	bl	800774a <_Bfree>
 80077dc:	4644      	mov	r4, r8
 80077de:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077e2:	3501      	adds	r5, #1
 80077e4:	615f      	str	r7, [r3, #20]
 80077e6:	6125      	str	r5, [r4, #16]
 80077e8:	4620      	mov	r0, r4
 80077ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080077ee <__hi0bits>:
 80077ee:	0c02      	lsrs	r2, r0, #16
 80077f0:	0412      	lsls	r2, r2, #16
 80077f2:	4603      	mov	r3, r0
 80077f4:	b9b2      	cbnz	r2, 8007824 <__hi0bits+0x36>
 80077f6:	0403      	lsls	r3, r0, #16
 80077f8:	2010      	movs	r0, #16
 80077fa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80077fe:	bf04      	itt	eq
 8007800:	021b      	lsleq	r3, r3, #8
 8007802:	3008      	addeq	r0, #8
 8007804:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007808:	bf04      	itt	eq
 800780a:	011b      	lsleq	r3, r3, #4
 800780c:	3004      	addeq	r0, #4
 800780e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007812:	bf04      	itt	eq
 8007814:	009b      	lsleq	r3, r3, #2
 8007816:	3002      	addeq	r0, #2
 8007818:	2b00      	cmp	r3, #0
 800781a:	db06      	blt.n	800782a <__hi0bits+0x3c>
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	d503      	bpl.n	8007828 <__hi0bits+0x3a>
 8007820:	3001      	adds	r0, #1
 8007822:	4770      	bx	lr
 8007824:	2000      	movs	r0, #0
 8007826:	e7e8      	b.n	80077fa <__hi0bits+0xc>
 8007828:	2020      	movs	r0, #32
 800782a:	4770      	bx	lr

0800782c <__lo0bits>:
 800782c:	6803      	ldr	r3, [r0, #0]
 800782e:	f013 0207 	ands.w	r2, r3, #7
 8007832:	4601      	mov	r1, r0
 8007834:	d00b      	beq.n	800784e <__lo0bits+0x22>
 8007836:	07da      	lsls	r2, r3, #31
 8007838:	d423      	bmi.n	8007882 <__lo0bits+0x56>
 800783a:	0798      	lsls	r0, r3, #30
 800783c:	bf49      	itett	mi
 800783e:	085b      	lsrmi	r3, r3, #1
 8007840:	089b      	lsrpl	r3, r3, #2
 8007842:	2001      	movmi	r0, #1
 8007844:	600b      	strmi	r3, [r1, #0]
 8007846:	bf5c      	itt	pl
 8007848:	600b      	strpl	r3, [r1, #0]
 800784a:	2002      	movpl	r0, #2
 800784c:	4770      	bx	lr
 800784e:	b298      	uxth	r0, r3
 8007850:	b9a8      	cbnz	r0, 800787e <__lo0bits+0x52>
 8007852:	0c1b      	lsrs	r3, r3, #16
 8007854:	2010      	movs	r0, #16
 8007856:	f013 0fff 	tst.w	r3, #255	; 0xff
 800785a:	bf04      	itt	eq
 800785c:	0a1b      	lsreq	r3, r3, #8
 800785e:	3008      	addeq	r0, #8
 8007860:	071a      	lsls	r2, r3, #28
 8007862:	bf04      	itt	eq
 8007864:	091b      	lsreq	r3, r3, #4
 8007866:	3004      	addeq	r0, #4
 8007868:	079a      	lsls	r2, r3, #30
 800786a:	bf04      	itt	eq
 800786c:	089b      	lsreq	r3, r3, #2
 800786e:	3002      	addeq	r0, #2
 8007870:	07da      	lsls	r2, r3, #31
 8007872:	d402      	bmi.n	800787a <__lo0bits+0x4e>
 8007874:	085b      	lsrs	r3, r3, #1
 8007876:	d006      	beq.n	8007886 <__lo0bits+0x5a>
 8007878:	3001      	adds	r0, #1
 800787a:	600b      	str	r3, [r1, #0]
 800787c:	4770      	bx	lr
 800787e:	4610      	mov	r0, r2
 8007880:	e7e9      	b.n	8007856 <__lo0bits+0x2a>
 8007882:	2000      	movs	r0, #0
 8007884:	4770      	bx	lr
 8007886:	2020      	movs	r0, #32
 8007888:	4770      	bx	lr

0800788a <__i2b>:
 800788a:	b510      	push	{r4, lr}
 800788c:	460c      	mov	r4, r1
 800788e:	2101      	movs	r1, #1
 8007890:	f7ff ff27 	bl	80076e2 <_Balloc>
 8007894:	2201      	movs	r2, #1
 8007896:	6144      	str	r4, [r0, #20]
 8007898:	6102      	str	r2, [r0, #16]
 800789a:	bd10      	pop	{r4, pc}

0800789c <__multiply>:
 800789c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a0:	4614      	mov	r4, r2
 80078a2:	690a      	ldr	r2, [r1, #16]
 80078a4:	6923      	ldr	r3, [r4, #16]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	bfb8      	it	lt
 80078aa:	460b      	movlt	r3, r1
 80078ac:	4688      	mov	r8, r1
 80078ae:	bfbc      	itt	lt
 80078b0:	46a0      	movlt	r8, r4
 80078b2:	461c      	movlt	r4, r3
 80078b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80078b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80078bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80078c4:	eb07 0609 	add.w	r6, r7, r9
 80078c8:	42b3      	cmp	r3, r6
 80078ca:	bfb8      	it	lt
 80078cc:	3101      	addlt	r1, #1
 80078ce:	f7ff ff08 	bl	80076e2 <_Balloc>
 80078d2:	f100 0514 	add.w	r5, r0, #20
 80078d6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80078da:	462b      	mov	r3, r5
 80078dc:	2200      	movs	r2, #0
 80078de:	4573      	cmp	r3, lr
 80078e0:	d316      	bcc.n	8007910 <__multiply+0x74>
 80078e2:	f104 0214 	add.w	r2, r4, #20
 80078e6:	f108 0114 	add.w	r1, r8, #20
 80078ea:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80078ee:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	9b00      	ldr	r3, [sp, #0]
 80078f6:	9201      	str	r2, [sp, #4]
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d80c      	bhi.n	8007916 <__multiply+0x7a>
 80078fc:	2e00      	cmp	r6, #0
 80078fe:	dd03      	ble.n	8007908 <__multiply+0x6c>
 8007900:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007904:	2b00      	cmp	r3, #0
 8007906:	d05d      	beq.n	80079c4 <__multiply+0x128>
 8007908:	6106      	str	r6, [r0, #16]
 800790a:	b003      	add	sp, #12
 800790c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007910:	f843 2b04 	str.w	r2, [r3], #4
 8007914:	e7e3      	b.n	80078de <__multiply+0x42>
 8007916:	f8b2 b000 	ldrh.w	fp, [r2]
 800791a:	f1bb 0f00 	cmp.w	fp, #0
 800791e:	d023      	beq.n	8007968 <__multiply+0xcc>
 8007920:	4689      	mov	r9, r1
 8007922:	46ac      	mov	ip, r5
 8007924:	f04f 0800 	mov.w	r8, #0
 8007928:	f859 4b04 	ldr.w	r4, [r9], #4
 800792c:	f8dc a000 	ldr.w	sl, [ip]
 8007930:	b2a3      	uxth	r3, r4
 8007932:	fa1f fa8a 	uxth.w	sl, sl
 8007936:	fb0b a303 	mla	r3, fp, r3, sl
 800793a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800793e:	f8dc 4000 	ldr.w	r4, [ip]
 8007942:	4443      	add	r3, r8
 8007944:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007948:	fb0b 840a 	mla	r4, fp, sl, r8
 800794c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007950:	46e2      	mov	sl, ip
 8007952:	b29b      	uxth	r3, r3
 8007954:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007958:	454f      	cmp	r7, r9
 800795a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800795e:	f84a 3b04 	str.w	r3, [sl], #4
 8007962:	d82b      	bhi.n	80079bc <__multiply+0x120>
 8007964:	f8cc 8004 	str.w	r8, [ip, #4]
 8007968:	9b01      	ldr	r3, [sp, #4]
 800796a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800796e:	3204      	adds	r2, #4
 8007970:	f1ba 0f00 	cmp.w	sl, #0
 8007974:	d020      	beq.n	80079b8 <__multiply+0x11c>
 8007976:	682b      	ldr	r3, [r5, #0]
 8007978:	4689      	mov	r9, r1
 800797a:	46a8      	mov	r8, r5
 800797c:	f04f 0b00 	mov.w	fp, #0
 8007980:	f8b9 c000 	ldrh.w	ip, [r9]
 8007984:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007988:	fb0a 440c 	mla	r4, sl, ip, r4
 800798c:	445c      	add	r4, fp
 800798e:	46c4      	mov	ip, r8
 8007990:	b29b      	uxth	r3, r3
 8007992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007996:	f84c 3b04 	str.w	r3, [ip], #4
 800799a:	f859 3b04 	ldr.w	r3, [r9], #4
 800799e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80079a2:	0c1b      	lsrs	r3, r3, #16
 80079a4:	fb0a b303 	mla	r3, sl, r3, fp
 80079a8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80079ac:	454f      	cmp	r7, r9
 80079ae:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80079b2:	d805      	bhi.n	80079c0 <__multiply+0x124>
 80079b4:	f8c8 3004 	str.w	r3, [r8, #4]
 80079b8:	3504      	adds	r5, #4
 80079ba:	e79b      	b.n	80078f4 <__multiply+0x58>
 80079bc:	46d4      	mov	ip, sl
 80079be:	e7b3      	b.n	8007928 <__multiply+0x8c>
 80079c0:	46e0      	mov	r8, ip
 80079c2:	e7dd      	b.n	8007980 <__multiply+0xe4>
 80079c4:	3e01      	subs	r6, #1
 80079c6:	e799      	b.n	80078fc <__multiply+0x60>

080079c8 <__pow5mult>:
 80079c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079cc:	4615      	mov	r5, r2
 80079ce:	f012 0203 	ands.w	r2, r2, #3
 80079d2:	4606      	mov	r6, r0
 80079d4:	460f      	mov	r7, r1
 80079d6:	d007      	beq.n	80079e8 <__pow5mult+0x20>
 80079d8:	3a01      	subs	r2, #1
 80079da:	4c21      	ldr	r4, [pc, #132]	; (8007a60 <__pow5mult+0x98>)
 80079dc:	2300      	movs	r3, #0
 80079de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079e2:	f7ff fec9 	bl	8007778 <__multadd>
 80079e6:	4607      	mov	r7, r0
 80079e8:	10ad      	asrs	r5, r5, #2
 80079ea:	d035      	beq.n	8007a58 <__pow5mult+0x90>
 80079ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80079ee:	b93c      	cbnz	r4, 8007a00 <__pow5mult+0x38>
 80079f0:	2010      	movs	r0, #16
 80079f2:	f7ff fe63 	bl	80076bc <malloc>
 80079f6:	6270      	str	r0, [r6, #36]	; 0x24
 80079f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079fc:	6004      	str	r4, [r0, #0]
 80079fe:	60c4      	str	r4, [r0, #12]
 8007a00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007a04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a08:	b94c      	cbnz	r4, 8007a1e <__pow5mult+0x56>
 8007a0a:	f240 2171 	movw	r1, #625	; 0x271
 8007a0e:	4630      	mov	r0, r6
 8007a10:	f7ff ff3b 	bl	800788a <__i2b>
 8007a14:	2300      	movs	r3, #0
 8007a16:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	6003      	str	r3, [r0, #0]
 8007a1e:	f04f 0800 	mov.w	r8, #0
 8007a22:	07eb      	lsls	r3, r5, #31
 8007a24:	d50a      	bpl.n	8007a3c <__pow5mult+0x74>
 8007a26:	4639      	mov	r1, r7
 8007a28:	4622      	mov	r2, r4
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	f7ff ff36 	bl	800789c <__multiply>
 8007a30:	4639      	mov	r1, r7
 8007a32:	4681      	mov	r9, r0
 8007a34:	4630      	mov	r0, r6
 8007a36:	f7ff fe88 	bl	800774a <_Bfree>
 8007a3a:	464f      	mov	r7, r9
 8007a3c:	106d      	asrs	r5, r5, #1
 8007a3e:	d00b      	beq.n	8007a58 <__pow5mult+0x90>
 8007a40:	6820      	ldr	r0, [r4, #0]
 8007a42:	b938      	cbnz	r0, 8007a54 <__pow5mult+0x8c>
 8007a44:	4622      	mov	r2, r4
 8007a46:	4621      	mov	r1, r4
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f7ff ff27 	bl	800789c <__multiply>
 8007a4e:	6020      	str	r0, [r4, #0]
 8007a50:	f8c0 8000 	str.w	r8, [r0]
 8007a54:	4604      	mov	r4, r0
 8007a56:	e7e4      	b.n	8007a22 <__pow5mult+0x5a>
 8007a58:	4638      	mov	r0, r7
 8007a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a5e:	bf00      	nop
 8007a60:	08007f40 	.word	0x08007f40

08007a64 <__lshift>:
 8007a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a68:	460c      	mov	r4, r1
 8007a6a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a6e:	6923      	ldr	r3, [r4, #16]
 8007a70:	6849      	ldr	r1, [r1, #4]
 8007a72:	eb0a 0903 	add.w	r9, sl, r3
 8007a76:	68a3      	ldr	r3, [r4, #8]
 8007a78:	4607      	mov	r7, r0
 8007a7a:	4616      	mov	r6, r2
 8007a7c:	f109 0501 	add.w	r5, r9, #1
 8007a80:	42ab      	cmp	r3, r5
 8007a82:	db32      	blt.n	8007aea <__lshift+0x86>
 8007a84:	4638      	mov	r0, r7
 8007a86:	f7ff fe2c 	bl	80076e2 <_Balloc>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	4680      	mov	r8, r0
 8007a8e:	f100 0114 	add.w	r1, r0, #20
 8007a92:	461a      	mov	r2, r3
 8007a94:	4553      	cmp	r3, sl
 8007a96:	db2b      	blt.n	8007af0 <__lshift+0x8c>
 8007a98:	6920      	ldr	r0, [r4, #16]
 8007a9a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a9e:	f104 0314 	add.w	r3, r4, #20
 8007aa2:	f016 021f 	ands.w	r2, r6, #31
 8007aa6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007aaa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007aae:	d025      	beq.n	8007afc <__lshift+0x98>
 8007ab0:	f1c2 0e20 	rsb	lr, r2, #32
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	681e      	ldr	r6, [r3, #0]
 8007ab8:	468a      	mov	sl, r1
 8007aba:	4096      	lsls	r6, r2
 8007abc:	4330      	orrs	r0, r6
 8007abe:	f84a 0b04 	str.w	r0, [sl], #4
 8007ac2:	f853 0b04 	ldr.w	r0, [r3], #4
 8007ac6:	459c      	cmp	ip, r3
 8007ac8:	fa20 f00e 	lsr.w	r0, r0, lr
 8007acc:	d814      	bhi.n	8007af8 <__lshift+0x94>
 8007ace:	6048      	str	r0, [r1, #4]
 8007ad0:	b108      	cbz	r0, 8007ad6 <__lshift+0x72>
 8007ad2:	f109 0502 	add.w	r5, r9, #2
 8007ad6:	3d01      	subs	r5, #1
 8007ad8:	4638      	mov	r0, r7
 8007ada:	f8c8 5010 	str.w	r5, [r8, #16]
 8007ade:	4621      	mov	r1, r4
 8007ae0:	f7ff fe33 	bl	800774a <_Bfree>
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aea:	3101      	adds	r1, #1
 8007aec:	005b      	lsls	r3, r3, #1
 8007aee:	e7c7      	b.n	8007a80 <__lshift+0x1c>
 8007af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007af4:	3301      	adds	r3, #1
 8007af6:	e7cd      	b.n	8007a94 <__lshift+0x30>
 8007af8:	4651      	mov	r1, sl
 8007afa:	e7dc      	b.n	8007ab6 <__lshift+0x52>
 8007afc:	3904      	subs	r1, #4
 8007afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b02:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b06:	459c      	cmp	ip, r3
 8007b08:	d8f9      	bhi.n	8007afe <__lshift+0x9a>
 8007b0a:	e7e4      	b.n	8007ad6 <__lshift+0x72>

08007b0c <__mcmp>:
 8007b0c:	6903      	ldr	r3, [r0, #16]
 8007b0e:	690a      	ldr	r2, [r1, #16]
 8007b10:	1a9b      	subs	r3, r3, r2
 8007b12:	b530      	push	{r4, r5, lr}
 8007b14:	d10c      	bne.n	8007b30 <__mcmp+0x24>
 8007b16:	0092      	lsls	r2, r2, #2
 8007b18:	3014      	adds	r0, #20
 8007b1a:	3114      	adds	r1, #20
 8007b1c:	1884      	adds	r4, r0, r2
 8007b1e:	4411      	add	r1, r2
 8007b20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b28:	4295      	cmp	r5, r2
 8007b2a:	d003      	beq.n	8007b34 <__mcmp+0x28>
 8007b2c:	d305      	bcc.n	8007b3a <__mcmp+0x2e>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	4618      	mov	r0, r3
 8007b32:	bd30      	pop	{r4, r5, pc}
 8007b34:	42a0      	cmp	r0, r4
 8007b36:	d3f3      	bcc.n	8007b20 <__mcmp+0x14>
 8007b38:	e7fa      	b.n	8007b30 <__mcmp+0x24>
 8007b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3e:	e7f7      	b.n	8007b30 <__mcmp+0x24>

08007b40 <__mdiff>:
 8007b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b44:	460d      	mov	r5, r1
 8007b46:	4607      	mov	r7, r0
 8007b48:	4611      	mov	r1, r2
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	4614      	mov	r4, r2
 8007b4e:	f7ff ffdd 	bl	8007b0c <__mcmp>
 8007b52:	1e06      	subs	r6, r0, #0
 8007b54:	d108      	bne.n	8007b68 <__mdiff+0x28>
 8007b56:	4631      	mov	r1, r6
 8007b58:	4638      	mov	r0, r7
 8007b5a:	f7ff fdc2 	bl	80076e2 <_Balloc>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b68:	bfa4      	itt	ge
 8007b6a:	4623      	movge	r3, r4
 8007b6c:	462c      	movge	r4, r5
 8007b6e:	4638      	mov	r0, r7
 8007b70:	6861      	ldr	r1, [r4, #4]
 8007b72:	bfa6      	itte	ge
 8007b74:	461d      	movge	r5, r3
 8007b76:	2600      	movge	r6, #0
 8007b78:	2601      	movlt	r6, #1
 8007b7a:	f7ff fdb2 	bl	80076e2 <_Balloc>
 8007b7e:	692b      	ldr	r3, [r5, #16]
 8007b80:	60c6      	str	r6, [r0, #12]
 8007b82:	6926      	ldr	r6, [r4, #16]
 8007b84:	f105 0914 	add.w	r9, r5, #20
 8007b88:	f104 0214 	add.w	r2, r4, #20
 8007b8c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007b90:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007b94:	f100 0514 	add.w	r5, r0, #20
 8007b98:	f04f 0e00 	mov.w	lr, #0
 8007b9c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007ba0:	f859 4b04 	ldr.w	r4, [r9], #4
 8007ba4:	fa1e f18a 	uxtah	r1, lr, sl
 8007ba8:	b2a3      	uxth	r3, r4
 8007baa:	1ac9      	subs	r1, r1, r3
 8007bac:	0c23      	lsrs	r3, r4, #16
 8007bae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007bb2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007bb6:	b289      	uxth	r1, r1
 8007bb8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007bbc:	45c8      	cmp	r8, r9
 8007bbe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007bc2:	4694      	mov	ip, r2
 8007bc4:	f845 3b04 	str.w	r3, [r5], #4
 8007bc8:	d8e8      	bhi.n	8007b9c <__mdiff+0x5c>
 8007bca:	45bc      	cmp	ip, r7
 8007bcc:	d304      	bcc.n	8007bd8 <__mdiff+0x98>
 8007bce:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007bd2:	b183      	cbz	r3, 8007bf6 <__mdiff+0xb6>
 8007bd4:	6106      	str	r6, [r0, #16]
 8007bd6:	e7c5      	b.n	8007b64 <__mdiff+0x24>
 8007bd8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007bdc:	fa1e f381 	uxtah	r3, lr, r1
 8007be0:	141a      	asrs	r2, r3, #16
 8007be2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007bf0:	f845 3b04 	str.w	r3, [r5], #4
 8007bf4:	e7e9      	b.n	8007bca <__mdiff+0x8a>
 8007bf6:	3e01      	subs	r6, #1
 8007bf8:	e7e9      	b.n	8007bce <__mdiff+0x8e>

08007bfa <__d2b>:
 8007bfa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bfe:	460e      	mov	r6, r1
 8007c00:	2101      	movs	r1, #1
 8007c02:	ec59 8b10 	vmov	r8, r9, d0
 8007c06:	4615      	mov	r5, r2
 8007c08:	f7ff fd6b 	bl	80076e2 <_Balloc>
 8007c0c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007c10:	4607      	mov	r7, r0
 8007c12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c16:	bb34      	cbnz	r4, 8007c66 <__d2b+0x6c>
 8007c18:	9301      	str	r3, [sp, #4]
 8007c1a:	f1b8 0300 	subs.w	r3, r8, #0
 8007c1e:	d027      	beq.n	8007c70 <__d2b+0x76>
 8007c20:	a802      	add	r0, sp, #8
 8007c22:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007c26:	f7ff fe01 	bl	800782c <__lo0bits>
 8007c2a:	9900      	ldr	r1, [sp, #0]
 8007c2c:	b1f0      	cbz	r0, 8007c6c <__d2b+0x72>
 8007c2e:	9a01      	ldr	r2, [sp, #4]
 8007c30:	f1c0 0320 	rsb	r3, r0, #32
 8007c34:	fa02 f303 	lsl.w	r3, r2, r3
 8007c38:	430b      	orrs	r3, r1
 8007c3a:	40c2      	lsrs	r2, r0
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	9201      	str	r2, [sp, #4]
 8007c40:	9b01      	ldr	r3, [sp, #4]
 8007c42:	61bb      	str	r3, [r7, #24]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	bf14      	ite	ne
 8007c48:	2102      	movne	r1, #2
 8007c4a:	2101      	moveq	r1, #1
 8007c4c:	6139      	str	r1, [r7, #16]
 8007c4e:	b1c4      	cbz	r4, 8007c82 <__d2b+0x88>
 8007c50:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007c54:	4404      	add	r4, r0
 8007c56:	6034      	str	r4, [r6, #0]
 8007c58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c5c:	6028      	str	r0, [r5, #0]
 8007c5e:	4638      	mov	r0, r7
 8007c60:	b003      	add	sp, #12
 8007c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c6a:	e7d5      	b.n	8007c18 <__d2b+0x1e>
 8007c6c:	6179      	str	r1, [r7, #20]
 8007c6e:	e7e7      	b.n	8007c40 <__d2b+0x46>
 8007c70:	a801      	add	r0, sp, #4
 8007c72:	f7ff fddb 	bl	800782c <__lo0bits>
 8007c76:	9b01      	ldr	r3, [sp, #4]
 8007c78:	617b      	str	r3, [r7, #20]
 8007c7a:	2101      	movs	r1, #1
 8007c7c:	6139      	str	r1, [r7, #16]
 8007c7e:	3020      	adds	r0, #32
 8007c80:	e7e5      	b.n	8007c4e <__d2b+0x54>
 8007c82:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007c86:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c8a:	6030      	str	r0, [r6, #0]
 8007c8c:	6918      	ldr	r0, [r3, #16]
 8007c8e:	f7ff fdae 	bl	80077ee <__hi0bits>
 8007c92:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007c96:	e7e1      	b.n	8007c5c <__d2b+0x62>

08007c98 <_calloc_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	fb02 f401 	mul.w	r4, r2, r1
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	f000 f808 	bl	8007cb4 <_malloc_r>
 8007ca4:	4605      	mov	r5, r0
 8007ca6:	b118      	cbz	r0, 8007cb0 <_calloc_r+0x18>
 8007ca8:	4622      	mov	r2, r4
 8007caa:	2100      	movs	r1, #0
 8007cac:	f7fe fb60 	bl	8006370 <memset>
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}

08007cb4 <_malloc_r>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	1ccd      	adds	r5, r1, #3
 8007cb8:	f025 0503 	bic.w	r5, r5, #3
 8007cbc:	3508      	adds	r5, #8
 8007cbe:	2d0c      	cmp	r5, #12
 8007cc0:	bf38      	it	cc
 8007cc2:	250c      	movcc	r5, #12
 8007cc4:	2d00      	cmp	r5, #0
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	db01      	blt.n	8007cce <_malloc_r+0x1a>
 8007cca:	42a9      	cmp	r1, r5
 8007ccc:	d903      	bls.n	8007cd6 <_malloc_r+0x22>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	6033      	str	r3, [r6, #0]
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	bd70      	pop	{r4, r5, r6, pc}
 8007cd6:	f000 f869 	bl	8007dac <__malloc_lock>
 8007cda:	4a21      	ldr	r2, [pc, #132]	; (8007d60 <_malloc_r+0xac>)
 8007cdc:	6814      	ldr	r4, [r2, #0]
 8007cde:	4621      	mov	r1, r4
 8007ce0:	b991      	cbnz	r1, 8007d08 <_malloc_r+0x54>
 8007ce2:	4c20      	ldr	r4, [pc, #128]	; (8007d64 <_malloc_r+0xb0>)
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	b91b      	cbnz	r3, 8007cf0 <_malloc_r+0x3c>
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f000 f83d 	bl	8007d68 <_sbrk_r>
 8007cee:	6020      	str	r0, [r4, #0]
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f000 f838 	bl	8007d68 <_sbrk_r>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d124      	bne.n	8007d46 <_malloc_r+0x92>
 8007cfc:	230c      	movs	r3, #12
 8007cfe:	6033      	str	r3, [r6, #0]
 8007d00:	4630      	mov	r0, r6
 8007d02:	f000 f854 	bl	8007dae <__malloc_unlock>
 8007d06:	e7e4      	b.n	8007cd2 <_malloc_r+0x1e>
 8007d08:	680b      	ldr	r3, [r1, #0]
 8007d0a:	1b5b      	subs	r3, r3, r5
 8007d0c:	d418      	bmi.n	8007d40 <_malloc_r+0x8c>
 8007d0e:	2b0b      	cmp	r3, #11
 8007d10:	d90f      	bls.n	8007d32 <_malloc_r+0x7e>
 8007d12:	600b      	str	r3, [r1, #0]
 8007d14:	50cd      	str	r5, [r1, r3]
 8007d16:	18cc      	adds	r4, r1, r3
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f000 f848 	bl	8007dae <__malloc_unlock>
 8007d1e:	f104 000b 	add.w	r0, r4, #11
 8007d22:	1d23      	adds	r3, r4, #4
 8007d24:	f020 0007 	bic.w	r0, r0, #7
 8007d28:	1ac3      	subs	r3, r0, r3
 8007d2a:	d0d3      	beq.n	8007cd4 <_malloc_r+0x20>
 8007d2c:	425a      	negs	r2, r3
 8007d2e:	50e2      	str	r2, [r4, r3]
 8007d30:	e7d0      	b.n	8007cd4 <_malloc_r+0x20>
 8007d32:	428c      	cmp	r4, r1
 8007d34:	684b      	ldr	r3, [r1, #4]
 8007d36:	bf16      	itet	ne
 8007d38:	6063      	strne	r3, [r4, #4]
 8007d3a:	6013      	streq	r3, [r2, #0]
 8007d3c:	460c      	movne	r4, r1
 8007d3e:	e7eb      	b.n	8007d18 <_malloc_r+0x64>
 8007d40:	460c      	mov	r4, r1
 8007d42:	6849      	ldr	r1, [r1, #4]
 8007d44:	e7cc      	b.n	8007ce0 <_malloc_r+0x2c>
 8007d46:	1cc4      	adds	r4, r0, #3
 8007d48:	f024 0403 	bic.w	r4, r4, #3
 8007d4c:	42a0      	cmp	r0, r4
 8007d4e:	d005      	beq.n	8007d5c <_malloc_r+0xa8>
 8007d50:	1a21      	subs	r1, r4, r0
 8007d52:	4630      	mov	r0, r6
 8007d54:	f000 f808 	bl	8007d68 <_sbrk_r>
 8007d58:	3001      	adds	r0, #1
 8007d5a:	d0cf      	beq.n	8007cfc <_malloc_r+0x48>
 8007d5c:	6025      	str	r5, [r4, #0]
 8007d5e:	e7db      	b.n	8007d18 <_malloc_r+0x64>
 8007d60:	20000200 	.word	0x20000200
 8007d64:	20000204 	.word	0x20000204

08007d68 <_sbrk_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4c06      	ldr	r4, [pc, #24]	; (8007d84 <_sbrk_r+0x1c>)
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	4605      	mov	r5, r0
 8007d70:	4608      	mov	r0, r1
 8007d72:	6023      	str	r3, [r4, #0]
 8007d74:	f7f9 fcb0 	bl	80016d8 <_sbrk>
 8007d78:	1c43      	adds	r3, r0, #1
 8007d7a:	d102      	bne.n	8007d82 <_sbrk_r+0x1a>
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	b103      	cbz	r3, 8007d82 <_sbrk_r+0x1a>
 8007d80:	602b      	str	r3, [r5, #0]
 8007d82:	bd38      	pop	{r3, r4, r5, pc}
 8007d84:	20000450 	.word	0x20000450

08007d88 <__ascii_mbtowc>:
 8007d88:	b082      	sub	sp, #8
 8007d8a:	b901      	cbnz	r1, 8007d8e <__ascii_mbtowc+0x6>
 8007d8c:	a901      	add	r1, sp, #4
 8007d8e:	b142      	cbz	r2, 8007da2 <__ascii_mbtowc+0x1a>
 8007d90:	b14b      	cbz	r3, 8007da6 <__ascii_mbtowc+0x1e>
 8007d92:	7813      	ldrb	r3, [r2, #0]
 8007d94:	600b      	str	r3, [r1, #0]
 8007d96:	7812      	ldrb	r2, [r2, #0]
 8007d98:	1c10      	adds	r0, r2, #0
 8007d9a:	bf18      	it	ne
 8007d9c:	2001      	movne	r0, #1
 8007d9e:	b002      	add	sp, #8
 8007da0:	4770      	bx	lr
 8007da2:	4610      	mov	r0, r2
 8007da4:	e7fb      	b.n	8007d9e <__ascii_mbtowc+0x16>
 8007da6:	f06f 0001 	mvn.w	r0, #1
 8007daa:	e7f8      	b.n	8007d9e <__ascii_mbtowc+0x16>

08007dac <__malloc_lock>:
 8007dac:	4770      	bx	lr

08007dae <__malloc_unlock>:
 8007dae:	4770      	bx	lr

08007db0 <__ascii_wctomb>:
 8007db0:	b149      	cbz	r1, 8007dc6 <__ascii_wctomb+0x16>
 8007db2:	2aff      	cmp	r2, #255	; 0xff
 8007db4:	bf85      	ittet	hi
 8007db6:	238a      	movhi	r3, #138	; 0x8a
 8007db8:	6003      	strhi	r3, [r0, #0]
 8007dba:	700a      	strbls	r2, [r1, #0]
 8007dbc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007dc0:	bf98      	it	ls
 8007dc2:	2001      	movls	r0, #1
 8007dc4:	4770      	bx	lr
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	4770      	bx	lr
	...

08007dcc <_init>:
 8007dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dce:	bf00      	nop
 8007dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd2:	bc08      	pop	{r3}
 8007dd4:	469e      	mov	lr, r3
 8007dd6:	4770      	bx	lr

08007dd8 <_fini>:
 8007dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dda:	bf00      	nop
 8007ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dde:	bc08      	pop	{r3}
 8007de0:	469e      	mov	lr, r3
 8007de2:	4770      	bx	lr
